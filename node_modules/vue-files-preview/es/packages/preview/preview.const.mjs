import "./supports/docx-preview/index.mjs";
import "./supports/xlsx-preview/index.mjs";
import "./supports/pdf-preview/index.mjs";
import "./supports/pic-preview/index.mjs";
import "./supports/txt-preview/index.mjs";
import "./supports/code-preview/index.mjs";
import "./supports/md-preview/index.mjs";
import "./supports/epub-preview/index.mjs";
import "./supports/audio-preview/index.mjs";
import "./supports/video-preview/index.mjs";
import { PreviewType as e } from "./preview.interface.mjs";
import m from "./supports/code-preview/index.vue.mjs";
import c from "./supports/docx-preview/index.vue.mjs";
import i from "./supports/xlsx-preview/index.vue.mjs";
import n from "./supports/pdf-preview/index.vue.mjs";
import r from "./supports/epub-preview/index.vue.mjs";
import s from "./supports/md-preview/index.vue.mjs";
import a from "./supports/pic-preview/index.vue.mjs";
import f from "./supports/txt-preview/index.vue.mjs";
import v from "./supports/audio-preview/index.vue.mjs";
import P from "./supports/video-preview/index.vue.mjs";
const U = [e.CODE, e.TXT, e.MD], A = [e.DOC, e.DOCX, e.XLSX, e.PPT, e.EPUB], M = [e.PIC, e.AUDIO], V = [e.PDF], $ = [e.VIDEO], p = {
  [e.NONE]: {
    name: "",
    component: void 0,
    type: e.NONE,
    accept: []
  },
  [e.CODE]: {
    name: "",
    component: m,
    type: e.CODE,
    accept: ["html", "css", "less", "scss", "js", "json", "ts", "vue", "c", "cpp", "java", "py", "go", "php", "lua", "rb", "pl", "swift", "vb", "cs", "sh", "rs", "vim", "log", "lock", "swift", "mod", "mht", "mhtml", "xml"]
  },
  [e.DOC]: {
    name: "",
    component: void 0,
    type: e.DOC,
    accept: ["doc", "docm", "dot", "dotm", "dotx", "fodt", "mht", "odt", "ott", "rtf", "djvu", "xps"]
  },
  [e.DOCX]: {
    name: "",
    component: c,
    type: e.DOCX,
    accept: ["docx"]
  },
  [e.XLSX]: {
    name: "",
    component: i,
    type: e.XLSX,
    accept: ["xlsx", "xls", "csv", "fods", "ods", "ots", "xlsm", "xlt", "xltm"]
  },
  // ppt: presentation
  [e.PPT]: {
    name: "",
    component: void 0,
    type: e.PPT,
    accept: ["ppt", "pptx", "fodp", "odp", "otp", "pot", "potm", "potx", "pps", "ppsm", "ppsx", "pptm"]
  },
  [e.PDF]: {
    name: "",
    component: n,
    type: e.PDF,
    accept: ["pdf"]
  },
  [e.EPUB]: {
    name: "",
    component: r,
    type: e.EPUB,
    accept: ["epub"]
  },
  [e.MD]: {
    name: "",
    component: s,
    type: e.MD,
    accept: ["md"]
  },
  [e.PIC]: {
    name: "",
    component: a,
    type: e.PIC,
    accept: ["jpg", "png", "jpeg", "webp", "gif", "bmp", "svg", "ico"]
  },
  [e.TXT]: {
    name: "",
    component: f,
    type: e.TXT,
    accept: ["txt"]
  },
  [e.AUDIO]: {
    name: "",
    component: v,
    type: e.AUDIO,
    accept: ["mp3", "wav", "wma", "ogg", "aac", "flac"]
  },
  [e.VIDEO]: {
    name: "",
    component: P,
    type: e.VIDEO,
    accept: ["mp4", "webm", "ogg", "mkv", "avi", "mpeg", "flv", "mov", "wmv"]
  }
};
function d(t) {
  return Object.values(p).find((o) => o.accept.includes(t)) ?? p[e.NONE];
}
function S(t) {
  return d(t).type;
}
export {
  p as PreviewRules,
  A as arrayBufferPreviewTypeList,
  S as getPreviewTypeByFileType,
  d as getRuleByFileType,
  M as imagePreviewTypeList,
  V as pdfPreviewTypeList,
  U as textFilePreviewTypeList,
  $ as videoPreviewTypeList
};
//# sourceMappingURL=preview.const.mjs.map
