var a, E;
function v() {
  if (E) return a;
  E = 1;
  function l(e) {
    const s = e.regex, i = {
      className: "number",
      relevance: 0,
      variants: [
        { begin: /([+-]+)?[\d]+_[\d_]+/ },
        { begin: e.NUMBER_RE }
      ]
    }, n = e.COMMENT();
    n.variants = [
      {
        begin: /;/,
        end: /$/
      },
      {
        begin: /#/,
        end: /$/
      }
    ];
    const t = {
      className: "variable",
      variants: [
        { begin: /\$[\w\d"][\w\d_]*/ },
        { begin: /\$\{(.*?)\}/ }
      ]
    }, r = {
      className: "literal",
      begin: /\bon|off|true|false|yes|no\b/
    }, c = {
      className: "string",
      contains: [e.BACKSLASH_ESCAPE],
      variants: [
        {
          begin: "'''",
          end: "'''",
          relevance: 10
        },
        {
          begin: '"""',
          end: '"""',
          relevance: 10
        },
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "'",
          end: "'"
        }
      ]
    }, _ = {
      begin: /\[/,
      end: /\]/,
      contains: [
        n,
        r,
        t,
        c,
        i,
        "self"
      ],
      relevance: 0
    }, b = /[A-Za-z0-9_-]+/, g = /"(\\"|[^"])*"/, d = /'[^']*'/, o = s.either(
      b,
      g,
      d
    ), N = s.concat(
      o,
      "(\\s*\\.\\s*",
      o,
      ")*",
      s.lookahead(/\s*=\s*[^#\s]/)
    );
    return {
      name: "TOML, also INI",
      aliases: ["toml"],
      case_insensitive: !0,
      illegal: /\S/,
      contains: [
        n,
        {
          className: "section",
          begin: /\[+/,
          end: /\]+/
        },
        {
          begin: N,
          className: "attr",
          starts: {
            end: /$/,
            contains: [
              n,
              _,
              r,
              t,
              c,
              i
            ]
          }
        }
      ]
    };
  }
  return a = l, a;
}
export {
  v as __require
};
//# sourceMappingURL=ini.mjs.map
