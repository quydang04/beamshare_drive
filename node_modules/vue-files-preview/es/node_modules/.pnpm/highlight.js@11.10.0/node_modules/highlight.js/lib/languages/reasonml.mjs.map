{"version":3,"file":"reasonml.mjs","sources":["../../../../../../../../../node_modules/.pnpm/highlight.js@11.10.0/node_modules/highlight.js/lib/languages/reasonml.js"],"sourcesContent":["/*\nLanguage: ReasonML\nDescription: Reason lets you write simple, fast and quality type safe code while leveraging both the JavaScript & OCaml ecosystems.\nWebsite: https://reasonml.github.io\nAuthor: Gidi Meir Morris <oss@gidi.io>\nCategory: functional\n*/\nfunction reasonml(hljs) {\n  const BUILT_IN_TYPES = [\n    \"array\",\n    \"bool\",\n    \"bytes\",\n    \"char\",\n    \"exn|5\",\n    \"float\",\n    \"int\",\n    \"int32\",\n    \"int64\",\n    \"list\",\n    \"lazy_t|5\",\n    \"nativeint|5\",\n    \"ref\",\n    \"string\",\n    \"unit\",\n  ];\n  return {\n    name: 'ReasonML',\n    aliases: [ 're' ],\n    keywords: {\n      $pattern:  /[a-z_]\\w*!?/,\n      keyword: [\n        \"and\",\n        \"as\",\n        \"asr\",\n        \"assert\",\n        \"begin\",\n        \"class\",\n        \"constraint\",\n        \"do\",\n        \"done\",\n        \"downto\",\n        \"else\",\n        \"end\",\n        \"esfun\",\n        \"exception\",\n        \"external\",\n        \"for\",\n        \"fun\",\n        \"function\",\n        \"functor\",\n        \"if\",\n        \"in\",\n        \"include\",\n        \"inherit\",\n        \"initializer\",\n        \"land\",\n        \"lazy\",\n        \"let\",\n        \"lor\",\n        \"lsl\",\n        \"lsr\",\n        \"lxor\",\n        \"mod\",\n        \"module\",\n        \"mutable\",\n        \"new\",\n        \"nonrec\",\n        \"object\",\n        \"of\",\n        \"open\",\n        \"or\",\n        \"pri\",\n        \"pub\",\n        \"rec\",\n        \"sig\",\n        \"struct\",\n        \"switch\",\n        \"then\",\n        \"to\",\n        \"try\",\n        \"type\",\n        \"val\",\n        \"virtual\",\n        \"when\",\n        \"while\",\n        \"with\",\n      ],\n      built_in: BUILT_IN_TYPES,\n      literal: [\"true\", \"false\"],\n    },\n    illegal: /(:-|:=|\\$\\{|\\+=)/,\n    contains: [\n      {\n        scope: 'literal',\n        match: /\\[(\\|\\|)?\\]|\\(\\)/,\n        relevance: 0\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT(/\\/\\*/, /\\*\\//, { illegal: /^(#,\\/\\/)/ }),\n      { /* type variable */\n        scope: 'symbol',\n        match: /\\'[A-Za-z_](?!\\')[\\w\\']*/\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n      },\n      { /* polymorphic variant */\n        scope: 'type',\n        match: /`[A-Z][\\w\\']*/\n      },\n      { /* module or constructor */\n        scope: 'type',\n        match: /\\b[A-Z][\\w\\']*/,\n        relevance: 0\n      },\n      { /* don't color identifiers, but safely catch all identifiers with ' */\n      match: /[a-z_]\\w*\\'[\\w\\']*/,\n        relevance: 0\n      },\n      {\n        scope: 'operator',\n        match: /\\s+(\\|\\||\\+[\\+\\.]?|\\*[\\*\\/\\.]?|\\/[\\.]?|\\.\\.\\.|\\|>|&&|===?)\\s+/,\n        relevance: 0\n      },      \n      hljs.inherit(hljs.APOS_STRING_MODE, {\n        scope: 'string',\n        relevance: 0\n      }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),\n      {\n        scope: 'number',\n        variants: [\n          { match: /\\b0[xX][a-fA-F0-9_]+[Lln]?/ },\n          { match: /\\b0[oO][0-7_]+[Lln]?/ },\n          { match: /\\b0[bB][01_]+[Lln]?/ },\n          { match: /\\b[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)/ },\n        ],\n        relevance: 0\n      },\n    ]\n  };\n}\n\nmodule.exports = reasonml;\n"],"names":["reasonml","hljs","reasonml_1"],"mappings":";;;;AAOA,WAASA,EAASC,GAAM;AAkBtB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,CAAE,IAAM;AAAA,MACjB,UAAU;AAAA,QACR,UAAW;AAAA,QACX,SAAS;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAAA,QACD,UA/EmB;AAAA,UACrB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAAA,QAgEM,SAAS,CAAC,QAAQ,OAAO;AAAA,MAC1B;AAAA,MACD,SAAS;AAAA,MACT,UAAU;AAAA,QACR;AAAA,UACE,OAAO;AAAA,UACP,OAAO;AAAA,UACP,WAAW;AAAA,QACZ;AAAA,QACDA,EAAK;AAAA,QACLA,EAAK,QAAQ,QAAQ,QAAQ,EAAE,SAAS,aAAa;AAAA,QACrD;AAAA;AAAA,UACE,OAAO;AAAA,UACP,OAAO;AAAA;AAAA,QAER;AAAA,QACD;AAAA;AAAA,UACE,OAAO;AAAA,UACP,OAAO;AAAA,QACR;AAAA,QACD;AAAA;AAAA,UACE,OAAO;AAAA,UACP,OAAO;AAAA,UACP,WAAW;AAAA,QACZ;AAAA,QACD;AAAA;AAAA,UACA,OAAO;AAAA,UACL,WAAW;AAAA,QACZ;AAAA,QACD;AAAA,UACE,OAAO;AAAA,UACP,OAAO;AAAA,UACP,WAAW;AAAA,QACZ;AAAA,QACDA,EAAK,QAAQA,EAAK,kBAAkB;AAAA,UAClC,OAAO;AAAA,UACP,WAAW;AAAA,QACnB,CAAO;AAAA,QACDA,EAAK,QAAQA,EAAK,mBAAmB,EAAE,SAAS,MAAM;AAAA,QACtD;AAAA,UACE,OAAO;AAAA,UACP,UAAU;AAAA,YACR,EAAE,OAAO,6BAA8B;AAAA,YACvC,EAAE,OAAO,uBAAwB;AAAA,YACjC,EAAE,OAAO,sBAAuB;AAAA,YAChC,EAAE,OAAO,wDAAyD;AAAA,UACnE;AAAA,UACD,WAAW;AAAA,QACZ;AAAA,MACF;AAAA,IACL;AAAA,EACC;AAED,SAAAC,IAAiBF;;","x_google_ignoreList":[0]}