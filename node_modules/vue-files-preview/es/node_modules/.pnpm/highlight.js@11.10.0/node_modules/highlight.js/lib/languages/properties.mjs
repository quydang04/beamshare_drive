var n, i;
function l() {
  if (i) return n;
  i = 1;
  function a(c) {
    const t = "[ \\t\\f]*", o = "[ \\t\\f]+", r = t + "[:=]" + t, s = o, u = "(" + r + "|" + s + ")", e = "([^\\\\:= \\t\\f\\n]|\\\\.)+", g = {
      // skip DELIM
      end: u,
      relevance: 0,
      starts: {
        // value: everything until end of line (again, taking into account backslashes)
        className: "string",
        end: /$/,
        relevance: 0,
        contains: [
          { begin: "\\\\\\\\" },
          { begin: "\\\\\\n" }
        ]
      }
    };
    return {
      name: ".properties",
      disableAutodetect: !0,
      case_insensitive: !0,
      illegal: /\S/,
      contains: [
        c.COMMENT("^\\s*[!#]", "$"),
        // key: everything until whitespace or = or : (taking into account backslashes)
        // case of a key-value pair
        {
          returnBegin: !0,
          variants: [
            { begin: e + r },
            { begin: e + s }
          ],
          contains: [
            {
              className: "attr",
              begin: e,
              endsParent: !0
            }
          ],
          starts: g
        },
        // case of an empty key
        {
          className: "attr",
          begin: e + t + "$"
        }
      ]
    };
  }
  return n = a, n;
}
export {
  l as __require
};
//# sourceMappingURL=properties.mjs.map
