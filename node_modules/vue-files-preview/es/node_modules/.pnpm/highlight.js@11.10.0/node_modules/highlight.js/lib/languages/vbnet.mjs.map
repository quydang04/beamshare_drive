{"version":3,"file":"vbnet.mjs","sources":["../../../../../../../../../node_modules/.pnpm/highlight.js@11.10.0/node_modules/highlight.js/lib/languages/vbnet.js"],"sourcesContent":["/*\nLanguage: Visual Basic .NET\nDescription: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.\nAuthors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer\nWebsite: https://docs.microsoft.com/dotnet/visual-basic/getting-started\nCategory: common\n*/\n\n/** @type LanguageFn */\nfunction vbnet(hljs) {\n  const regex = hljs.regex;\n  /**\n   * Character Literal\n   * Either a single character (\"a\"C) or an escaped double quote (\"\"\"\"C).\n   */\n  const CHARACTER = {\n    className: 'string',\n    begin: /\"(\"\"|[^/n])\"C\\b/\n  };\n\n  const STRING = {\n    className: 'string',\n    begin: /\"/,\n    end: /\"/,\n    illegal: /\\n/,\n    contains: [\n      {\n        // double quote escape\n        begin: /\"\"/ }\n    ]\n  };\n\n  /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */\n  const MM_DD_YYYY = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/;\n  const YYYY_MM_DD = /\\d{4}-\\d{1,2}-\\d{1,2}/;\n  const TIME_12H = /(\\d|1[012])(:\\d+){0,2} *(AM|PM)/;\n  const TIME_24H = /\\d{1,2}(:\\d{1,2}){1,2}/;\n  const DATE = {\n    className: 'literal',\n    variants: [\n      {\n        // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)\n        begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / *#/) },\n      {\n        // #H:mm[:ss]# (24h Time)\n        begin: regex.concat(/# */, TIME_24H, / *#/) },\n      {\n        // #h[:mm[:ss]] A# (12h Time)\n        begin: regex.concat(/# */, TIME_12H, / *#/) },\n      {\n        // date plus time\n        begin: regex.concat(\n          /# */,\n          regex.either(YYYY_MM_DD, MM_DD_YYYY),\n          / +/,\n          regex.either(TIME_12H, TIME_24H),\n          / *#/\n        ) }\n    ]\n  };\n\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      {\n        // Float\n        begin: /\\b\\d[\\d_]*((\\.[\\d_]+(E[+-]?[\\d_]+)?)|(E[+-]?[\\d_]+))[RFD@!#]?/ },\n      {\n        // Integer (base 10)\n        begin: /\\b\\d[\\d_]*((U?[SIL])|[%&])?/ },\n      {\n        // Integer (base 16)\n        begin: /&H[\\dA-F_]+((U?[SIL])|[%&])?/ },\n      {\n        // Integer (base 8)\n        begin: /&O[0-7_]+((U?[SIL])|[%&])?/ },\n      {\n        // Integer (base 2)\n        begin: /&B[01_]+((U?[SIL])|[%&])?/ }\n    ]\n  };\n\n  const LABEL = {\n    className: 'label',\n    begin: /^\\w+:/\n  };\n\n  const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, { contains: [\n    {\n      className: 'doctag',\n      begin: /<\\/?/,\n      end: />/\n    }\n  ] });\n\n  const COMMENT = hljs.COMMENT(null, /$/, { variants: [\n    { begin: /'/ },\n    {\n      // TODO: Use multi-class for leading spaces\n      begin: /([\\t ]|^)REM(?=\\s)/ }\n  ] });\n\n  const DIRECTIVES = {\n    className: 'meta',\n    // TODO: Use multi-class for indentation once available\n    begin: /[\\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\\b/,\n    end: /$/,\n    keywords: { keyword:\n        'const disable else elseif enable end externalsource if region then' },\n    contains: [ COMMENT ]\n  };\n\n  return {\n    name: 'Visual Basic .NET',\n    aliases: [ 'vb' ],\n    case_insensitive: true,\n    classNameAliases: { label: 'symbol' },\n    keywords: {\n      keyword:\n        'addhandler alias aggregate ansi as async assembly auto binary by byref byval ' /* a-b */\n        + 'call case catch class compare const continue custom declare default delegate dim distinct do ' /* c-d */\n        + 'each equals else elseif end enum erase error event exit explicit finally for friend from function ' /* e-f */\n        + 'get global goto group handles if implements imports in inherits interface into iterator ' /* g-i */\n        + 'join key let lib loop me mid module mustinherit mustoverride mybase myclass ' /* j-m */\n        + 'namespace narrowing new next notinheritable notoverridable ' /* n */\n        + 'of off on operator option optional order overloads overridable overrides ' /* o */\n        + 'paramarray partial preserve private property protected public ' /* p */\n        + 'raiseevent readonly redim removehandler resume return ' /* r */\n        + 'select set shadows shared skip static step stop structure strict sub synclock ' /* s */\n        + 'take text then throw to try unicode until using when where while widening with withevents writeonly yield' /* t-y */,\n      built_in:\n        // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators\n        'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor '\n        // Type Conversion Functions https://docs.microsoft.com/dotnet/visual-basic/language-reference/functions/type-conversion-functions\n        + 'cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',\n      type:\n        // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types\n        'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',\n      literal: 'true false nothing'\n    },\n    illegal:\n      '//|\\\\{|\\\\}|endif|gosub|variant|wend|^\\\\$ ' /* reserved deprecated keywords */,\n    contains: [\n      CHARACTER,\n      STRING,\n      DATE,\n      NUMBER,\n      LABEL,\n      DOC_COMMENT,\n      COMMENT,\n      DIRECTIVES\n    ]\n  };\n}\n\nmodule.exports = vbnet;\n"],"names":["vbnet","hljs","regex","CHARACTER","STRING","MM_DD_YYYY","YYYY_MM_DD","TIME_12H","TIME_24H","DATE","NUMBER","LABEL","DOC_COMMENT","COMMENT","vbnet_1"],"mappings":";;;;AASA,WAASA,EAAMC,GAAM;AACnB,UAAMC,IAAQD,EAAK,OAKbE,IAAY;AAAA,MAChB,WAAW;AAAA,MACX,OAAO;AAAA,IACX,GAEQC,IAAS;AAAA,MACb,WAAW;AAAA,MACX,OAAO;AAAA,MACP,KAAK;AAAA,MACL,SAAS;AAAA,MACT,UAAU;AAAA,QACR;AAAA;AAAA,UAEE,OAAO;AAAA,QAAM;AAAA,MAChB;AAAA,IACL,GAGQC,IAAa,2BACbC,IAAa,yBACbC,IAAW,mCACXC,IAAW,0BACXC,IAAO;AAAA,MACX,WAAW;AAAA,MACX,UAAU;AAAA,QACR;AAAA;AAAA,UAEE,OAAOP,EAAM,OAAO,OAAOA,EAAM,OAAOI,GAAYD,CAAU,GAAG,KAAK;AAAA,QAAG;AAAA,QAC3E;AAAA;AAAA,UAEE,OAAOH,EAAM,OAAO,OAAOM,GAAU,KAAK;AAAA,QAAG;AAAA,QAC/C;AAAA;AAAA,UAEE,OAAON,EAAM,OAAO,OAAOK,GAAU,KAAK;AAAA,QAAG;AAAA,QAC/C;AAAA;AAAA,UAEE,OAAOL,EAAM;AAAA,YACX;AAAA,YACAA,EAAM,OAAOI,GAAYD,CAAU;AAAA,YACnC;AAAA,YACAH,EAAM,OAAOK,GAAUC,CAAQ;AAAA,YAC/B;AAAA,UACV;AAAA,QAAW;AAAA,MACN;AAAA,IACL,GAEQE,IAAS;AAAA,MACb,WAAW;AAAA,MACX,WAAW;AAAA,MACX,UAAU;AAAA,QACR;AAAA;AAAA,UAEE,OAAO;AAAA,QAAiE;AAAA,QAC1E;AAAA;AAAA,UAEE,OAAO;AAAA,QAA+B;AAAA,QACxC;AAAA;AAAA,UAEE,OAAO;AAAA,QAAgC;AAAA,QACzC;AAAA;AAAA,UAEE,OAAO;AAAA,QAA8B;AAAA,QACvC;AAAA;AAAA,UAEE,OAAO;AAAA,QAA6B;AAAA,MACvC;AAAA,IACL,GAEQC,IAAQ;AAAA,MACZ,WAAW;AAAA,MACX,OAAO;AAAA,IACX,GAEQC,IAAcX,EAAK,QAAQ,OAAO,KAAK,EAAE,UAAU;AAAA,MACvD;AAAA,QACE,WAAW;AAAA,QACX,OAAO;AAAA,QACP,KAAK;AAAA,MACN;AAAA,IACF,EAAA,CAAE,GAEGY,IAAUZ,EAAK,QAAQ,MAAM,KAAK,EAAE,UAAU;AAAA,MAClD,EAAE,OAAO,IAAK;AAAA,MACd;AAAA;AAAA,QAEE,OAAO;AAAA,MAAsB;AAAA,IAChC,EAAA,CAAE;AAYH,WAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,CAAE,IAAM;AAAA,MACjB,kBAAkB;AAAA,MAClB,kBAAkB,EAAE,OAAO,SAAU;AAAA,MACrC,UAAU;AAAA,QACR,SACE;AAAA,QAWF;AAAA;AAAA,UAEE;AAAA;AAAA,QAGF;AAAA;AAAA,UAEE;AAAA;AAAA,QACF,SAAS;AAAA,MACV;AAAA,MACD,SACE;AAAA,MACF,UAAU;AAAA,QACRE;AAAA,QACAC;AAAA,QACAK;AAAA,QACAC;AAAA,QACAC;AAAA,QACAC;AAAA,QACAC;AAAA,QA/Ce;AAAA,UACjB,WAAW;AAAA;AAAA,UAEX,OAAO;AAAA,UACP,KAAK;AAAA,UACL,UAAU,EAAE,SACR,qEAAsE;AAAA,UAC1E,UAAU,CAAEA,CAAS;AAAA,QACzB;AAAA,MAyCK;AAAA,IACL;AAAA,EACC;AAED,SAAAC,IAAiBd;;","x_google_ignoreList":[0]}