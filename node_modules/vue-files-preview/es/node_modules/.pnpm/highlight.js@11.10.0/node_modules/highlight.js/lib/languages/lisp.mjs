var b, u;
function O() {
  if (u) return b;
  u = 1;
  function L(e) {
    const n = "[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*", t = "\\|[^]*?\\|", c = "(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?", o = {
      className: "literal",
      begin: "\\b(t{1}|nil)\\b"
    }, i = {
      className: "number",
      variants: [
        {
          begin: c,
          relevance: 0
        },
        { begin: "#(b|B)[0-1]+(/[0-1]+)?" },
        { begin: "#(o|O)[0-7]+(/[0-7]+)?" },
        { begin: "#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?" },
        {
          begin: "#(c|C)\\(" + c + " +" + c,
          end: "\\)"
        }
      ]
    }, s = e.inherit(e.QUOTE_STRING_MODE, { illegal: null }), E = e.COMMENT(
      ";",
      "$",
      { relevance: 0 }
    ), l = {
      begin: "\\*",
      end: "\\*"
    }, g = {
      className: "symbol",
      begin: "[:&]" + n
    }, a = {
      begin: n,
      relevance: 0
    }, N = { begin: t }, T = {
      contains: [
        i,
        s,
        l,
        g,
        {
          begin: "\\(",
          end: "\\)",
          contains: [
            "self",
            o,
            s,
            i,
            a
          ]
        },
        a
      ],
      variants: [
        {
          begin: "['`]\\(",
          end: "\\)"
        },
        {
          begin: "\\(quote ",
          end: "\\)",
          keywords: { name: "quote" }
        },
        { begin: "'" + t }
      ]
    }, _ = { variants: [
      { begin: "'" + n },
      { begin: "#'" + n + "(::" + n + ")*" }
    ] }, r = {
      begin: "\\(\\s*",
      end: "\\)"
    }, d = {
      endsWithParent: !0,
      relevance: 0
    };
    return r.contains = [
      {
        className: "name",
        variants: [
          {
            begin: n,
            relevance: 0
          },
          { begin: t }
        ]
      },
      d
    ], d.contains = [
      T,
      _,
      r,
      o,
      i,
      s,
      E,
      l,
      g,
      N,
      a
    ], {
      name: "Lisp",
      illegal: /\S/,
      contains: [
        i,
        e.SHEBANG(),
        o,
        s,
        E,
        T,
        _,
        r,
        a
      ]
    };
  }
  return b = L, b;
}
export {
  O as __require
};
//# sourceMappingURL=lisp.mjs.map
