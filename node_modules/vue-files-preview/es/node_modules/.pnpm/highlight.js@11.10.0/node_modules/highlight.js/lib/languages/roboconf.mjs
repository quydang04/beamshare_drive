var o, t;
function i() {
  if (t) return o;
  t = 1;
  function s(n) {
    const e = "[a-zA-Z-_][^\\n{]+\\{", a = {
      className: "attribute",
      begin: /[a-zA-Z-_]+/,
      end: /\s*:/,
      excludeEnd: !0,
      starts: {
        end: ";",
        relevance: 0,
        contains: [
          {
            className: "variable",
            begin: /\.[a-zA-Z-_]+/
          },
          {
            className: "keyword",
            begin: /\(optional\)/
          }
        ]
      }
    };
    return {
      name: "Roboconf",
      aliases: [
        "graph",
        "instances"
      ],
      case_insensitive: !0,
      keywords: "import",
      contains: [
        // Facet sections
        {
          begin: "^facet " + e,
          end: /\}/,
          keywords: "facet",
          contains: [
            a,
            n.HASH_COMMENT_MODE
          ]
        },
        // Instance sections
        {
          begin: "^\\s*instance of " + e,
          end: /\}/,
          keywords: "name count channels instance-data instance-state instance of",
          illegal: /\S/,
          contains: [
            "self",
            a,
            n.HASH_COMMENT_MODE
          ]
        },
        // Component sections
        {
          begin: "^" + e,
          end: /\}/,
          contains: [
            a,
            n.HASH_COMMENT_MODE
          ]
        },
        // Comments
        n.HASH_COMMENT_MODE
      ]
    };
  }
  return o = s, o;
}
export {
  i as __require
};
//# sourceMappingURL=roboconf.mjs.map
