{"version":3,"file":"swift.mjs","sources":["../../../../../../../../../node_modules/.pnpm/highlight.js@11.10.0/node_modules/highlight.js/lib/languages/swift.js"],"sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * @param { Array<string | RegExp | Object> } args\n * @returns {object}\n */\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/** @typedef { {capture?: boolean} } RegexEitherOptions */\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args\n * @returns {string}\n */\nfunction either(...args) {\n  /** @type { object & {capture?: boolean} }  */\n  const opts = stripOptionsFromArgs(args);\n  const joined = '('\n    + (opts.capture ? \"\" : \"?:\")\n    + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\nconst keywordWrapper = keyword => concat(\n  /\\b/,\n  keyword,\n  /\\w$/.test(keyword) ? /\\b/ : /\\B/\n);\n\n// Keywords that require a leading dot.\nconst dotKeywords = [\n  'Protocol', // contextual\n  'Type' // contextual\n].map(keywordWrapper);\n\n// Keywords that may have a leading dot.\nconst optionalDotKeywords = [\n  'init',\n  'self'\n].map(keywordWrapper);\n\n// should register as keyword, not type\nconst keywordTypes = [\n  'Any',\n  'Self'\n];\n\n// Regular keywords and literals.\nconst keywords = [\n  // strings below will be fed into the regular `keywords` engine while regex\n  // will result in additional modes being created to scan for those keywords to\n  // avoid conflicts with other rules\n  'actor',\n  'any', // contextual\n  'associatedtype',\n  'async',\n  'await',\n  /as\\?/, // operator\n  /as!/, // operator\n  'as', // operator\n  'borrowing', // contextual\n  'break',\n  'case',\n  'catch',\n  'class',\n  'consume', // contextual\n  'consuming', // contextual\n  'continue',\n  'convenience', // contextual\n  'copy', // contextual\n  'default',\n  'defer',\n  'deinit',\n  'didSet', // contextual\n  'distributed',\n  'do',\n  'dynamic', // contextual\n  'each',\n  'else',\n  'enum',\n  'extension',\n  'fallthrough',\n  /fileprivate\\(set\\)/,\n  'fileprivate',\n  'final', // contextual\n  'for',\n  'func',\n  'get', // contextual\n  'guard',\n  'if',\n  'import',\n  'indirect', // contextual\n  'infix', // contextual\n  /init\\?/,\n  /init!/,\n  'inout',\n  /internal\\(set\\)/,\n  'internal',\n  'in',\n  'is', // operator\n  'isolated', // contextual\n  'nonisolated', // contextual\n  'lazy', // contextual\n  'let',\n  'macro',\n  'mutating', // contextual\n  'nonmutating', // contextual\n  /open\\(set\\)/, // contextual\n  'open', // contextual\n  'operator',\n  'optional', // contextual\n  'override', // contextual\n  'package',\n  'postfix', // contextual\n  'precedencegroup',\n  'prefix', // contextual\n  /private\\(set\\)/,\n  'private',\n  'protocol',\n  /public\\(set\\)/,\n  'public',\n  'repeat',\n  'required', // contextual\n  'rethrows',\n  'return',\n  'set', // contextual\n  'some', // contextual\n  'static',\n  'struct',\n  'subscript',\n  'super',\n  'switch',\n  'throws',\n  'throw',\n  /try\\?/, // operator\n  /try!/, // operator\n  'try', // operator\n  'typealias',\n  /unowned\\(safe\\)/, // contextual\n  /unowned\\(unsafe\\)/, // contextual\n  'unowned', // contextual\n  'var',\n  'weak', // contextual\n  'where',\n  'while',\n  'willSet' // contextual\n];\n\n// NOTE: Contextual keywords are reserved only in specific contexts.\n// Ideally, these should be matched using modes to avoid false positives.\n\n// Literals.\nconst literals = [\n  'false',\n  'nil',\n  'true'\n];\n\n// Keywords used in precedence groups.\nconst precedencegroupKeywords = [\n  'assignment',\n  'associativity',\n  'higherThan',\n  'left',\n  'lowerThan',\n  'none',\n  'right'\n];\n\n// Keywords that start with a number sign (#).\n// #(un)available is handled separately.\nconst numberSignKeywords = [\n  '#colorLiteral',\n  '#column',\n  '#dsohandle',\n  '#else',\n  '#elseif',\n  '#endif',\n  '#error',\n  '#file',\n  '#fileID',\n  '#fileLiteral',\n  '#filePath',\n  '#function',\n  '#if',\n  '#imageLiteral',\n  '#keyPath',\n  '#line',\n  '#selector',\n  '#sourceLocation',\n  '#warning'\n];\n\n// Global functions in the Standard Library.\nconst builtIns = [\n  'abs',\n  'all',\n  'any',\n  'assert',\n  'assertionFailure',\n  'debugPrint',\n  'dump',\n  'fatalError',\n  'getVaList',\n  'isKnownUniquelyReferenced',\n  'max',\n  'min',\n  'numericCast',\n  'pointwiseMax',\n  'pointwiseMin',\n  'precondition',\n  'preconditionFailure',\n  'print',\n  'readLine',\n  'repeatElement',\n  'sequence',\n  'stride',\n  'swap',\n  'swift_unboxFromSwiftValueWithType',\n  'transcode',\n  'type',\n  'unsafeBitCast',\n  'unsafeDowncast',\n  'withExtendedLifetime',\n  'withUnsafeMutablePointer',\n  'withUnsafePointer',\n  'withVaList',\n  'withoutActuallyEscaping',\n  'zip'\n];\n\n// Valid first characters for operators.\nconst operatorHead = either(\n  /[/=\\-+!*%<>&|^~?]/,\n  /[\\u00A1-\\u00A7]/,\n  /[\\u00A9\\u00AB]/,\n  /[\\u00AC\\u00AE]/,\n  /[\\u00B0\\u00B1]/,\n  /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/,\n  /[\\u2016-\\u2017]/,\n  /[\\u2020-\\u2027]/,\n  /[\\u2030-\\u203E]/,\n  /[\\u2041-\\u2053]/,\n  /[\\u2055-\\u205E]/,\n  /[\\u2190-\\u23FF]/,\n  /[\\u2500-\\u2775]/,\n  /[\\u2794-\\u2BFF]/,\n  /[\\u2E00-\\u2E7F]/,\n  /[\\u3001-\\u3003]/,\n  /[\\u3008-\\u3020]/,\n  /[\\u3030]/\n);\n\n// Valid characters for operators.\nconst operatorCharacter = either(\n  operatorHead,\n  /[\\u0300-\\u036F]/,\n  /[\\u1DC0-\\u1DFF]/,\n  /[\\u20D0-\\u20FF]/,\n  /[\\uFE00-\\uFE0F]/,\n  /[\\uFE20-\\uFE2F]/\n  // TODO: The following characters are also allowed, but the regex isn't supported yet.\n  // /[\\u{E0100}-\\u{E01EF}]/u\n);\n\n// Valid operator.\nconst operator = concat(operatorHead, operatorCharacter, '*');\n\n// Valid first characters for identifiers.\nconst identifierHead = either(\n  /[a-zA-Z_]/,\n  /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/,\n  /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/,\n  /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/,\n  /[\\u1E00-\\u1FFF]/,\n  /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/,\n  /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/,\n  /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/,\n  /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/,\n  /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/,\n  /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n  // The following characters are also allowed, but the regexes aren't supported yet.\n  // /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\n  // /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\n  // /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\n  // /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\n);\n\n// Valid characters for identifiers.\nconst identifierCharacter = either(\n  identifierHead,\n  /\\d/,\n  /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/\n);\n\n// Valid identifier.\nconst identifier = concat(identifierHead, identifierCharacter, '*');\n\n// Valid type identifier.\nconst typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');\n\n// Built-in attributes, which are highlighted as keywords.\n// @available is handled separately.\n// https://docs.swift.org/swift-book/documentation/the-swift-programming-language/attributes\nconst keywordAttributes = [\n  'attached',\n  'autoclosure',\n  concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/),\n  'discardableResult',\n  'dynamicCallable',\n  'dynamicMemberLookup',\n  'escaping',\n  'freestanding',\n  'frozen',\n  'GKInspectable',\n  'IBAction',\n  'IBDesignable',\n  'IBInspectable',\n  'IBOutlet',\n  'IBSegueAction',\n  'inlinable',\n  'main',\n  'nonobjc',\n  'NSApplicationMain',\n  'NSCopying',\n  'NSManaged',\n  concat(/objc\\(/, identifier, /\\)/),\n  'objc',\n  'objcMembers',\n  'propertyWrapper',\n  'requires_stored_property_inits',\n  'resultBuilder',\n  'Sendable',\n  'testable',\n  'UIApplicationMain',\n  'unchecked',\n  'unknown',\n  'usableFromInline',\n  'warn_unqualified_access'\n];\n\n// Contextual keywords used in @available and #(un)available.\nconst availabilityKeywords = [\n  'iOS',\n  'iOSApplicationExtension',\n  'macOS',\n  'macOSApplicationExtension',\n  'macCatalyst',\n  'macCatalystApplicationExtension',\n  'watchOS',\n  'watchOSApplicationExtension',\n  'tvOS',\n  'tvOSApplicationExtension',\n  'swift'\n];\n\n/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\nWebsite: https://swift.org\nCategory: common, system\n*/\n\n\n/** @type LanguageFn */\nfunction swift(hljs) {\n  const WHITESPACE = {\n    match: /\\s+/,\n    relevance: 0\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n  const BLOCK_COMMENT = hljs.COMMENT(\n    '/\\\\*',\n    '\\\\*/',\n    { contains: [ 'self' ] }\n  );\n  const COMMENTS = [\n    hljs.C_LINE_COMMENT_MODE,\n    BLOCK_COMMENT\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n  const DOT_KEYWORD = {\n    match: [\n      /\\./,\n      either(...dotKeywords, ...optionalDotKeywords)\n    ],\n    className: { 2: \"keyword\" }\n  };\n  const KEYWORD_GUARD = {\n    // Consume .keyword to prevent highlighting properties and methods as keywords.\n    match: concat(/\\./, either(...keywords)),\n    relevance: 0\n  };\n  const PLAIN_KEYWORDS = keywords\n    .filter(kw => typeof kw === 'string')\n    .concat([ \"_|0\" ]); // seems common, so 0 relevance\n  const REGEX_KEYWORDS = keywords\n    .filter(kw => typeof kw !== 'string') // find regex\n    .concat(keywordTypes)\n    .map(keywordWrapper);\n  const KEYWORD = { variants: [\n    {\n      className: 'keyword',\n      match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)\n    }\n  ] };\n  // find all the regular keywords\n  const KEYWORDS = {\n    $pattern: either(\n      /\\b\\w+/, // regular keywords\n      /#\\w+/ // number keywords\n    ),\n    keyword: PLAIN_KEYWORDS\n      .concat(numberSignKeywords),\n    literal: literals\n  };\n  const KEYWORD_MODES = [\n    DOT_KEYWORD,\n    KEYWORD_GUARD,\n    KEYWORD\n  ];\n\n  // https://github.com/apple/swift/tree/main/stdlib/public/core\n  const BUILT_IN_GUARD = {\n    // Consume .built_in to prevent highlighting properties and methods.\n    match: concat(/\\./, either(...builtIns)),\n    relevance: 0\n  };\n  const BUILT_IN = {\n    className: 'built_in',\n    match: concat(/\\b/, either(...builtIns), /(?=\\()/)\n  };\n  const BUILT_INS = [\n    BUILT_IN_GUARD,\n    BUILT_IN\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n  const OPERATOR_GUARD = {\n    // Prevent -> from being highlighting as an operator.\n    match: /->/,\n    relevance: 0\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    variants: [\n      { match: operator },\n      {\n        // dot-operator: only operators that start with a dot are allowed to use dots as\n        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n        // characters that may also include dots.\n        match: `\\\\.(\\\\.|${operatorCharacter})+` }\n    ]\n  };\n  const OPERATORS = [\n    OPERATOR_GUARD,\n    OPERATOR\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\n  const decimalDigits = '([0-9]_*)+';\n  const hexDigits = '([0-9a-fA-F]_*)+';\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // decimal floating-point-literal (subsumes decimal-literal)\n      { match: `\\\\b(${decimalDigits})(\\\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\\\b` },\n      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n      { match: `\\\\b0x(${hexDigits})(\\\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\\\b` },\n      // octal-literal\n      { match: /\\b0o([0-7]_*)+\\b/ },\n      // binary-literal\n      { match: /\\b0b([01]_*)+\\b/ }\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n  const ESCAPED_CHARACTER = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    variants: [\n      { match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/) },\n      { match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/) }\n    ]\n  });\n  const ESCAPED_NEWLINE = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n  });\n  const INTERPOLATION = (rawDelimiter = \"\") => ({\n    className: 'subst',\n    label: \"interpol\",\n    begin: concat(/\\\\/, rawDelimiter, /\\(/),\n    end: /\\)/\n  });\n  const MULTILINE_STRING = (rawDelimiter = \"\") => ({\n    begin: concat(rawDelimiter, /\"\"\"/),\n    end: concat(/\"\"\"/, rawDelimiter),\n    contains: [\n      ESCAPED_CHARACTER(rawDelimiter),\n      ESCAPED_NEWLINE(rawDelimiter),\n      INTERPOLATION(rawDelimiter)\n    ]\n  });\n  const SINGLE_LINE_STRING = (rawDelimiter = \"\") => ({\n    begin: concat(rawDelimiter, /\"/),\n    end: concat(/\"/, rawDelimiter),\n    contains: [\n      ESCAPED_CHARACTER(rawDelimiter),\n      INTERPOLATION(rawDelimiter)\n    ]\n  });\n  const STRING = {\n    className: 'string',\n    variants: [\n      MULTILINE_STRING(),\n      MULTILINE_STRING(\"#\"),\n      MULTILINE_STRING(\"##\"),\n      MULTILINE_STRING(\"###\"),\n      SINGLE_LINE_STRING(),\n      SINGLE_LINE_STRING(\"#\"),\n      SINGLE_LINE_STRING(\"##\"),\n      SINGLE_LINE_STRING(\"###\")\n    ]\n  };\n\n  const REGEXP_CONTENTS = [\n    hljs.BACKSLASH_ESCAPE,\n    {\n      begin: /\\[/,\n      end: /\\]/,\n      relevance: 0,\n      contains: [ hljs.BACKSLASH_ESCAPE ]\n    }\n  ];\n\n  const BARE_REGEXP_LITERAL = {\n    begin: /\\/[^\\s](?=[^/\\n]*\\/)/,\n    end: /\\//,\n    contains: REGEXP_CONTENTS\n  };\n\n  const EXTENDED_REGEXP_LITERAL = (rawDelimiter) => {\n    const begin = concat(rawDelimiter, /\\//);\n    const end = concat(/\\//, rawDelimiter);\n    return {\n      begin,\n      end,\n      contains: [\n        ...REGEXP_CONTENTS,\n        {\n          scope: \"comment\",\n          begin: `#(?!.*${end})`,\n          end: /$/,\n        },\n      ],\n    };\n  };\n\n  // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/lexicalstructure/#Regular-Expression-Literals\n  const REGEXP = {\n    scope: \"regexp\",\n    variants: [\n      EXTENDED_REGEXP_LITERAL('###'),\n      EXTENDED_REGEXP_LITERAL('##'),\n      EXTENDED_REGEXP_LITERAL('#'),\n      BARE_REGEXP_LITERAL\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n  const QUOTED_IDENTIFIER = { match: concat(/`/, identifier, /`/) };\n  const IMPLICIT_PARAMETER = {\n    className: 'variable',\n    match: /\\$\\d+/\n  };\n  const PROPERTY_WRAPPER_PROJECTION = {\n    className: 'variable',\n    match: `\\\\$${identifierCharacter}+`\n  };\n  const IDENTIFIERS = [\n    QUOTED_IDENTIFIER,\n    IMPLICIT_PARAMETER,\n    PROPERTY_WRAPPER_PROJECTION\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n  const AVAILABLE_ATTRIBUTE = {\n    match: /(@|#(un)?)available/,\n    scope: 'keyword',\n    starts: { contains: [\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: availabilityKeywords,\n        contains: [\n          ...OPERATORS,\n          NUMBER,\n          STRING\n        ]\n      }\n    ] }\n  };\n\n  const KEYWORD_ATTRIBUTE = {\n    scope: 'keyword',\n    match: concat(/@/, either(...keywordAttributes), lookahead(either(/\\(/, /\\s+/))),\n  };\n\n  const USER_DEFINED_ATTRIBUTE = {\n    scope: 'meta',\n    match: concat(/@/, identifier)\n  };\n\n  const ATTRIBUTES = [\n    AVAILABLE_ATTRIBUTE,\n    KEYWORD_ATTRIBUTE,\n    USER_DEFINED_ATTRIBUTE\n  ];\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n  const TYPE = {\n    match: lookahead(/\\b[A-Z]/),\n    relevance: 0,\n    contains: [\n      { // Common Apple frameworks, for relevance boost\n        className: 'type',\n        match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\n      },\n      { // Type identifier\n        className: 'type',\n        match: typeIdentifier,\n        relevance: 0\n      },\n      { // Optional type\n        match: /[?!]+/,\n        relevance: 0\n      },\n      { // Variadic parameter\n        match: /\\.\\.\\./,\n        relevance: 0\n      },\n      { // Protocol composition\n        match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n        relevance: 0\n      }\n    ]\n  };\n  const GENERIC_ARGUMENTS = {\n    begin: /</,\n    end: />/,\n    keywords: KEYWORDS,\n    contains: [\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...ATTRIBUTES,\n      OPERATOR_GUARD,\n      TYPE\n    ]\n  };\n  TYPE.contains.push(GENERIC_ARGUMENTS);\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n  // Prevents element names from being highlighted as keywords.\n  const TUPLE_ELEMENT_NAME = {\n    match: concat(identifier, /\\s*:/),\n    keywords: \"_|0\",\n    relevance: 0\n  };\n  // Matches tuples as well as the parameter list of a function type.\n  const TUPLE = {\n    begin: /\\(/,\n    end: /\\)/,\n    relevance: 0,\n    keywords: KEYWORDS,\n    contains: [\n      'self',\n      TUPLE_ELEMENT_NAME,\n      ...COMMENTS,\n      REGEXP,\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS,\n      ...ATTRIBUTES,\n      TYPE\n    ]\n  };\n\n  const GENERIC_PARAMETERS = {\n    begin: /</,\n    end: />/,\n    keywords: 'repeat each',\n    contains: [\n      ...COMMENTS,\n      TYPE\n    ]\n  };\n  const FUNCTION_PARAMETER_NAME = {\n    begin: either(\n      lookahead(concat(identifier, /\\s*:/)),\n      lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))\n    ),\n    end: /:/,\n    relevance: 0,\n    contains: [\n      {\n        className: 'keyword',\n        match: /\\b_\\b/\n      },\n      {\n        className: 'params',\n        match: identifier\n      }\n    ]\n  };\n  const FUNCTION_PARAMETERS = {\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [\n      FUNCTION_PARAMETER_NAME,\n      ...COMMENTS,\n      ...KEYWORD_MODES,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...ATTRIBUTES,\n      TYPE,\n      TUPLE\n    ],\n    endsParent: true,\n    illegal: /[\"']/\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n  // https://docs.swift.org/swift-book/documentation/the-swift-programming-language/declarations/#Macro-Declaration\n  const FUNCTION_OR_MACRO = {\n    match: [\n      /(func|macro)/,\n      /\\s+/,\n      either(QUOTED_IDENTIFIER.match, identifier, operator)\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title.function\"\n    },\n    contains: [\n      GENERIC_PARAMETERS,\n      FUNCTION_PARAMETERS,\n      WHITESPACE\n    ],\n    illegal: [\n      /\\[/,\n      /%/\n    ]\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n  const INIT_SUBSCRIPT = {\n    match: [\n      /\\b(?:subscript|init[?!]?)/,\n      /\\s*(?=[<(])/,\n    ],\n    className: { 1: \"keyword\" },\n    contains: [\n      GENERIC_PARAMETERS,\n      FUNCTION_PARAMETERS,\n      WHITESPACE\n    ],\n    illegal: /\\[|%/\n  };\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n  const OPERATOR_DECLARATION = {\n    match: [\n      /operator/,\n      /\\s+/,\n      operator\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title\"\n    }\n  };\n\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n  const PRECEDENCEGROUP = {\n    begin: [\n      /precedencegroup/,\n      /\\s+/,\n      typeIdentifier\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title\"\n    },\n    contains: [ TYPE ],\n    keywords: [\n      ...precedencegroupKeywords,\n      ...literals\n    ],\n    end: /}/\n  };\n\n  const TYPE_DECLARATION = {\n    begin: [\n      /(struct|protocol|class|extension|enum|actor)/,\n      /\\s+/,\n      identifier,\n      /\\s*/,\n    ],\n    beginScope: {\n      1: \"keyword\",\n      3: \"title.class\"\n    },\n    keywords: KEYWORDS,\n    contains: [\n      GENERIC_PARAMETERS,\n      ...KEYWORD_MODES,\n      {\n        begin: /:/,\n        end: /\\{/,\n        keywords: KEYWORDS,\n        contains: [\n          {\n            scope: \"title.class.inherited\",\n            match: typeIdentifier,\n          },\n          ...KEYWORD_MODES,\n        ],\n        relevance: 0,\n      },\n    ]\n  };\n\n  // Add supported submodes to string interpolation.\n  for (const variant of STRING.variants) {\n    const interpolation = variant.contains.find(mode => mode.label === \"interpol\");\n    // TODO: Interpolation can contain any expression, so there's room for improvement here.\n    interpolation.keywords = KEYWORDS;\n    const submodes = [\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS\n    ];\n    interpolation.contains = [\n      ...submodes,\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        contains: [\n          'self',\n          ...submodes\n        ]\n      }\n    ];\n  }\n\n  return {\n    name: 'Swift',\n    keywords: KEYWORDS,\n    contains: [\n      ...COMMENTS,\n      FUNCTION_OR_MACRO,\n      INIT_SUBSCRIPT,\n      TYPE_DECLARATION,\n      OPERATOR_DECLARATION,\n      PRECEDENCEGROUP,\n      {\n        beginKeywords: 'import',\n        end: /$/,\n        contains: [ ...COMMENTS ],\n        relevance: 0\n      },\n      REGEXP,\n      ...KEYWORD_MODES,\n      ...BUILT_INS,\n      ...OPERATORS,\n      NUMBER,\n      STRING,\n      ...IDENTIFIERS,\n      ...ATTRIBUTES,\n      TYPE,\n      TUPLE\n    ]\n  };\n}\n\nmodule.exports = swift;\n"],"names":["source","re","lookahead","concat","args","x","stripOptionsFromArgs","opts","either","keywordWrapper","keyword","dotKeywords","optionalDotKeywords","keywordTypes","keywords","literals","precedencegroupKeywords","numberSignKeywords","builtIns","operatorHead","operatorCharacter","operator","identifierHead","identifierCharacter","identifier","typeIdentifier","keywordAttributes","availabilityKeywords","swift","hljs","WHITESPACE","BLOCK_COMMENT","COMMENTS","DOT_KEYWORD","KEYWORD_GUARD","PLAIN_KEYWORDS","kw","REGEX_KEYWORDS","KEYWORD","KEYWORDS","KEYWORD_MODES","BUILT_IN_GUARD","BUILT_IN","BUILT_INS","OPERATOR_GUARD","OPERATOR","OPERATORS","decimalDigits","hexDigits","NUMBER","ESCAPED_CHARACTER","rawDelimiter","ESCAPED_NEWLINE","INTERPOLATION","MULTILINE_STRING","SINGLE_LINE_STRING","STRING","REGEXP_CONTENTS","BARE_REGEXP_LITERAL","EXTENDED_REGEXP_LITERAL","begin","end","REGEXP","QUOTED_IDENTIFIER","IMPLICIT_PARAMETER","PROPERTY_WRAPPER_PROJECTION","IDENTIFIERS","AVAILABLE_ATTRIBUTE","KEYWORD_ATTRIBUTE","USER_DEFINED_ATTRIBUTE","ATTRIBUTES","TYPE","GENERIC_ARGUMENTS","TUPLE_ELEMENT_NAME","TUPLE","GENERIC_PARAMETERS","FUNCTION_PARAMETER_NAME","FUNCTION_PARAMETERS","FUNCTION_OR_MACRO","INIT_SUBSCRIPT","OPERATOR_DECLARATION","PRECEDENCEGROUP","TYPE_DECLARATION","variant","interpolation","mode","submodes","swift_1"],"mappings":"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","x_google_ignoreList":[0]}