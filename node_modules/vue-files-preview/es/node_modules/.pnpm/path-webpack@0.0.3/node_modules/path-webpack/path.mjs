import { getDefaultExportFromCjs as h } from "../../../../../_virtual/_commonjsHelpers.mjs";
if (!C)
  var C = {
    cwd: function() {
      return "/";
    }
  };
function c(o) {
  if (typeof o != "string")
    throw new TypeError("Path must be a string. Received " + o);
}
function A(o, e) {
  for (var r = "", i = -1, l = 0, f, n = 0; n <= o.length; ++n) {
    if (n < o.length)
      f = o.charCodeAt(n);
    else {
      if (f === 47)
        break;
      f = 47;
    }
    if (f === 47) {
      if (!(i === n - 1 || l === 1)) if (i !== n - 1 && l === 2) {
        if (r.length < 2 || r.charCodeAt(r.length - 1) !== 46 || r.charCodeAt(r.length - 2) !== 46) {
          if (r.length > 2) {
            for (var a = r.length - 1, t = a; t >= 0 && r.charCodeAt(t) !== 47; --t)
              ;
            if (t !== a) {
              t === -1 ? r = "" : r = r.slice(0, t), i = n, l = 0;
              continue;
            }
          } else if (r.length === 2 || r.length === 1) {
            r = "", i = n, l = 0;
            continue;
          }
        }
        e && (r.length > 0 ? r += "/.." : r = "..");
      } else
        r.length > 0 ? r += "/" + o.slice(i + 1, n) : r = o.slice(i + 1, n);
      i = n, l = 0;
    } else f === 46 && l !== -1 ? ++l : l = -1;
  }
  return r;
}
function k(o, e) {
  var r = e.dir || e.root, i = e.base || (e.name || "") + (e.ext || "");
  return r ? r === e.root ? r + i : r + o + i : i;
}
var d = {
  // path.resolve([from ...], to)
  resolve: function() {
    for (var e = "", r = !1, i, l = arguments.length - 1; l >= -1 && !r; l--) {
      var f;
      l >= 0 ? f = arguments[l] : (i === void 0 && (i = C.cwd()), f = i), c(f), f.length !== 0 && (e = f + "/" + e, r = f.charCodeAt(0) === 47);
    }
    return e = A(e, !r), r ? e.length > 0 ? "/" + e : "/" : e.length > 0 ? e : ".";
  },
  normalize: function(e) {
    if (c(e), e.length === 0)
      return ".";
    var r = e.charCodeAt(0) === 47, i = e.charCodeAt(e.length - 1) === 47;
    return e = A(e, !r), e.length === 0 && !r && (e = "."), e.length > 0 && i && (e += "/"), r ? "/" + e : e;
  },
  isAbsolute: function(e) {
    return c(e), e.length > 0 && e.charCodeAt(0) === 47;
  },
  join: function() {
    if (arguments.length === 0)
      return ".";
    for (var e, r = 0; r < arguments.length; ++r) {
      var i = arguments[r];
      c(i), i.length > 0 && (e === void 0 ? e = i : e += "/" + i);
    }
    return e === void 0 ? "." : d.normalize(e);
  },
  relative: function(e, r) {
    if (c(e), c(r), e === r || (e = d.resolve(e), r = d.resolve(r), e === r))
      return "";
    for (var i = 1; i < e.length && e.charCodeAt(i) === 47; ++i)
      ;
    for (var l = e.length, f = l - i, n = 1; n < r.length && r.charCodeAt(n) === 47; ++n)
      ;
    for (var a = r.length, t = a - n, v = f < t ? f : t, u = -1, s = 0; s <= v; ++s) {
      if (s === v) {
        if (t > v) {
          if (r.charCodeAt(n + s) === 47)
            return r.slice(n + s + 1);
          if (s === 0)
            return r.slice(n + s);
        } else f > v && (e.charCodeAt(i + s) === 47 ? u = s : s === 0 && (u = 0));
        break;
      }
      var m = e.charCodeAt(i + s), b = r.charCodeAt(n + s);
      if (m !== b)
        break;
      m === 47 && (u = s);
    }
    var g = "";
    for (s = i + u + 1; s <= l; ++s)
      (s === l || e.charCodeAt(s) === 47) && (g.length === 0 ? g += ".." : g += "/..");
    return g.length > 0 ? g + r.slice(n + u) : (n += u, r.charCodeAt(n) === 47 && ++n, r.slice(n));
  },
  _makeLong: function(e) {
    return e;
  },
  dirname: function(e) {
    if (c(e), e.length === 0)
      return ".";
    for (var r = e.charCodeAt(0), i = r === 47, l = -1, f = !0, n = e.length - 1; n >= 1; --n)
      if (r = e.charCodeAt(n), r === 47) {
        if (!f) {
          l = n;
          break;
        }
      } else
        f = !1;
    return l === -1 ? i ? "/" : "." : i && l === 1 ? "//" : e.slice(0, l);
  },
  basename: function(e, r) {
    if (r !== void 0 && typeof r != "string")
      throw new TypeError('"ext" argument must be a string');
    c(e);
    var i = 0, l = -1, f = !0, n;
    if (r !== void 0 && r.length > 0 && r.length <= e.length) {
      if (r.length === e.length && r === e)
        return "";
      var a = r.length - 1, t = -1;
      for (n = e.length - 1; n >= 0; --n) {
        var v = e.charCodeAt(n);
        if (v === 47) {
          if (!f) {
            i = n + 1;
            break;
          }
        } else
          t === -1 && (f = !1, t = n + 1), a >= 0 && (v === r.charCodeAt(a) ? --a === -1 && (l = n) : (a = -1, l = t));
      }
      return i === l ? l = t : l === -1 && (l = e.length), e.slice(i, l);
    } else {
      for (n = e.length - 1; n >= 0; --n)
        if (e.charCodeAt(n) === 47) {
          if (!f) {
            i = n + 1;
            break;
          }
        } else l === -1 && (f = !1, l = n + 1);
      return l === -1 ? "" : e.slice(i, l);
    }
  },
  extname: function(e) {
    c(e);
    for (var r = -1, i = 0, l = -1, f = !0, n = 0, a = e.length - 1; a >= 0; --a) {
      var t = e.charCodeAt(a);
      if (t === 47) {
        if (!f) {
          i = a + 1;
          break;
        }
        continue;
      }
      l === -1 && (f = !1, l = a + 1), t === 46 ? r === -1 ? r = a : n !== 1 && (n = 1) : r !== -1 && (n = -1);
    }
    return r === -1 || l === -1 || // We saw a non-dot character immediately before the dot
    n === 0 || // The (right-most) trimmed path component is exactly '..'
    n === 1 && r === l - 1 && r === i + 1 ? "" : e.slice(r, l);
  },
  format: function(e) {
    if (e === null || typeof e != "object")
      throw new TypeError(
        'Parameter "pathObject" must be an object, not ' + typeof e
      );
    return k("/", e);
  },
  parse: function(e) {
    c(e);
    var r = { root: "", dir: "", base: "", ext: "", name: "" };
    if (e.length === 0)
      return r;
    var i = e.charCodeAt(0), l = i === 47, f;
    l ? (r.root = "/", f = 1) : f = 0;
    for (var n = -1, a = 0, t = -1, v = !0, u = e.length - 1, s = 0; u >= f; --u) {
      if (i = e.charCodeAt(u), i === 47) {
        if (!v) {
          a = u + 1;
          break;
        }
        continue;
      }
      t === -1 && (v = !1, t = u + 1), i === 46 ? n === -1 ? n = u : s !== 1 && (s = 1) : n !== -1 && (s = -1);
    }
    return n === -1 || t === -1 || // We saw a non-dot character immediately before the dot
    s === 0 || // The (right-most) trimmed path component is exactly '..'
    s === 1 && n === t - 1 && n === a + 1 ? t !== -1 && (a === 0 && l ? r.base = r.name = e.slice(1, t) : r.base = r.name = e.slice(a, t)) : (a === 0 && l ? (r.name = e.slice(1, n), r.base = e.slice(1, t)) : (r.name = e.slice(a, n), r.base = e.slice(a, t)), r.ext = e.slice(n, t)), a > 0 ? r.dir = e.slice(0, a - 1) : l && (r.dir = "/"), r;
  },
  sep: "/",
  delimiter: ":",
  posix: null
}, w = d;
const y = /* @__PURE__ */ h(w);
export {
  y as default
};
//# sourceMappingURL=path.mjs.map
