function C(n, i, f) {
  const c = n.md.block.ruler.getRules("paragraph");
  if (n.sCount[i] - n.blkIndent >= 4)
    return !1;
  const d = n.parentType;
  n.parentType = "paragraph";
  let l = 0, o, r = i + 1;
  for (; r < f && !n.isEmpty(r); r++) {
    if (n.sCount[r] - n.blkIndent > 3)
      continue;
    if (n.sCount[r] >= n.blkIndent) {
      let e = n.bMarks[r] + n.tShift[r];
      const p = n.eMarks[r];
      if (e < p && (o = n.src.charCodeAt(e), (o === 45 || o === 61) && (e = n.skipChars(e, o), e = n.skipSpaces(e), e >= p))) {
        l = o === 61 ? 1 : 2;
        break;
      }
    }
    if (n.sCount[r] < 0)
      continue;
    let h = !1;
    for (let e = 0, p = c.length; e < p; e++)
      if (c[e](n, r, f, !0)) {
        h = !0;
        break;
      }
    if (h)
      break;
  }
  if (!l)
    return !1;
  const m = n.getLines(i, r, n.blkIndent, !1).trim();
  n.line = r + 1;
  const k = n.push("heading_open", "h" + String(l), 1);
  k.markup = String.fromCharCode(o), k.map = [i, n.line];
  const u = n.push("inline", "", 0);
  u.content = m, u.map = [i, n.line - 1], u.children = [];
  const g = n.push("heading_close", "h" + String(l), -1);
  return g.markup = String.fromCharCode(o), n.parentType = d, !0;
}
export {
  C as default
};
//# sourceMappingURL=lheading.mjs.map
