{"version":3,"file":"ruler.mjs","sources":["../../../../../../../../node_modules/.pnpm/markdown-it@14.1.0/node_modules/markdown-it/lib/ruler.mjs"],"sourcesContent":["/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n\n/**\n * new Ruler()\n **/\nfunction Ruler () {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = []\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null\n}\n\n// Helper methods, should not be used directly\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (let i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i\n    }\n  }\n  return -1\n}\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  const self = this\n  const chains = ['']\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName)\n      }\n    })\n  })\n\n  self.__cache__ = {}\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = []\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return }\n\n      self.__cache__[chain].push(rule.fn)\n    })\n  })\n}\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  const index = this.__find__(name)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name) }\n\n  this.__rules__[index].fn = fn\n  this.__rules__[index].alt = opt.alt || []\n  this.__cache__ = null\n}\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  const index = this.__find__(beforeName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName) }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  const index = this.__find__(afterName)\n  const opt = options || {}\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName) }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  const opt = options || {}\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn,\n    alt: opt.alt || []\n  })\n\n  this.__cache__ = null\n}\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = true\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false })\n\n  this.enable(list, ignoreInvalid)\n}\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [list] }\n\n  const result = []\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    const idx = this.__find__(name)\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return }\n      throw new Error('Rules manager: invalid rule name ' + name)\n    }\n    this.__rules__[idx].enabled = false\n    result.push(name)\n  }, this)\n\n  this.__cache__ = null\n  return result\n}\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__()\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || []\n}\n\nexport default Ruler\n"],"names":["Ruler","name","i","self","chains","rule","altName","chain","fn","options","index","opt","beforeName","ruleName","afterName","list","ignoreInvalid","result","idx","chainName"],"mappings":"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","x_google_ignoreList":[0]}