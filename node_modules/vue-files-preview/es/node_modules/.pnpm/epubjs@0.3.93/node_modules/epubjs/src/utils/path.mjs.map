{"version":3,"file":"path.mjs","sources":["../../../../../../../../../node_modules/.pnpm/epubjs@0.3.93/node_modules/epubjs/src/utils/path.js"],"sourcesContent":["import path from \"path-webpack\";\n\n/**\n * Creates a Path object for parsing and manipulation of a path strings\n *\n * Uses a polyfill for Nodejs path: https://nodejs.org/api/path.html\n * @param\t{string} pathString\ta url string (relative or absolute)\n * @class\n */\nclass Path {\n\tconstructor(pathString) {\n\t\tvar protocol;\n\t\tvar parsed;\n\n\t\tprotocol = pathString.indexOf(\"://\");\n\t\tif (protocol > -1) {\n\t\t\tpathString = new URL(pathString).pathname;\n\t\t}\n\n\t\tparsed = this.parse(pathString);\n\n\t\tthis.path = pathString;\n\n\t\tif (this.isDirectory(pathString)) {\n\t\t\tthis.directory = pathString;\n\t\t} else {\n\t\t\tthis.directory = parsed.dir + \"/\";\n\t\t}\n\n\t\tthis.filename = parsed.base;\n\t\tthis.extension = parsed.ext.slice(1);\n\n\t}\n\n\t/**\n\t * Parse the path: https://nodejs.org/api/path.html#path_path_parse_path\n\t * @param\t{string} what\n\t * @returns {object}\n\t */\n\tparse (what) {\n\t\treturn path.parse(what);\n\t}\n\n\t/**\n\t * @param\t{string} what\n\t * @returns {boolean}\n\t */\n\tisAbsolute (what) {\n\t\treturn path.isAbsolute(what || this.path);\n\t}\n\n\t/**\n\t * Check if path ends with a directory\n\t * @param\t{string} what\n\t * @returns {boolean}\n\t */\n\tisDirectory (what) {\n\t\treturn (what.charAt(what.length-1) === \"/\");\n\t}\n\n\t/**\n\t * Resolve a path against the directory of the Path\n\t *\n\t * https://nodejs.org/api/path.html#path_path_resolve_paths\n\t * @param\t{string} what\n\t * @returns {string} resolved\n\t */\n\tresolve (what) {\n\t\treturn path.resolve(this.directory, what);\n\t}\n\n\t/**\n\t * Resolve a path relative to the directory of the Path\n\t *\n\t * https://nodejs.org/api/path.html#path_path_relative_from_to\n\t * @param\t{string} what\n\t * @returns {string} relative\n\t */\n\trelative (what) {\n\t\tvar isAbsolute = what && (what.indexOf(\"://\") > -1);\n\n\t\tif (isAbsolute) {\n\t\t\treturn what;\n\t\t}\n\n\t\treturn path.relative(this.directory, what);\n\t}\n\n\tsplitPath(filename) {\n\t\treturn this.splitPathRe.exec(filename).slice(1);\n\t}\n\n\t/**\n\t * Return the path string\n\t * @returns {string} path\n\t */\n\ttoString () {\n\t\treturn this.path;\n\t}\n}\n\nexport default Path;\n"],"names":["Path","pathString","protocol","parsed","what","path","isAbsolute","filename"],"mappings":";AASA,MAAMA,EAAK;AAAA,EACV,YAAYC,GAAY;AACvB,QAAIC,GACAC;AAEJ,IAAAD,IAAWD,EAAW,QAAQ,KAAK,GAC/BC,IAAW,OACdD,IAAa,IAAI,IAAIA,CAAU,EAAE,WAGlCE,IAAS,KAAK,MAAMF,CAAU,GAE9B,KAAK,OAAOA,GAER,KAAK,YAAYA,CAAU,IAC9B,KAAK,YAAYA,IAEjB,KAAK,YAAYE,EAAO,MAAM,KAG/B,KAAK,WAAWA,EAAO,MACvB,KAAK,YAAYA,EAAO,IAAI,MAAM,CAAC;AAAA,EAEnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,MAAOC,GAAM;AACZ,WAAOC,EAAK,MAAMD,CAAI;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,WAAYA,GAAM;AACjB,WAAOC,EAAK,WAAWD,KAAQ,KAAK,IAAI;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD,YAAaA,GAAM;AAClB,WAAQA,EAAK,OAAOA,EAAK,SAAO,CAAC,MAAM;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,QAASA,GAAM;AACd,WAAOC,EAAK,QAAQ,KAAK,WAAWD,CAAI;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,SAAUA,GAAM;AACf,QAAIE,IAAaF,KAASA,EAAK,QAAQ,KAAK,IAAI;AAEhD,WAAIE,IACIF,IAGDC,EAAK,SAAS,KAAK,WAAWD,CAAI;AAAA,EACzC;AAAA,EAED,UAAUG,GAAU;AACnB,WAAO,KAAK,YAAY,KAAKA,CAAQ,EAAE,MAAM,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,WAAY;AACX,WAAO,KAAK;AAAA,EACZ;AACF;","x_google_ignoreList":[0]}