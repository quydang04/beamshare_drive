{"version":3,"file":"index.mjs","sources":["../../../../../../../../../node_modules/.pnpm/@codemirror+lint@6.8.1/node_modules/@codemirror/lint/dist/index.js"],"sourcesContent":["import { Decoration, showPanel, EditorView, ViewPlugin, logException, gutter, showTooltip, hoverTooltip, getPanel, WidgetType, GutterMarker } from '@codemirror/view';\nimport { StateEffect, StateField, Facet, combineConfig, RangeSet } from '@codemirror/state';\nimport elt from 'crelt';\n\nclass SelectedDiagnostic {\n    constructor(from, to, diagnostic) {\n        this.from = from;\n        this.to = to;\n        this.diagnostic = diagnostic;\n    }\n}\nclass LintState {\n    constructor(diagnostics, panel, selected) {\n        this.diagnostics = diagnostics;\n        this.panel = panel;\n        this.selected = selected;\n    }\n    static init(diagnostics, panel, state) {\n        // Filter the list of diagnostics for which to create markers\n        let markedDiagnostics = diagnostics;\n        let diagnosticFilter = state.facet(lintConfig).markerFilter;\n        if (diagnosticFilter)\n            markedDiagnostics = diagnosticFilter(markedDiagnostics, state);\n        let ranges = Decoration.set(markedDiagnostics.map((d) => {\n            // For zero-length ranges or ranges covering only a line break, create a widget\n            return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)\n                ? Decoration.widget({\n                    widget: new DiagnosticWidget(d),\n                    diagnostic: d\n                }).range(d.from)\n                : Decoration.mark({\n                    attributes: { class: \"cm-lintRange cm-lintRange-\" + d.severity + (d.markClass ? \" \" + d.markClass : \"\") },\n                    diagnostic: d\n                }).range(d.from, d.to);\n        }), true);\n        return new LintState(ranges, panel, findDiagnostic(ranges));\n    }\n}\nfunction findDiagnostic(diagnostics, diagnostic = null, after = 0) {\n    let found = null;\n    diagnostics.between(after, 1e9, (from, to, { spec }) => {\n        if (diagnostic && spec.diagnostic != diagnostic)\n            return;\n        found = new SelectedDiagnostic(from, to, spec.diagnostic);\n        return false;\n    });\n    return found;\n}\nfunction hideTooltip(tr, tooltip) {\n    let from = tooltip.pos, to = tooltip.end || from;\n    let result = tr.state.facet(lintConfig).hideOn(tr, from, to);\n    if (result != null)\n        return result;\n    let line = tr.startState.doc.lineAt(tooltip.pos);\n    return !!(tr.effects.some(e => e.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line.from, Math.max(line.to, to)));\n}\nfunction maybeEnableLint(state, effects) {\n    return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));\n}\n/**\nReturns a transaction spec which updates the current set of\ndiagnostics, and enables the lint extension if if wasn't already\nactive.\n*/\nfunction setDiagnostics(state, diagnostics) {\n    return {\n        effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])\n    };\n}\n/**\nThe state effect that updates the set of active diagnostics. Can\nbe useful when writing an extension that needs to track these.\n*/\nconst setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();\nconst togglePanel = /*@__PURE__*/StateEffect.define();\nconst movePanelSelection = /*@__PURE__*/StateEffect.define();\nconst lintState = /*@__PURE__*/StateField.define({\n    create() {\n        return new LintState(Decoration.none, null, null);\n    },\n    update(value, tr) {\n        if (tr.docChanged && value.diagnostics.size) {\n            let mapped = value.diagnostics.map(tr.changes), selected = null, panel = value.panel;\n            if (value.selected) {\n                let selPos = tr.changes.mapPos(value.selected.from, 1);\n                selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);\n            }\n            if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel)\n                panel = null;\n            value = new LintState(mapped, panel, selected);\n        }\n        for (let effect of tr.effects) {\n            if (effect.is(setDiagnosticsEffect)) {\n                let panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect.value.length ? LintPanel.open : null;\n                value = LintState.init(effect.value, panel, tr.state);\n            }\n            else if (effect.is(togglePanel)) {\n                value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);\n            }\n            else if (effect.is(movePanelSelection)) {\n                value = new LintState(value.diagnostics, value.panel, effect.value);\n            }\n        }\n        return value;\n    },\n    provide: f => [showPanel.from(f, val => val.panel),\n        EditorView.decorations.from(f, s => s.diagnostics)]\n});\n/**\nReturns the number of active lint diagnostics in the given state.\n*/\nfunction diagnosticCount(state) {\n    let lint = state.field(lintState, false);\n    return lint ? lint.diagnostics.size : 0;\n}\nconst activeMark = /*@__PURE__*/Decoration.mark({ class: \"cm-lintRange cm-lintRange-active\" });\nfunction lintTooltip(view, pos, side) {\n    let { diagnostics } = view.state.field(lintState);\n    let found = [], stackStart = 2e8, stackEnd = 0;\n    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {\n        if (pos >= from && pos <= to &&\n            (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {\n            found.push(spec.diagnostic);\n            stackStart = Math.min(from, stackStart);\n            stackEnd = Math.max(to, stackEnd);\n        }\n    });\n    let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;\n    if (diagnosticFilter)\n        found = diagnosticFilter(found, view.state);\n    if (!found.length)\n        return null;\n    return {\n        pos: stackStart,\n        end: stackEnd,\n        above: view.state.doc.lineAt(stackStart).to < stackEnd,\n        create() {\n            return { dom: diagnosticsTooltip(view, found) };\n        }\n    };\n}\nfunction diagnosticsTooltip(view, diagnostics) {\n    return elt(\"ul\", { class: \"cm-tooltip-lint\" }, diagnostics.map(d => renderDiagnostic(view, d, false)));\n}\n/**\nCommand to open and focus the lint panel.\n*/\nconst openLintPanel = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field || !field.panel)\n        view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)]) });\n    let panel = getPanel(view, LintPanel.open);\n    if (panel)\n        panel.dom.querySelector(\".cm-panel-lint ul\").focus();\n    return true;\n};\n/**\nCommand to close the lint panel, when open.\n*/\nconst closeLintPanel = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field || !field.panel)\n        return false;\n    view.dispatch({ effects: togglePanel.of(false) });\n    return true;\n};\n/**\nMove the selection to the next diagnostic.\n*/\nconst nextDiagnostic = (view) => {\n    let field = view.state.field(lintState, false);\n    if (!field)\n        return false;\n    let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);\n    if (!next.value) {\n        next = field.diagnostics.iter(0);\n        if (!next.value || next.from == sel.from && next.to == sel.to)\n            return false;\n    }\n    view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });\n    return true;\n};\n/**\nMove the selection to the previous diagnostic.\n*/\nconst previousDiagnostic = (view) => {\n    let { state } = view, field = state.field(lintState, false);\n    if (!field)\n        return false;\n    let sel = state.selection.main;\n    let prevFrom, prevTo, lastFrom, lastTo;\n    field.diagnostics.between(0, state.doc.length, (from, to) => {\n        if (to < sel.to && (prevFrom == null || prevFrom < from)) {\n            prevFrom = from;\n            prevTo = to;\n        }\n        if (lastFrom == null || from > lastFrom) {\n            lastFrom = from;\n            lastTo = to;\n        }\n    });\n    if (lastFrom == null || prevFrom == null && lastFrom == sel.from)\n        return false;\n    view.dispatch({ selection: { anchor: prevFrom !== null && prevFrom !== void 0 ? prevFrom : lastFrom, head: prevTo !== null && prevTo !== void 0 ? prevTo : lastTo }, scrollIntoView: true });\n    return true;\n};\n/**\nA set of default key bindings for the lint functionality.\n\n- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)\n- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)\n*/\nconst lintKeymap = [\n    { key: \"Mod-Shift-m\", run: openLintPanel, preventDefault: true },\n    { key: \"F8\", run: nextDiagnostic }\n];\nconst lintPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.view = view;\n        this.timeout = -1;\n        this.set = true;\n        let { delay } = view.state.facet(lintConfig);\n        this.lintTime = Date.now() + delay;\n        this.run = this.run.bind(this);\n        this.timeout = setTimeout(this.run, delay);\n    }\n    run() {\n        clearTimeout(this.timeout);\n        let now = Date.now();\n        if (now < this.lintTime - 10) {\n            this.timeout = setTimeout(this.run, this.lintTime - now);\n        }\n        else {\n            this.set = false;\n            let { state } = this.view, { sources } = state.facet(lintConfig);\n            if (sources.length)\n                Promise.all(sources.map(source => Promise.resolve(source(this.view)))).then(annotations => {\n                    let all = annotations.reduce((a, b) => a.concat(b));\n                    if (this.view.state.doc == state.doc)\n                        this.view.dispatch(setDiagnostics(this.view.state, all));\n                }, error => { logException(this.view.state, error); });\n        }\n    }\n    update(update) {\n        let config = update.state.facet(lintConfig);\n        if (update.docChanged || config != update.startState.facet(lintConfig) ||\n            config.needsRefresh && config.needsRefresh(update)) {\n            this.lintTime = Date.now() + config.delay;\n            if (!this.set) {\n                this.set = true;\n                this.timeout = setTimeout(this.run, config.delay);\n            }\n        }\n    }\n    force() {\n        if (this.set) {\n            this.lintTime = Date.now();\n            this.run();\n        }\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n});\nconst lintConfig = /*@__PURE__*/Facet.define({\n    combine(input) {\n        return Object.assign({ sources: input.map(i => i.source).filter(x => x != null) }, combineConfig(input.map(i => i.config), {\n            delay: 750,\n            markerFilter: null,\n            tooltipFilter: null,\n            needsRefresh: null,\n            hideOn: () => null,\n        }, {\n            needsRefresh: (a, b) => !a ? b : !b ? a : u => a(u) || b(u)\n        }));\n    }\n});\n/**\nGiven a diagnostic source, this function returns an extension that\nenables linting with that source. It will be called whenever the\neditor is idle (after its content changed). If `null` is given as\nsource, this only configures the lint extension.\n*/\nfunction linter(source, config = {}) {\n    return [\n        lintConfig.of({ source, config }),\n        lintPlugin,\n        lintExtensions\n    ];\n}\n/**\nForces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the\neditor is idle to run right away.\n*/\nfunction forceLinting(view) {\n    let plugin = view.plugin(lintPlugin);\n    if (plugin)\n        plugin.force();\n}\nfunction assignKeys(actions) {\n    let assigned = [];\n    if (actions)\n        actions: for (let { name } of actions) {\n            for (let i = 0; i < name.length; i++) {\n                let ch = name[i];\n                if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {\n                    assigned.push(ch);\n                    continue actions;\n                }\n            }\n            assigned.push(\"\");\n        }\n    return assigned;\n}\nfunction renderDiagnostic(view, diagnostic, inPanel) {\n    var _a;\n    let keys = inPanel ? assignKeys(diagnostic.actions) : [];\n    return elt(\"li\", { class: \"cm-diagnostic cm-diagnostic-\" + diagnostic.severity }, elt(\"span\", { class: \"cm-diagnosticText\" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {\n        let fired = false, click = (e) => {\n            e.preventDefault();\n            if (fired)\n                return;\n            fired = true;\n            let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);\n            if (found)\n                action.apply(view, found.from, found.to);\n        };\n        let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;\n        let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),\n            elt(\"u\", name.slice(keyIndex, keyIndex + 1)),\n            name.slice(keyIndex + 1)];\n        return elt(\"button\", {\n            type: \"button\",\n            class: \"cm-diagnosticAction\",\n            onclick: click,\n            onmousedown: click,\n            \"aria-label\": ` Action: ${name}${keyIndex < 0 ? \"\" : ` (access key \"${keys[i]})\"`}.`\n        }, nameElt);\n    }), diagnostic.source && elt(\"div\", { class: \"cm-diagnosticSource\" }, diagnostic.source));\n}\nclass DiagnosticWidget extends WidgetType {\n    constructor(diagnostic) {\n        super();\n        this.diagnostic = diagnostic;\n    }\n    eq(other) { return other.diagnostic == this.diagnostic; }\n    toDOM() {\n        return elt(\"span\", { class: \"cm-lintPoint cm-lintPoint-\" + this.diagnostic.severity });\n    }\n}\nclass PanelItem {\n    constructor(view, diagnostic) {\n        this.diagnostic = diagnostic;\n        this.id = \"item_\" + Math.floor(Math.random() * 0xffffffff).toString(16);\n        this.dom = renderDiagnostic(view, diagnostic, true);\n        this.dom.id = this.id;\n        this.dom.setAttribute(\"role\", \"option\");\n    }\n}\nclass LintPanel {\n    constructor(view) {\n        this.view = view;\n        this.items = [];\n        let onkeydown = (event) => {\n            if (event.keyCode == 27) { // Escape\n                closeLintPanel(this.view);\n                this.view.focus();\n            }\n            else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp\n                this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);\n            }\n            else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown\n                this.moveSelection((this.selectedIndex + 1) % this.items.length);\n            }\n            else if (event.keyCode == 36) { // Home\n                this.moveSelection(0);\n            }\n            else if (event.keyCode == 35) { // End\n                this.moveSelection(this.items.length - 1);\n            }\n            else if (event.keyCode == 13) { // Enter\n                this.view.focus();\n            }\n            else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z\n                let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);\n                for (let i = 0; i < keys.length; i++)\n                    if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {\n                        let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);\n                        if (found)\n                            diagnostic.actions[i].apply(view, found.from, found.to);\n                    }\n            }\n            else {\n                return;\n            }\n            event.preventDefault();\n        };\n        let onclick = (event) => {\n            for (let i = 0; i < this.items.length; i++) {\n                if (this.items[i].dom.contains(event.target))\n                    this.moveSelection(i);\n            }\n        };\n        this.list = elt(\"ul\", {\n            tabIndex: 0,\n            role: \"listbox\",\n            \"aria-label\": this.view.state.phrase(\"Diagnostics\"),\n            onkeydown,\n            onclick\n        });\n        this.dom = elt(\"div\", { class: \"cm-panel-lint\" }, this.list, elt(\"button\", {\n            type: \"button\",\n            name: \"close\",\n            \"aria-label\": this.view.state.phrase(\"close\"),\n            onclick: () => closeLintPanel(this.view)\n        }, \"×\"));\n        this.update();\n    }\n    get selectedIndex() {\n        let selected = this.view.state.field(lintState).selected;\n        if (!selected)\n            return -1;\n        for (let i = 0; i < this.items.length; i++)\n            if (this.items[i].diagnostic == selected.diagnostic)\n                return i;\n        return -1;\n    }\n    update() {\n        let { diagnostics, selected } = this.view.state.field(lintState);\n        let i = 0, needsSync = false, newSelectedItem = null;\n        diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {\n            let found = -1, item;\n            for (let j = i; j < this.items.length; j++)\n                if (this.items[j].diagnostic == spec.diagnostic) {\n                    found = j;\n                    break;\n                }\n            if (found < 0) {\n                item = new PanelItem(this.view, spec.diagnostic);\n                this.items.splice(i, 0, item);\n                needsSync = true;\n            }\n            else {\n                item = this.items[found];\n                if (found > i) {\n                    this.items.splice(i, found - i);\n                    needsSync = true;\n                }\n            }\n            if (selected && item.diagnostic == selected.diagnostic) {\n                if (!item.dom.hasAttribute(\"aria-selected\")) {\n                    item.dom.setAttribute(\"aria-selected\", \"true\");\n                    newSelectedItem = item;\n                }\n            }\n            else if (item.dom.hasAttribute(\"aria-selected\")) {\n                item.dom.removeAttribute(\"aria-selected\");\n            }\n            i++;\n        });\n        while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {\n            needsSync = true;\n            this.items.pop();\n        }\n        if (this.items.length == 0) {\n            this.items.push(new PanelItem(this.view, {\n                from: -1, to: -1,\n                severity: \"info\",\n                message: this.view.state.phrase(\"No diagnostics\")\n            }));\n            needsSync = true;\n        }\n        if (newSelectedItem) {\n            this.list.setAttribute(\"aria-activedescendant\", newSelectedItem.id);\n            this.view.requestMeasure({\n                key: this,\n                read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),\n                write: ({ sel, panel }) => {\n                    let scaleY = panel.height / this.list.offsetHeight;\n                    if (sel.top < panel.top)\n                        this.list.scrollTop -= (panel.top - sel.top) / scaleY;\n                    else if (sel.bottom > panel.bottom)\n                        this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;\n                }\n            });\n        }\n        else if (this.selectedIndex < 0) {\n            this.list.removeAttribute(\"aria-activedescendant\");\n        }\n        if (needsSync)\n            this.sync();\n    }\n    sync() {\n        let domPos = this.list.firstChild;\n        function rm() {\n            let prev = domPos;\n            domPos = prev.nextSibling;\n            prev.remove();\n        }\n        for (let item of this.items) {\n            if (item.dom.parentNode == this.list) {\n                while (domPos != item.dom)\n                    rm();\n                domPos = item.dom.nextSibling;\n            }\n            else {\n                this.list.insertBefore(item.dom, domPos);\n            }\n        }\n        while (domPos)\n            rm();\n    }\n    moveSelection(selectedIndex) {\n        if (this.selectedIndex < 0)\n            return;\n        let field = this.view.state.field(lintState);\n        let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);\n        if (!selection)\n            return;\n        this.view.dispatch({\n            selection: { anchor: selection.from, head: selection.to },\n            scrollIntoView: true,\n            effects: movePanelSelection.of(selection)\n        });\n    }\n    static open(view) { return new LintPanel(view); }\n}\nfunction svg(content, attrs = `viewBox=\"0 0 40 40\"`) {\n    return `url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ${attrs}>${encodeURIComponent(content)}</svg>')`;\n}\nfunction underline(color) {\n    return svg(`<path d=\"m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0\" stroke=\"${color}\" fill=\"none\" stroke-width=\".7\"/>`, `width=\"6\" height=\"3\"`);\n}\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-diagnostic\": {\n        padding: \"3px 6px 3px 8px\",\n        marginLeft: \"-1px\",\n        display: \"block\",\n        whiteSpace: \"pre-wrap\"\n    },\n    \".cm-diagnostic-error\": { borderLeft: \"5px solid #d11\" },\n    \".cm-diagnostic-warning\": { borderLeft: \"5px solid orange\" },\n    \".cm-diagnostic-info\": { borderLeft: \"5px solid #999\" },\n    \".cm-diagnostic-hint\": { borderLeft: \"5px solid #66d\" },\n    \".cm-diagnosticAction\": {\n        font: \"inherit\",\n        border: \"none\",\n        padding: \"2px 4px\",\n        backgroundColor: \"#444\",\n        color: \"white\",\n        borderRadius: \"3px\",\n        marginLeft: \"8px\",\n        cursor: \"pointer\"\n    },\n    \".cm-diagnosticSource\": {\n        fontSize: \"70%\",\n        opacity: .7\n    },\n    \".cm-lintRange\": {\n        backgroundPosition: \"left bottom\",\n        backgroundRepeat: \"repeat-x\",\n        paddingBottom: \"0.7px\",\n    },\n    \".cm-lintRange-error\": { backgroundImage: /*@__PURE__*/underline(\"#d11\") },\n    \".cm-lintRange-warning\": { backgroundImage: /*@__PURE__*/underline(\"orange\") },\n    \".cm-lintRange-info\": { backgroundImage: /*@__PURE__*/underline(\"#999\") },\n    \".cm-lintRange-hint\": { backgroundImage: /*@__PURE__*/underline(\"#66d\") },\n    \".cm-lintRange-active\": { backgroundColor: \"#ffdd9980\" },\n    \".cm-tooltip-lint\": {\n        padding: 0,\n        margin: 0\n    },\n    \".cm-lintPoint\": {\n        position: \"relative\",\n        \"&:after\": {\n            content: '\"\"',\n            position: \"absolute\",\n            bottom: 0,\n            left: \"-2px\",\n            borderLeft: \"3px solid transparent\",\n            borderRight: \"3px solid transparent\",\n            borderBottom: \"4px solid #d11\"\n        }\n    },\n    \".cm-lintPoint-warning\": {\n        \"&:after\": { borderBottomColor: \"orange\" }\n    },\n    \".cm-lintPoint-info\": {\n        \"&:after\": { borderBottomColor: \"#999\" }\n    },\n    \".cm-lintPoint-hint\": {\n        \"&:after\": { borderBottomColor: \"#66d\" }\n    },\n    \".cm-panel.cm-panel-lint\": {\n        position: \"relative\",\n        \"& ul\": {\n            maxHeight: \"100px\",\n            overflowY: \"auto\",\n            \"& [aria-selected]\": {\n                backgroundColor: \"#ddd\",\n                \"& u\": { textDecoration: \"underline\" }\n            },\n            \"&:focus [aria-selected]\": {\n                background_fallback: \"#bdf\",\n                backgroundColor: \"Highlight\",\n                color_fallback: \"white\",\n                color: \"HighlightText\"\n            },\n            \"& u\": { textDecoration: \"none\" },\n            padding: 0,\n            margin: 0\n        },\n        \"& [name=close]\": {\n            position: \"absolute\",\n            top: \"0\",\n            right: \"2px\",\n            background: \"inherit\",\n            border: \"none\",\n            font: \"inherit\",\n            padding: 0,\n            margin: 0\n        }\n    }\n});\nfunction severityWeight(sev) {\n    return sev == \"error\" ? 4 : sev == \"warning\" ? 3 : sev == \"info\" ? 2 : 1;\n}\nclass LintGutterMarker extends GutterMarker {\n    constructor(diagnostics) {\n        super();\n        this.diagnostics = diagnostics;\n        this.severity = diagnostics.reduce((max, d) => severityWeight(max) < severityWeight(d.severity) ? d.severity : max, \"hint\");\n    }\n    toDOM(view) {\n        let elt = document.createElement(\"div\");\n        elt.className = \"cm-lint-marker cm-lint-marker-\" + this.severity;\n        let diagnostics = this.diagnostics;\n        let diagnosticsFilter = view.state.facet(lintGutterConfig).tooltipFilter;\n        if (diagnosticsFilter)\n            diagnostics = diagnosticsFilter(diagnostics, view.state);\n        if (diagnostics.length)\n            elt.onmouseover = () => gutterMarkerMouseOver(view, elt, diagnostics);\n        return elt;\n    }\n}\nfunction trackHoverOn(view, marker) {\n    let mousemove = (event) => {\n        let rect = marker.getBoundingClientRect();\n        if (event.clientX > rect.left - 10 /* Hover.Margin */ && event.clientX < rect.right + 10 /* Hover.Margin */ &&\n            event.clientY > rect.top - 10 /* Hover.Margin */ && event.clientY < rect.bottom + 10 /* Hover.Margin */)\n            return;\n        for (let target = event.target; target; target = target.parentNode) {\n            if (target.nodeType == 1 && target.classList.contains(\"cm-tooltip-lint\"))\n                return;\n        }\n        window.removeEventListener(\"mousemove\", mousemove);\n        if (view.state.field(lintGutterTooltip))\n            view.dispatch({ effects: setLintGutterTooltip.of(null) });\n    };\n    window.addEventListener(\"mousemove\", mousemove);\n}\nfunction gutterMarkerMouseOver(view, marker, diagnostics) {\n    function hovered() {\n        let line = view.elementAtHeight(marker.getBoundingClientRect().top + 5 - view.documentTop);\n        const linePos = view.coordsAtPos(line.from);\n        if (linePos) {\n            view.dispatch({ effects: setLintGutterTooltip.of({\n                    pos: line.from,\n                    above: false,\n                    create() {\n                        return {\n                            dom: diagnosticsTooltip(view, diagnostics),\n                            getCoords: () => marker.getBoundingClientRect()\n                        };\n                    }\n                }) });\n        }\n        marker.onmouseout = marker.onmousemove = null;\n        trackHoverOn(view, marker);\n    }\n    let { hoverTime } = view.state.facet(lintGutterConfig);\n    let hoverTimeout = setTimeout(hovered, hoverTime);\n    marker.onmouseout = () => {\n        clearTimeout(hoverTimeout);\n        marker.onmouseout = marker.onmousemove = null;\n    };\n    marker.onmousemove = () => {\n        clearTimeout(hoverTimeout);\n        hoverTimeout = setTimeout(hovered, hoverTime);\n    };\n}\nfunction markersForDiagnostics(doc, diagnostics) {\n    let byLine = Object.create(null);\n    for (let diagnostic of diagnostics) {\n        let line = doc.lineAt(diagnostic.from);\n        (byLine[line.from] || (byLine[line.from] = [])).push(diagnostic);\n    }\n    let markers = [];\n    for (let line in byLine) {\n        markers.push(new LintGutterMarker(byLine[line]).range(+line));\n    }\n    return RangeSet.of(markers, true);\n}\nconst lintGutterExtension = /*@__PURE__*/gutter({\n    class: \"cm-gutter-lint\",\n    markers: view => view.state.field(lintGutterMarkers),\n});\nconst lintGutterMarkers = /*@__PURE__*/StateField.define({\n    create() {\n        return RangeSet.empty;\n    },\n    update(markers, tr) {\n        markers = markers.map(tr.changes);\n        let diagnosticFilter = tr.state.facet(lintGutterConfig).markerFilter;\n        for (let effect of tr.effects) {\n            if (effect.is(setDiagnosticsEffect)) {\n                let diagnostics = effect.value;\n                if (diagnosticFilter)\n                    diagnostics = diagnosticFilter(diagnostics || [], tr.state);\n                markers = markersForDiagnostics(tr.state.doc, diagnostics.slice(0));\n            }\n        }\n        return markers;\n    }\n});\nconst setLintGutterTooltip = /*@__PURE__*/StateEffect.define();\nconst lintGutterTooltip = /*@__PURE__*/StateField.define({\n    create() { return null; },\n    update(tooltip, tr) {\n        if (tooltip && tr.docChanged)\n            tooltip = hideTooltip(tr, tooltip) ? null : Object.assign(Object.assign({}, tooltip), { pos: tr.changes.mapPos(tooltip.pos) });\n        return tr.effects.reduce((t, e) => e.is(setLintGutterTooltip) ? e.value : t, tooltip);\n    },\n    provide: field => showTooltip.from(field)\n});\nconst lintGutterTheme = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-gutter-lint\": {\n        width: \"1.4em\",\n        \"& .cm-gutterElement\": {\n            padding: \".2em\"\n        }\n    },\n    \".cm-lint-marker\": {\n        width: \"1em\",\n        height: \"1em\"\n    },\n    \".cm-lint-marker-info\": {\n        content: /*@__PURE__*/svg(`<path fill=\"#aaf\" stroke=\"#77e\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M5 5L35 5L35 35L5 35Z\"/>`)\n    },\n    \".cm-lint-marker-warning\": {\n        content: /*@__PURE__*/svg(`<path fill=\"#fe8\" stroke=\"#fd7\" stroke-width=\"6\" stroke-linejoin=\"round\" d=\"M20 6L37 35L3 35Z\"/>`),\n    },\n    \".cm-lint-marker-error\": {\n        content: /*@__PURE__*/svg(`<circle cx=\"20\" cy=\"20\" r=\"15\" fill=\"#f87\" stroke=\"#f43\" stroke-width=\"6\"/>`)\n    },\n});\nconst lintExtensions = [\n    lintState,\n    /*@__PURE__*/EditorView.decorations.compute([lintState], state => {\n        let { selected, panel } = state.field(lintState);\n        return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([\n            activeMark.range(selected.from, selected.to)\n        ]);\n    }),\n    /*@__PURE__*/hoverTooltip(lintTooltip, { hideOn: hideTooltip }),\n    baseTheme\n];\nconst lintGutterConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            hoverTime: 300 /* Hover.Time */,\n            markerFilter: null,\n            tooltipFilter: null\n        });\n    }\n});\n/**\nReturns an extension that installs a gutter showing markers for\neach line that has diagnostics, which can be hovered over to see\nthe diagnostics.\n*/\nfunction lintGutter(config = {}) {\n    return [lintGutterConfig.of(config), lintGutterMarkers, lintGutterExtension, lintGutterTheme, lintGutterTooltip];\n}\n/**\nIterate over the marked diagnostics for the given editor state,\ncalling `f` for each of them. Note that, if the document changed\nsince the diagnostics were created, the `Diagnostic` object will\nhold the original outdated position, whereas the `to` and `from`\narguments hold the diagnostic's current position.\n*/\nfunction forEachDiagnostic(state, f) {\n    let lState = state.field(lintState, false);\n    if (lState && lState.diagnostics.size)\n        for (let iter = RangeSet.iter([lState.diagnostics]); iter.value; iter.next())\n            f(iter.value.spec.diagnostic, iter.from, iter.to);\n}\n\nexport { closeLintPanel, diagnosticCount, forEachDiagnostic, forceLinting, lintGutter, lintKeymap, linter, nextDiagnostic, openLintPanel, previousDiagnostic, setDiagnostics, setDiagnosticsEffect };\n"],"names":["SelectedDiagnostic","from","to","diagnostic","LintState","diagnostics","panel","selected","state","markedDiagnostics","diagnosticFilter","lintConfig","ranges","Decoration","d","DiagnosticWidget","findDiagnostic","after","found","spec","hideTooltip","tr","tooltip","result","line","e","setDiagnosticsEffect","maybeEnableLint","effects","lintState","StateEffect","lintExtensions","togglePanel","movePanelSelection","StateField","value","mapped","selPos","effect","LintPanel","f","showPanel","val","EditorView","s","activeMark","lintTooltip","view","pos","side","stackStart","stackEnd","diagnosticsTooltip","elt","renderDiagnostic","openLintPanel","field","getPanel","closeLintPanel","nextDiagnostic","sel","next","lintKeymap","Facet","input","i","x","combineConfig","a","b","u","assignKeys","actions","assigned","name","ch","c","inPanel","_a","keys","action","fired","click","keyIndex","nameElt","WidgetType","other","PanelItem","onkeydown","event","onclick","needsSync","newSelectedItem","_start","_end","item","j","scaleY","domPos","rm","prev","selectedIndex","selection","svg","content","attrs","underline","color","baseTheme","hoverTooltip"],"mappings":"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","x_google_ignoreList":[0]}