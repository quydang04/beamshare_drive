import { getPanel as M, Decoration as g, showPanel as T, EditorView as C, hoverTooltip as B, WidgetType as F } from "../../../../../@codemirror_view@6.33.0/node_modules/@codemirror/view/dist/index.mjs";
import { StateEffect as w, StateField as E, Facet as O, combineConfig as $ } from "../../../../../@codemirror_state@6.4.1/node_modules/@codemirror/state/dist/index.mjs";
import m from "../../../../../crelt@1.0.6/node_modules/crelt/index.mjs";
class z {
  constructor(e, i, s) {
    this.from = e, this.to = i, this.diagnostic = s;
  }
}
class h {
  constructor(e, i, s) {
    this.diagnostics = e, this.panel = i, this.selected = s;
  }
  static init(e, i, s) {
    let n = e, o = s.facet(b).markerFilter;
    o && (n = o(n, s));
    let a = g.set(n.map((l) => l.from == l.to || l.from == l.to - 1 && s.doc.lineAt(l.from).to == l.from ? g.widget({
      widget: new U(l),
      diagnostic: l
    }).range(l.from) : g.mark({
      attributes: { class: "cm-lintRange cm-lintRange-" + l.severity + (l.markClass ? " " + l.markClass : "") },
      diagnostic: l
    }).range(l.from, l.to)), !0);
    return new h(a, i, p(a));
  }
}
function p(t, e = null, i = 0) {
  let s = null;
  return t.between(i, 1e9, (n, o, { spec: a }) => {
    if (!(e && a.diagnostic != e))
      return s = new z(n, o, a.diagnostic), !1;
  }), s;
}
function H(t, e) {
  let i = e.pos, s = e.end || i, n = t.state.facet(b).hideOn(t, i, s);
  if (n != null)
    return n;
  let o = t.startState.doc.lineAt(e.pos);
  return !!(t.effects.some((a) => a.is(R)) || t.changes.touchesRange(o.from, Math.max(o.to, s)));
}
function _(t, e) {
  return t.field(f, !1) ? e : e.concat(w.appendConfig.of(Z));
}
const R = /* @__PURE__ */ w.define(), v = /* @__PURE__ */ w.define(), I = /* @__PURE__ */ w.define(), f = /* @__PURE__ */ E.define({
  create() {
    return new h(g.none, null, null);
  },
  update(t, e) {
    if (e.docChanged && t.diagnostics.size) {
      let i = t.diagnostics.map(e.changes), s = null, n = t.panel;
      if (t.selected) {
        let o = e.changes.mapPos(t.selected.from, 1);
        s = p(i, t.selected.diagnostic, o) || p(i, null, o);
      }
      !i.size && n && e.state.facet(b).autoPanel && (n = null), t = new h(i, n, s);
    }
    for (let i of e.effects)
      if (i.is(R)) {
        let s = e.state.facet(b).autoPanel ? i.value.length ? k.open : null : t.panel;
        t = h.init(i.value, s, e.state);
      } else i.is(v) ? t = new h(t.diagnostics, i.value ? k.open : null, t.selected) : i.is(I) && (t = new h(t.diagnostics, t.panel, i.value));
    return t;
  },
  provide: (t) => [
    T.from(t, (e) => e.panel),
    C.decorations.from(t, (e) => e.diagnostics)
  ]
}), q = /* @__PURE__ */ g.mark({ class: "cm-lintRange cm-lintRange-active" });
function V(t, e, i) {
  let { diagnostics: s } = t.state.field(f), n = [], o = 2e8, a = 0;
  s.between(e - (i < 0 ? 1 : 0), e + (i > 0 ? 1 : 0), (c, d, { spec: r }) => {
    e >= c && e <= d && (c == d || (e > c || i > 0) && (e < d || i < 0)) && (n.push(r.diagnostic), o = Math.min(c, o), a = Math.max(d, a));
  });
  let l = t.state.facet(b).tooltipFilter;
  return l && (n = l(n, t.state)), n.length ? {
    pos: o,
    end: a,
    above: t.state.doc.lineAt(o).to < a,
    create() {
      return { dom: j(t, n) };
    }
  } : null;
}
function j(t, e) {
  return m("ul", { class: "cm-tooltip-lint" }, e.map((i) => D(t, i, !1)));
}
const K = (t) => {
  let e = t.state.field(f, !1);
  (!e || !e.panel) && t.dispatch({ effects: _(t.state, [v.of(!0)]) });
  let i = M(t, k.open);
  return i && i.dom.querySelector(".cm-panel-lint ul").focus(), !0;
}, S = (t) => {
  let e = t.state.field(f, !1);
  return !e || !e.panel ? !1 : (t.dispatch({ effects: v.of(!1) }), !0);
}, N = (t) => {
  let e = t.state.field(f, !1);
  if (!e)
    return !1;
  let i = t.state.selection.main, s = e.diagnostics.iter(i.to + 1);
  return !s.value && (s = e.diagnostics.iter(0), !s.value || s.from == i.from && s.to == i.to) ? !1 : (t.dispatch({ selection: { anchor: s.from, head: s.to }, scrollIntoView: !0 }), !0);
}, X = [
  { key: "Mod-Shift-m", run: K, preventDefault: !0 },
  { key: "F8", run: N }
], b = /* @__PURE__ */ O.define({
  combine(t) {
    return Object.assign({ sources: t.map((e) => e.source).filter((e) => e != null) }, $(t.map((e) => e.config), {
      delay: 750,
      markerFilter: null,
      tooltipFilter: null,
      needsRefresh: null,
      hideOn: () => null
    }, {
      needsRefresh: (e, i) => e ? i ? (s) => e(s) || i(s) : e : i
    }));
  }
});
function A(t) {
  let e = [];
  if (t)
    e: for (let { name: i } of t) {
      for (let s = 0; s < i.length; s++) {
        let n = i[s];
        if (/[a-zA-Z]/.test(n) && !e.some((o) => o.toLowerCase() == n.toLowerCase())) {
          e.push(n);
          continue e;
        }
      }
      e.push("");
    }
  return e;
}
function D(t, e, i) {
  var s;
  let n = i ? A(e.actions) : [];
  return m("li", { class: "cm-diagnostic cm-diagnostic-" + e.severity }, m("span", { class: "cm-diagnosticText" }, e.renderMessage ? e.renderMessage(t) : e.message), (s = e.actions) === null || s === void 0 ? void 0 : s.map((o, a) => {
    let l = !1, c = (L) => {
      if (L.preventDefault(), l)
        return;
      l = !0;
      let y = p(t.state.field(f).diagnostics, e);
      y && o.apply(t, y.from, y.to);
    }, { name: d } = o, r = n[a] ? d.indexOf(n[a]) : -1, u = r < 0 ? d : [
      d.slice(0, r),
      m("u", d.slice(r, r + 1)),
      d.slice(r + 1)
    ];
    return m("button", {
      type: "button",
      class: "cm-diagnosticAction",
      onclick: c,
      onmousedown: c,
      "aria-label": ` Action: ${d}${r < 0 ? "" : ` (access key "${n[a]})"`}.`
    }, u);
  }), e.source && m("div", { class: "cm-diagnosticSource" }, e.source));
}
class U extends F {
  constructor(e) {
    super(), this.diagnostic = e;
  }
  eq(e) {
    return e.diagnostic == this.diagnostic;
  }
  toDOM() {
    return m("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
  }
}
class P {
  constructor(e, i) {
    this.diagnostic = i, this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16), this.dom = D(e, i, !0), this.dom.id = this.id, this.dom.setAttribute("role", "option");
  }
}
class k {
  constructor(e) {
    this.view = e, this.items = [];
    let i = (n) => {
      if (n.keyCode == 27)
        S(this.view), this.view.focus();
      else if (n.keyCode == 38 || n.keyCode == 33)
        this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
      else if (n.keyCode == 40 || n.keyCode == 34)
        this.moveSelection((this.selectedIndex + 1) % this.items.length);
      else if (n.keyCode == 36)
        this.moveSelection(0);
      else if (n.keyCode == 35)
        this.moveSelection(this.items.length - 1);
      else if (n.keyCode == 13)
        this.view.focus();
      else if (n.keyCode >= 65 && n.keyCode <= 90 && this.selectedIndex >= 0) {
        let { diagnostic: o } = this.items[this.selectedIndex], a = A(o.actions);
        for (let l = 0; l < a.length; l++)
          if (a[l].toUpperCase().charCodeAt(0) == n.keyCode) {
            let c = p(this.view.state.field(f).diagnostics, o);
            c && o.actions[l].apply(e, c.from, c.to);
          }
      } else
        return;
      n.preventDefault();
    }, s = (n) => {
      for (let o = 0; o < this.items.length; o++)
        this.items[o].dom.contains(n.target) && this.moveSelection(o);
    };
    this.list = m("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: i,
      onclick: s
    }), this.dom = m("div", { class: "cm-panel-lint" }, this.list, m("button", {
      type: "button",
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: () => S(this.view)
    }, "Ã—")), this.update();
  }
  get selectedIndex() {
    let e = this.view.state.field(f).selected;
    if (!e)
      return -1;
    for (let i = 0; i < this.items.length; i++)
      if (this.items[i].diagnostic == e.diagnostic)
        return i;
    return -1;
  }
  update() {
    let { diagnostics: e, selected: i } = this.view.state.field(f), s = 0, n = !1, o = null;
    for (e.between(0, this.view.state.doc.length, (a, l, { spec: c }) => {
      let d = -1, r;
      for (let u = s; u < this.items.length; u++)
        if (this.items[u].diagnostic == c.diagnostic) {
          d = u;
          break;
        }
      d < 0 ? (r = new P(this.view, c.diagnostic), this.items.splice(s, 0, r), n = !0) : (r = this.items[d], d > s && (this.items.splice(s, d - s), n = !0)), i && r.diagnostic == i.diagnostic ? r.dom.hasAttribute("aria-selected") || (r.dom.setAttribute("aria-selected", "true"), o = r) : r.dom.hasAttribute("aria-selected") && r.dom.removeAttribute("aria-selected"), s++;
    }); s < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0); )
      n = !0, this.items.pop();
    this.items.length == 0 && (this.items.push(new P(this.view, {
      from: -1,
      to: -1,
      severity: "info",
      message: this.view.state.phrase("No diagnostics")
    })), n = !0), o ? (this.list.setAttribute("aria-activedescendant", o.id), this.view.requestMeasure({
      key: this,
      read: () => ({ sel: o.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
      write: ({ sel: a, panel: l }) => {
        let c = l.height / this.list.offsetHeight;
        a.top < l.top ? this.list.scrollTop -= (l.top - a.top) / c : a.bottom > l.bottom && (this.list.scrollTop += (a.bottom - l.bottom) / c);
      }
    })) : this.selectedIndex < 0 && this.list.removeAttribute("aria-activedescendant"), n && this.sync();
  }
  sync() {
    let e = this.list.firstChild;
    function i() {
      let s = e;
      e = s.nextSibling, s.remove();
    }
    for (let s of this.items)
      if (s.dom.parentNode == this.list) {
        for (; e != s.dom; )
          i();
        e = s.dom.nextSibling;
      } else
        this.list.insertBefore(s.dom, e);
    for (; e; )
      i();
  }
  moveSelection(e) {
    if (this.selectedIndex < 0)
      return;
    let i = this.view.state.field(f), s = p(i.diagnostics, this.items[e].diagnostic);
    s && this.view.dispatch({
      selection: { anchor: s.from, head: s.to },
      scrollIntoView: !0,
      effects: I.of(s)
    });
  }
  static open(e) {
    return new k(e);
  }
}
function W(t, e = 'viewBox="0 0 40 40"') {
  return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${e}>${encodeURIComponent(t)}</svg>')`;
}
function x(t) {
  return W(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${t}" fill="none" stroke-width=".7"/>`, 'width="6" height="3"');
}
const Y = /* @__PURE__ */ C.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
  ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
  ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
  ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px",
    cursor: "pointer"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: 0.7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x",
    paddingBottom: "0.7px"
  },
  ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ x("#d11") },
  ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ x("orange") },
  ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ x("#999") },
  ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ x("#66d") },
  ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": { borderBottomColor: "orange" }
  },
  ".cm-lintPoint-info": {
    "&:after": { borderBottomColor: "#999" }
  },
  ".cm-lintPoint-hint": {
    "&:after": { borderBottomColor: "#66d" }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": { textDecoration: "underline" }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": { textDecoration: "none" },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
}), Z = [
  f,
  /* @__PURE__ */ C.decorations.compute([f], (t) => {
    let { selected: e, panel: i } = t.field(f);
    return !e || !i || e.from == e.to ? g.none : g.set([
      q.range(e.from, e.to)
    ]);
  }),
  /* @__PURE__ */ B(V, { hideOn: H }),
  Y
];
export {
  S as closeLintPanel,
  X as lintKeymap,
  N as nextDiagnostic,
  K as openLintPanel,
  R as setDiagnosticsEffect
};
//# sourceMappingURL=index.mjs.map
