{"version":3,"file":"lheading.js","sources":["../../../../../../../../../node_modules/.pnpm/markdown-it@14.1.0/node_modules/markdown-it/lib/rules_block/lheading.mjs"],"sourcesContent":["// lheading (---, ===)\n\nexport default function lheading (state, startLine, endLine/*, silent */) {\n  const terminatorRules = state.md.block.ruler.getRules('paragraph')\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false }\n\n  const oldParentType = state.parentType\n  state.parentType = 'paragraph' // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  let level = 0\n  let marker\n  let nextLine = startLine + 1\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      let pos = state.bMarks[nextLine] + state.tShift[nextLine]\n      const max = state.eMarks[nextLine]\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos)\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker)\n          pos = state.skipSpaces(pos)\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2)\n            break\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue }\n\n    // Some tags can terminate paragraph without empty line.\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false\n  }\n\n  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim()\n\n  state.line = nextLine + 1\n\n  const token_o    = state.push('heading_open', 'h' + String(level), 1)\n  token_o.markup   = String.fromCharCode(marker)\n  token_o.map      = [startLine, state.line]\n\n  const token_i    = state.push('inline', '', 0)\n  token_i.content  = content\n  token_i.map      = [startLine, state.line - 1]\n  token_i.children = []\n\n  const token_c    = state.push('heading_close', 'h' + String(level), -1)\n  token_c.markup   = String.fromCharCode(marker)\n\n  state.parentType = oldParentType\n\n  return true\n}\n"],"names":["lheading","state","startLine","endLine","terminatorRules","oldParentType","level","marker","nextLine","pos","max","terminate","i","l","content","token_o","token_i","token_c"],"mappings":"aAEe,SAASA,EAAUC,EAAOC,EAAWC,EAAsB,CACxE,MAAMC,EAAkBH,EAAM,GAAG,MAAM,MAAM,SAAS,WAAW,EAGjE,GAAIA,EAAM,OAAOC,CAAS,EAAID,EAAM,WAAa,EAAK,MAAO,GAE7D,MAAMI,EAAgBJ,EAAM,WAC5BA,EAAM,WAAa,YAGnB,IAAIK,EAAQ,EACRC,EACAC,EAAWN,EAAY,EAE3B,KAAOM,EAAWL,GAAW,CAACF,EAAM,QAAQO,CAAQ,EAAGA,IAAY,CAGjE,GAAIP,EAAM,OAAOO,CAAQ,EAAIP,EAAM,UAAY,EAAK,SAKpD,GAAIA,EAAM,OAAOO,CAAQ,GAAKP,EAAM,UAAW,CAC7C,IAAIQ,EAAMR,EAAM,OAAOO,CAAQ,EAAIP,EAAM,OAAOO,CAAQ,EACxD,MAAME,EAAMT,EAAM,OAAOO,CAAQ,EAEjC,GAAIC,EAAMC,IACRH,EAASN,EAAM,IAAI,WAAWQ,CAAG,GAE7BF,IAAW,IAAeA,IAAW,MACvCE,EAAMR,EAAM,UAAUQ,EAAKF,CAAM,EACjCE,EAAMR,EAAM,WAAWQ,CAAG,EAEtBA,GAAOC,IAAK,CACdJ,EAASC,IAAW,GAAc,EAAI,EACtC,KACD,CAGN,CAGD,GAAIN,EAAM,OAAOO,CAAQ,EAAI,EAAK,SAGlC,IAAIG,EAAY,GAChB,QAASC,EAAI,EAAGC,EAAIT,EAAgB,OAAQQ,EAAIC,EAAGD,IACjD,GAAIR,EAAgBQ,CAAC,EAAEX,EAAOO,EAAUL,EAAS,EAAI,EAAG,CACtDQ,EAAY,GACZ,KACD,CAEH,GAAIA,EAAa,KAClB,CAED,GAAI,CAACL,EAEH,MAAO,GAGT,MAAMQ,EAAUb,EAAM,SAASC,EAAWM,EAAUP,EAAM,UAAW,EAAK,EAAE,KAAM,EAElFA,EAAM,KAAOO,EAAW,EAExB,MAAMO,EAAad,EAAM,KAAK,eAAgB,IAAM,OAAOK,CAAK,EAAG,CAAC,EACpES,EAAQ,OAAW,OAAO,aAAaR,CAAM,EAC7CQ,EAAQ,IAAW,CAACb,EAAWD,EAAM,IAAI,EAEzC,MAAMe,EAAaf,EAAM,KAAK,SAAU,GAAI,CAAC,EAC7Ce,EAAQ,QAAWF,EACnBE,EAAQ,IAAW,CAACd,EAAWD,EAAM,KAAO,CAAC,EAC7Ce,EAAQ,SAAW,CAAE,EAErB,MAAMC,EAAahB,EAAM,KAAK,gBAAiB,IAAM,OAAOK,CAAK,EAAG,EAAE,EACtE,OAAAW,EAAQ,OAAW,OAAO,aAAaV,CAAM,EAE7CN,EAAM,WAAaI,EAEZ,EACT","x_google_ignoreList":[0]}