{"version":3,"file":"image.js","sources":["../../../../../../../../../node_modules/.pnpm/markdown-it@14.1.0/node_modules/markdown-it/lib/rules_inline/image.mjs"],"sourcesContent":["// Process ![image](<src> \"title\")\n\nimport { normalizeReference, isSpace } from '../common/utils.mjs'\n\nexport default function image (state, silent) {\n  let code, content, label, pos, ref, res, title, start\n  let href = ''\n  const oldPos = state.pos\n  const max = state.posMax\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false }\n\n  const labelStart = state.pos + 2\n  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false)\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false }\n\n  pos = labelEnd + 1\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n    if (pos >= max) { return false }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax)\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str)\n      if (state.md.validateLink(href)) {\n        pos = res.pos\n      } else {\n        href = ''\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos)\n      if (!isSpace(code) && code !== 0x0A) { break }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax)\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str\n      pos = res.pos\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos)\n        if (!isSpace(code) && code !== 0x0A) { break }\n      }\n    } else {\n      title = ''\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos\n      return false\n    }\n    pos++\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1\n      pos = state.md.helpers.parseLinkLabel(state, pos)\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++)\n      } else {\n        pos = labelEnd + 1\n      }\n    } else {\n      pos = labelEnd + 1\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd) }\n\n    ref = state.env.references[normalizeReference(label)]\n    if (!ref) {\n      state.pos = oldPos\n      return false\n    }\n    href = ref.href\n    title = ref.title\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd)\n\n    const tokens = []\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens\n    )\n\n    const token = state.push('image', 'img', 0)\n    const attrs = [['src', href], ['alt', '']]\n    token.attrs = attrs\n    token.children = tokens\n    token.content = content\n\n    if (title) {\n      attrs.push(['title', title])\n    }\n  }\n\n  state.pos = pos\n  state.posMax = max\n  return true\n}\n"],"names":["image","state","silent","code","content","label","pos","ref","res","title","start","href","oldPos","max","labelStart","labelEnd","isSpace","normalizeReference","tokens","token","attrs"],"mappings":"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","x_google_ignoreList":[0]}