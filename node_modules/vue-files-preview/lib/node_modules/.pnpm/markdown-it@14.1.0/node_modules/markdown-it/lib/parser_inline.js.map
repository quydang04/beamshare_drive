{"version":3,"file":"parser_inline.js","sources":["../../../../../../../../node_modules/.pnpm/markdown-it@14.1.0/node_modules/markdown-it/lib/parser_inline.mjs"],"sourcesContent":["/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n\nimport Ruler from './ruler.mjs'\nimport StateInline from './rules_inline/state_inline.mjs'\n\nimport r_text from './rules_inline/text.mjs'\nimport r_linkify from './rules_inline/linkify.mjs'\nimport r_newline from './rules_inline/newline.mjs'\nimport r_escape from './rules_inline/escape.mjs'\nimport r_backticks from './rules_inline/backticks.mjs'\nimport r_strikethrough from './rules_inline/strikethrough.mjs'\nimport r_emphasis from './rules_inline/emphasis.mjs'\nimport r_link from './rules_inline/link.mjs'\nimport r_image from './rules_inline/image.mjs'\nimport r_autolink from './rules_inline/autolink.mjs'\nimport r_html_inline from './rules_inline/html_inline.mjs'\nimport r_entity from './rules_inline/entity.mjs'\n\nimport r_balance_pairs from './rules_inline/balance_pairs.mjs'\nimport r_fragments_join from './rules_inline/fragments_join.mjs'\n\n// Parser rules\n\nconst _rules = [\n  ['text',            r_text],\n  ['linkify',         r_linkify],\n  ['newline',         r_newline],\n  ['escape',          r_escape],\n  ['backticks',       r_backticks],\n  ['strikethrough',   r_strikethrough.tokenize],\n  ['emphasis',        r_emphasis.tokenize],\n  ['link',            r_link],\n  ['image',           r_image],\n  ['autolink',        r_autolink],\n  ['html_inline',     r_html_inline],\n  ['entity',          r_entity]\n]\n\n// `rule2` ruleset was created specifically for emphasis/strikethrough\n// post-processing and may be changed in the future.\n//\n// Don't use this for anything except pairs (plugins working with `balance_pairs`).\n//\nconst _rules2 = [\n  ['balance_pairs',   r_balance_pairs],\n  ['strikethrough',   r_strikethrough.postProcess],\n  ['emphasis',        r_emphasis.postProcess],\n  // rules for pairs separate '**' into its own text tokens, which may be left unused,\n  // rule below merges unused segments back with the rest of the text\n  ['fragments_join',  r_fragments_join]\n]\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline () {\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler()\n\n  for (let i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1])\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler()\n\n  for (let i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1])\n  }\n}\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  const pos = state.pos\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const maxNesting = state.md.options.maxNesting\n  const cache = state.cache\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos]\n    return\n  }\n\n  let ok = false\n\n  if (state.level < maxNesting) {\n    for (let i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++\n      ok = rules[i](state, true)\n      state.level--\n\n      if (ok) {\n        if (pos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n        break\n      }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax\n  }\n\n  if (!ok) { state.pos++ }\n  cache[pos] = state.pos\n}\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  const rules = this.ruler.getRules('')\n  const len = rules.length\n  const end = state.posMax\n  const maxNesting = state.md.options.maxNesting\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n    const prevPos = state.pos\n    let ok = false\n\n    if (state.level < maxNesting) {\n      for (let i = 0; i < len; i++) {\n        ok = rules[i](state, false)\n        if (ok) {\n          if (prevPos >= state.pos) { throw new Error(\"inline rule didn't increment state.pos\") }\n          break\n        }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break }\n      continue\n    }\n\n    state.pending += state.src[state.pos++]\n  }\n\n  if (state.pending) {\n    state.pushPending()\n  }\n}\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  const state = new this.State(str, md, env, outTokens)\n\n  this.tokenize(state)\n\n  const rules = this.ruler2.getRules('')\n  const len = rules.length\n\n  for (let i = 0; i < len; i++) {\n    rules[i](state)\n  }\n}\n\nParserInline.prototype.State = StateInline\n\nexport default ParserInline\n"],"names":["_rules","r_text","r_linkify","r_newline","r_escape","r_backticks","r_strikethrough","r_emphasis","r_link","r_image","r_autolink","r_html_inline","r_entity","_rules2","r_balance_pairs","r_fragments_join","ParserInline","Ruler","i","state","pos","rules","len","maxNesting","cache","ok","end","prevPos","str","md","env","outTokens","StateInline"],"mappings":"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","x_google_ignoreList":[0]}