{"version":3,"file":"linkify.js","sources":["../../../../../../../../../node_modules/.pnpm/markdown-it@14.1.0/node_modules/markdown-it/lib/rules_inline/linkify.mjs"],"sourcesContent":["// Process links like https://example.org/\n\n// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\nconst SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i\n\nexport default function linkify (state, silent) {\n  if (!state.md.options.linkify) return false\n  if (state.linkLevel > 0) return false\n\n  const pos = state.pos\n  const max = state.posMax\n\n  if (pos + 3 > max) return false\n  if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false\n  if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false\n  if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false\n\n  const match = state.pending.match(SCHEME_RE)\n  if (!match) return false\n\n  const proto = match[1]\n\n  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length))\n  if (!link) return false\n\n  let url = link.url\n\n  // invalid link, but still detected by linkify somehow;\n  // need to check to prevent infinite loop below\n  if (url.length <= proto.length) return false\n\n  // disallow '*' at the end of the link (conflicts with emphasis)\n  url = url.replace(/\\*+$/, '')\n\n  const fullUrl = state.md.normalizeLink(url)\n  if (!state.md.validateLink(fullUrl)) return false\n\n  if (!silent) {\n    state.pending = state.pending.slice(0, -proto.length)\n\n    const token_o = state.push('link_open', 'a', 1)\n    token_o.attrs = [['href', fullUrl]]\n    token_o.markup = 'linkify'\n    token_o.info = 'auto'\n\n    const token_t = state.push('text', '', 0)\n    token_t.content = state.md.normalizeLinkText(url)\n\n    const token_c = state.push('link_close', 'a', -1)\n    token_c.markup = 'linkify'\n    token_c.info = 'auto'\n  }\n\n  state.pos += url.length - proto.length\n  return true\n}\n"],"names":["SCHEME_RE","linkify","state","silent","pos","max","match","proto","link","url","fullUrl","token_o","token_t","token_c"],"mappings":"aAGA,MAAMA,EAAY,0CAEH,SAASC,EAASC,EAAOC,EAAQ,CAE9C,GADI,CAACD,EAAM,GAAG,QAAQ,SAClBA,EAAM,UAAY,EAAG,MAAO,GAEhC,MAAME,EAAMF,EAAM,IACZG,EAAMH,EAAM,OAKlB,GAHIE,EAAM,EAAIC,GACVH,EAAM,IAAI,WAAWE,CAAG,IAAM,IAC9BF,EAAM,IAAI,WAAWE,EAAM,CAAC,IAAM,IAClCF,EAAM,IAAI,WAAWE,EAAM,CAAC,IAAM,GAAa,MAAO,GAE1D,MAAME,EAAQJ,EAAM,QAAQ,MAAMF,CAAS,EAC3C,GAAI,CAACM,EAAO,MAAO,GAEnB,MAAMC,EAAQD,EAAM,CAAC,EAEfE,EAAON,EAAM,GAAG,QAAQ,aAAaA,EAAM,IAAI,MAAME,EAAMG,EAAM,MAAM,CAAC,EAC9E,GAAI,CAACC,EAAM,MAAO,GAElB,IAAIC,EAAMD,EAAK,IAIf,GAAIC,EAAI,QAAUF,EAAM,OAAQ,MAAO,GAGvCE,EAAMA,EAAI,QAAQ,OAAQ,EAAE,EAE5B,MAAMC,EAAUR,EAAM,GAAG,cAAcO,CAAG,EAC1C,GAAI,CAACP,EAAM,GAAG,aAAaQ,CAAO,EAAG,MAAO,GAE5C,GAAI,CAACP,EAAQ,CACXD,EAAM,QAAUA,EAAM,QAAQ,MAAM,EAAG,CAACK,EAAM,MAAM,EAEpD,MAAMI,EAAUT,EAAM,KAAK,YAAa,IAAK,CAAC,EAC9CS,EAAQ,MAAQ,CAAC,CAAC,OAAQD,CAAO,CAAC,EAClCC,EAAQ,OAAS,UACjBA,EAAQ,KAAO,OAEf,MAAMC,EAAUV,EAAM,KAAK,OAAQ,GAAI,CAAC,EACxCU,EAAQ,QAAUV,EAAM,GAAG,kBAAkBO,CAAG,EAEhD,MAAMI,EAAUX,EAAM,KAAK,aAAc,IAAK,EAAE,EAChDW,EAAQ,OAAS,UACjBA,EAAQ,KAAO,MAChB,CAED,OAAAX,EAAM,KAAOO,EAAI,OAASF,EAAM,OACzB,EACT","x_google_ignoreList":[0]}