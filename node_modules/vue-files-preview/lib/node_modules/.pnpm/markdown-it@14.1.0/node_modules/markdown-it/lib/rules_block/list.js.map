{"version":3,"file":"list.js","sources":["../../../../../../../../../node_modules/.pnpm/markdown-it@14.1.0/node_modules/markdown-it/lib/rules_block/list.mjs"],"sourcesContent":["// Lists\n\nimport { isSpace } from '../common/utils.mjs'\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker (state, startLine) {\n  const max = state.eMarks[startLine]\n  let pos = state.bMarks[startLine] + state.tShift[startLine]\n\n  const marker = state.src.charCodeAt(pos++)\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1\n  }\n\n  if (pos < max) {\n    const ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1\n    }\n  }\n\n  return pos\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker (state, startLine) {\n  const start = state.bMarks[startLine] + state.tShift[startLine]\n  const max = state.eMarks[startLine]\n  let pos = start\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1 }\n\n  let ch = state.src.charCodeAt(pos++)\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1 }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1 }\n\n    ch = state.src.charCodeAt(pos++)\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1 }\n\n      continue\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break\n    }\n\n    return -1\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos)\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1\n    }\n  }\n  return pos\n}\n\nfunction markTightParagraphs (state, idx) {\n  const level = state.level + 2\n\n  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true\n      state.tokens[i].hidden = true\n      i += 2\n    }\n  }\n}\n\nexport default function list (state, startLine, endLine, silent) {\n  let max, pos, start, token\n  let nextLine = startLine\n  let tight = true\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[nextLine] - state.listIndent >= 4 &&\n      state.sCount[nextLine] < state.blkIndent) {\n    return false\n  }\n\n  let isTerminatingParagraph = false\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      isTerminatingParagraph = true\n    }\n  }\n\n  // Detect list type and position after marker\n  let isOrdered\n  let markerValue\n  let posAfterMarker\n  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {\n    isOrdered = true\n    start = state.bMarks[nextLine] + state.tShift[nextLine]\n    markerValue = Number(state.src.slice(start, posAfterMarker - 1))\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false\n  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {\n    isOrdered = false\n  } else {\n    return false\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false\n  }\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true }\n\n  // We should terminate list on style change. Remember first one to compare.\n  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1)\n\n  // Start list\n  const listTokIdx = state.tokens.length\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1)\n    if (markerValue !== 1) {\n      token.attrs = [['start', markerValue]]\n    }\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1)\n  }\n\n  const listLines = [nextLine, 0]\n  token.map    = listLines\n  token.markup = String.fromCharCode(markerCharCode)\n\n  //\n  // Iterate list items\n  //\n\n  let prevEmptyEnd = false\n  const terminatorRules = state.md.block.ruler.getRules('list')\n\n  const oldParentType = state.parentType\n  state.parentType = 'list'\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker\n    max = state.eMarks[nextLine]\n\n    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine])\n    let offset = initial\n\n    while (pos < max) {\n      const ch = state.src.charCodeAt(pos)\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4\n      } else if (ch === 0x20) {\n        offset++\n      } else {\n        break\n      }\n\n      pos++\n    }\n\n    const contentStart = pos\n    let indentAfterMarker\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1\n    } else {\n      indentAfterMarker = offset - initial\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1 }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    const indent = initial + indentAfterMarker\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1)\n    token.markup = String.fromCharCode(markerCharCode)\n    const itemLines = [nextLine, 0]\n    token.map    = itemLines\n    if (isOrdered) {\n      token.info = state.src.slice(start, posAfterMarker - 1)\n    }\n\n    // change current state, then restore it after parser subcall\n    const oldTight = state.tight\n    const oldTShift = state.tShift[nextLine]\n    const oldSCount = state.sCount[nextLine]\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    const oldListIndent = state.listIndent\n    state.listIndent = state.blkIndent\n    state.blkIndent = indent\n\n    state.tight = true\n    state.tShift[nextLine] = contentStart - state.bMarks[nextLine]\n    state.sCount[nextLine] = offset\n\n    if (contentStart >= max && state.isEmpty(nextLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine)\n    } else {\n      state.md.block.tokenize(state, nextLine, endLine, true)\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - nextLine) > 1 && state.isEmpty(state.line - 1)\n\n    state.blkIndent = state.listIndent\n    state.listIndent = oldListIndent\n    state.tShift[nextLine] = oldTShift\n    state.sCount[nextLine] = oldSCount\n    state.tight = oldTight\n\n    token        = state.push('list_item_close', 'li', -1)\n    token.markup = String.fromCharCode(markerCharCode)\n\n    nextLine = state.line\n    itemLines[1] = nextLine\n\n    if (nextLine >= endLine) { break }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break }\n\n    // fail if terminating block found\n    let terminate = false\n    for (let i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true\n        break\n      }\n    }\n    if (terminate) { break }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n      start = state.bMarks[nextLine] + state.tShift[nextLine]\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine)\n      if (posAfterMarker < 0) { break }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1)\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1)\n  }\n  token.markup = String.fromCharCode(markerCharCode)\n\n  listLines[1] = nextLine\n  state.line = nextLine\n\n  state.parentType = oldParentType\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx)\n  }\n\n  return true\n}\n"],"names":["skipBulletListMarker","state","startLine","max","pos","marker","ch","isSpace","skipOrderedListMarker","start","markTightParagraphs","idx","level","l","list","endLine","silent","token","nextLine","tight","isTerminatingParagraph","isOrdered","markerValue","posAfterMarker","markerCharCode","listTokIdx","listLines","prevEmptyEnd","terminatorRules","oldParentType","initial","offset","contentStart","indentAfterMarker","indent","itemLines","oldTight","oldTShift","oldSCount","oldListIndent","terminate","i"],"mappings":"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","x_google_ignoreList":[0]}