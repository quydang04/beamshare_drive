{"version":3,"file":"renderer.js","sources":["../../../../../../../../node_modules/.pnpm/markdown-it@14.1.0/node_modules/markdown-it/lib/renderer.mjs"],"sourcesContent":["/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n\nimport { assign, unescapeAll, escapeHtml } from './common/utils.mjs'\n\nconst default_rules = {}\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(token.content) +\n          '</code>'\n}\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n'\n}\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n  const info = token.info ? unescapeAll(token.info).trim() : ''\n  let langName = ''\n  let langAttrs = ''\n\n  if (info) {\n    const arr = info.split(/(\\s+)/g)\n    langName = arr[0]\n    langAttrs = arr.slice(2).join('')\n  }\n\n  let highlighted\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content)\n  } else {\n    highlighted = escapeHtml(token.content)\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n'\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .deepClone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    const i = token.attrIndex('class')\n    const tmpAttrs = token.attrs ? token.attrs.slice() : []\n\n    if (i < 0) {\n      tmpAttrs.push(['class', options.langPrefix + langName])\n    } else {\n      tmpAttrs[i] = tmpAttrs[i].slice()\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName\n    }\n\n    // Fake token just to render attributes\n    const tmpToken = {\n      attrs: tmpAttrs\n    }\n\n    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\\n`\n  }\n\n  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\\n`\n}\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  const token = tokens[idx]\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env)\n\n  return slf.renderToken(tokens, idx, options)\n}\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n'\n}\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n'\n}\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content)\n}\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content\n}\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer () {\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules)\n}\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs (token) {\n  let i, l, result\n\n  if (!token.attrs) { return '' }\n\n  result = ''\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"'\n  }\n\n  return result\n}\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken (tokens, idx, options) {\n  const token = tokens[idx]\n  let result = ''\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return ''\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n'\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token)\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /'\n  }\n\n  // Check if we need to add a newline after this tag\n  let needLf = false\n  if (token.block) {\n    needLf = true\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        const nextToken = tokens[idx + 1]\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>'\n\n  return result\n}\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options)\n    }\n  }\n\n  return result\n}\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  let result = ''\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    switch (tokens[i].type) {\n      case 'text':\n        result += tokens[i].content\n        break\n      case 'image':\n        result += this.renderInlineAsText(tokens[i].children, options, env)\n        break\n      case 'html_inline':\n      case 'html_block':\n        result += tokens[i].content\n        break\n      case 'softbreak':\n      case 'hardbreak':\n        result += '\\n'\n        break\n      default:\n        // all other tokens are skipped\n    }\n  }\n\n  return result\n}\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to render\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  let result = ''\n  const rules = this.rules\n\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const type = tokens[i].type\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env)\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this)\n    } else {\n      result += this.renderToken(tokens, i, options, env)\n    }\n  }\n\n  return result\n}\n\nexport default Renderer\n"],"names":["default_rules","tokens","idx","options","env","slf","token","escapeHtml","info","unescapeAll","langName","langAttrs","arr","highlighted","i","tmpAttrs","tmpToken","Renderer","assign","result","needLf","nextToken","rules","len","type"],"mappings":"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","x_google_ignoreList":[0]}