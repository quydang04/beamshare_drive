{"version":3,"file":"strikethrough.js","sources":["../../../../../../../../../node_modules/.pnpm/markdown-it@14.1.0/node_modules/markdown-it/lib/rules_inline/strikethrough.mjs"],"sourcesContent":["// ~~strike through~~\n//\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nfunction strikethrough_tokenize (state, silent) {\n  const start = state.pos\n  const marker = state.src.charCodeAt(start)\n\n  if (silent) { return false }\n\n  if (marker !== 0x7E/* ~ */) { return false }\n\n  const scanned = state.scanDelims(state.pos, true)\n  let len = scanned.length\n  const ch = String.fromCharCode(marker)\n\n  if (len < 2) { return false }\n\n  let token\n\n  if (len % 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch\n    len--\n  }\n\n  for (let i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0)\n    token.content = ch + ch\n\n    state.delimiters.push({\n      marker,\n      length: 0,     // disable \"rule of 3\" length checks meant for emphasis\n      token: state.tokens.length - 1,\n      end: -1,\n      open: scanned.can_open,\n      close: scanned.can_close\n    })\n  }\n\n  state.pos += scanned.length\n\n  return true\n}\n\nfunction postProcess (state, delimiters) {\n  let token\n  const loneMarkers = []\n  const max = delimiters.length\n\n  for (let i = 0; i < max; i++) {\n    const startDelim = delimiters[i]\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue\n    }\n\n    if (startDelim.end === -1) {\n      continue\n    }\n\n    const endDelim = delimiters[startDelim.end]\n\n    token         = state.tokens[startDelim.token]\n    token.type    = 's_open'\n    token.tag     = 's'\n    token.nesting = 1\n    token.markup  = '~~'\n    token.content = ''\n\n    token         = state.tokens[endDelim.token]\n    token.type    = 's_close'\n    token.tag     = 's'\n    token.nesting = -1\n    token.markup  = '~~'\n    token.content = ''\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n      loneMarkers.push(endDelim.token - 1)\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    const i = loneMarkers.pop()\n    let j = i + 1\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++\n    }\n\n    j--\n\n    if (i !== j) {\n      token = state.tokens[j]\n      state.tokens[j] = state.tokens[i]\n      state.tokens[i] = token\n    }\n  }\n}\n\n// Walk through delimiter list and replace text tokens with tags\n//\nfunction strikethrough_postProcess (state) {\n  const tokens_meta = state.tokens_meta\n  const max = state.tokens_meta.length\n\n  postProcess(state, state.delimiters)\n\n  for (let curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters)\n    }\n  }\n}\n\nexport default {\n  tokenize: strikethrough_tokenize,\n  postProcess: strikethrough_postProcess\n}\n"],"names":["strikethrough_tokenize","state","silent","start","marker","scanned","len","ch","token","i","postProcess","delimiters","loneMarkers","max","startDelim","endDelim","j","strikethrough_postProcess","tokens_meta","curr","r_strikethrough"],"mappings":"aAKA,SAASA,EAAwBC,EAAOC,EAAQ,CAC9C,MAAMC,EAAQF,EAAM,IACdG,EAASH,EAAM,IAAI,WAAWE,CAAK,EAIzC,GAFID,GAEAE,IAAW,IAAe,MAAO,GAErC,MAAMC,EAAUJ,EAAM,WAAWA,EAAM,IAAK,EAAI,EAChD,IAAIK,EAAMD,EAAQ,OAClB,MAAME,EAAK,OAAO,aAAaH,CAAM,EAErC,GAAIE,EAAM,EAAK,MAAO,GAEtB,IAAIE,EAEAF,EAAM,IACRE,EAAgBP,EAAM,KAAK,OAAQ,GAAI,CAAC,EACxCO,EAAM,QAAUD,EAChBD,KAGF,QAASG,EAAI,EAAGA,EAAIH,EAAKG,GAAK,EAC5BD,EAAgBP,EAAM,KAAK,OAAQ,GAAI,CAAC,EACxCO,EAAM,QAAUD,EAAKA,EAErBN,EAAM,WAAW,KAAK,CACpB,OAAAG,EACA,OAAQ,EACR,MAAOH,EAAM,OAAO,OAAS,EAC7B,IAAK,GACL,KAAMI,EAAQ,SACd,MAAOA,EAAQ,SACrB,CAAK,EAGH,OAAAJ,EAAM,KAAOI,EAAQ,OAEd,EACT,CAEA,SAASK,EAAaT,EAAOU,EAAY,CACvC,IAAIH,EACJ,MAAMI,EAAc,CAAE,EAChBC,EAAMF,EAAW,OAEvB,QAASF,EAAI,EAAGA,EAAII,EAAKJ,IAAK,CAC5B,MAAMK,EAAaH,EAAWF,CAAC,EAM/B,GAJIK,EAAW,SAAW,KAItBA,EAAW,MAAQ,GACrB,SAGF,MAAMC,EAAWJ,EAAWG,EAAW,GAAG,EAE1CN,EAAgBP,EAAM,OAAOa,EAAW,KAAK,EAC7CN,EAAM,KAAU,SAChBA,EAAM,IAAU,IAChBA,EAAM,QAAU,EAChBA,EAAM,OAAU,KAChBA,EAAM,QAAU,GAEhBA,EAAgBP,EAAM,OAAOc,EAAS,KAAK,EAC3CP,EAAM,KAAU,UAChBA,EAAM,IAAU,IAChBA,EAAM,QAAU,GAChBA,EAAM,OAAU,KAChBA,EAAM,QAAU,GAEZP,EAAM,OAAOc,EAAS,MAAQ,CAAC,EAAE,OAAS,QAC1Cd,EAAM,OAAOc,EAAS,MAAQ,CAAC,EAAE,UAAY,KAC/CH,EAAY,KAAKG,EAAS,MAAQ,CAAC,CAEtC,CAQD,KAAOH,EAAY,QAAQ,CACzB,MAAMH,EAAIG,EAAY,IAAK,EAC3B,IAAII,EAAIP,EAAI,EAEZ,KAAOO,EAAIf,EAAM,OAAO,QAAUA,EAAM,OAAOe,CAAC,EAAE,OAAS,WACzDA,IAGFA,IAEIP,IAAMO,IACRR,EAAQP,EAAM,OAAOe,CAAC,EACtBf,EAAM,OAAOe,CAAC,EAAIf,EAAM,OAAOQ,CAAC,EAChCR,EAAM,OAAOQ,CAAC,EAAID,EAErB,CACH,CAIA,SAASS,EAA2BhB,EAAO,CACzC,MAAMiB,EAAcjB,EAAM,YACpBY,EAAMZ,EAAM,YAAY,OAE9BS,EAAYT,EAAOA,EAAM,UAAU,EAEnC,QAASkB,EAAO,EAAGA,EAAON,EAAKM,IACzBD,EAAYC,CAAI,GAAKD,EAAYC,CAAI,EAAE,YACzCT,EAAYT,EAAOiB,EAAYC,CAAI,EAAE,UAAU,CAGrD,CAEA,MAAeC,EAAA,CACb,SAAUpB,EACV,YAAaiB,CACf","x_google_ignoreList":[0]}