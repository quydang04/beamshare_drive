{"version":3,"file":"linkify.js","sources":["../../../../../../../../../node_modules/.pnpm/markdown-it@14.1.0/node_modules/markdown-it/lib/rules_core/linkify.mjs"],"sourcesContent":["// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n\nimport { arrayReplaceAt } from '../common/utils.mjs'\n\nfunction isLinkOpen (str) {\n  return /^<a[>\\s]/i.test(str)\n}\nfunction isLinkClose (str) {\n  return /^<\\/a\\s*>/i.test(str)\n}\n\nexport default function linkify (state) {\n  const blockTokens = state.tokens\n\n  if (!state.md.options.linkify) { return }\n\n  for (let j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue\n    }\n\n    let tokens = blockTokens[j].children\n\n    let htmlLinkLevel = 0\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      const currentToken = tokens[i]\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--\n        }\n        continue\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++\n        }\n      }\n      if (htmlLinkLevel > 0) { continue }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n        const text = currentToken.content\n        let links = state.md.linkify.match(text)\n\n        // Now split string to nodes\n        const nodes = []\n        let level = currentToken.level\n        let lastPos = 0\n\n        // forbid escape sequence at the start of the string,\n        // this avoids http\\://example.com/ from being linkified as\n        // http:<a href=\"//example.com/\">//example.com/</a>\n        if (links.length > 0 &&\n            links[0].index === 0 &&\n            i > 0 &&\n            tokens[i - 1].type === 'text_special') {\n          links = links.slice(1)\n        }\n\n        for (let ln = 0; ln < links.length; ln++) {\n          const url = links[ln].url\n          const fullUrl = state.md.normalizeLink(url)\n          if (!state.md.validateLink(fullUrl)) { continue }\n\n          let urlText = links[ln].text\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '')\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '')\n          } else {\n            urlText = state.md.normalizeLinkText(urlText)\n          }\n\n          const pos = links[ln].index\n\n          if (pos > lastPos) {\n            const token   = new state.Token('text', '', 0)\n            token.content = text.slice(lastPos, pos)\n            token.level   = level\n            nodes.push(token)\n          }\n\n          const token_o   = new state.Token('link_open', 'a', 1)\n          token_o.attrs   = [['href', fullUrl]]\n          token_o.level   = level++\n          token_o.markup  = 'linkify'\n          token_o.info    = 'auto'\n          nodes.push(token_o)\n\n          const token_t   = new state.Token('text', '', 0)\n          token_t.content = urlText\n          token_t.level   = level\n          nodes.push(token_t)\n\n          const token_c   = new state.Token('link_close', 'a', -1)\n          token_c.level   = --level\n          token_c.markup  = 'linkify'\n          token_c.info    = 'auto'\n          nodes.push(token_c)\n\n          lastPos = links[ln].lastIndex\n        }\n        if (lastPos < text.length) {\n          const token   = new state.Token('text', '', 0)\n          token.content = text.slice(lastPos)\n          token.level   = level\n          nodes.push(token)\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes)\n      }\n    }\n  }\n}\n"],"names":["isLinkOpen","str","isLinkClose","linkify","state","blockTokens","j","l","tokens","htmlLinkLevel","i","currentToken","text","links","nodes","level","lastPos","ln","url","fullUrl","urlText","pos","token","token_o","token_t","token_c","arrayReplaceAt"],"mappings":"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","x_google_ignoreList":[0]}