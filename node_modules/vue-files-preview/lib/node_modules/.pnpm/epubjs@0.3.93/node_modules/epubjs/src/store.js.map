{"version":3,"file":"store.js","sources":["../../../../../../../../node_modules/.pnpm/epubjs@0.3.93/node_modules/epubjs/src/store.js"],"sourcesContent":["import {defer, isXml, parse} from \"./utils/core\";\nimport httpRequest from \"./utils/request\";\nimport mime from \"./utils/mime\";\nimport Path from \"./utils/path\";\nimport EventEmitter from \"event-emitter\";\nimport localforage from \"localforage\";\n\n/**\n * Handles saving and requesting files from local storage\n * @class\n * @param {string} name This should be the name of the application for modals\n * @param {function} [requester]\n * @param {function} [resolver]\n */\nclass Store {\n\n\tconstructor(name, requester, resolver) {\n\t\tthis.urlCache = {};\n\n\t\tthis.storage = undefined;\n\n\t\tthis.name = name;\n\t\tthis.requester = requester || httpRequest;\n\t\tthis.resolver = resolver;\n\n\t\tthis.online = true;\n\n\t\tthis.checkRequirements();\n\n\t\tthis.addListeners();\n\t}\n\n\t/**\n\t * Checks to see if localForage exists in global namspace,\n\t * Requires localForage if it isn't there\n\t * @private\n\t */\n\tcheckRequirements(){\n\t\ttry {\n\t\t\tlet store;\n\t\t\tif (typeof localforage === \"undefined\") {\n\t\t\t\tstore = localforage;\n\t\t\t}\n\t\t\tthis.storage = store.createInstance({\n\t\t\t\t\tname: this.name\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"localForage lib not loaded\");\n\t\t}\n\t}\n\n\t/**\n\t * Add online and offline event listeners\n\t * @private\n\t */\n\taddListeners() {\n\t\tthis._status = this.status.bind(this);\n\t\twindow.addEventListener('online',  this._status);\n\t  window.addEventListener('offline', this._status);\n\t}\n\n\t/**\n\t * Remove online and offline event listeners\n\t * @private\n\t */\n\tremoveListeners() {\n\t\twindow.removeEventListener('online',  this._status);\n\t  window.removeEventListener('offline', this._status);\n\t\tthis._status = undefined;\n\t}\n\n\t/**\n\t * Update the online / offline status\n\t * @private\n\t */\n\tstatus(event) {\n\t\tlet online = navigator.onLine;\n\t\tthis.online = online;\n\t\tif (online) {\n\t\t\tthis.emit(\"online\", this);\n\t\t} else {\n\t\t\tthis.emit(\"offline\", this);\n\t\t}\n\t}\n\n\t/**\n\t * Add all of a book resources to the store\n\t * @param  {Resources} resources  book resources\n\t * @param  {boolean} [force] force resaving resources\n\t * @return {Promise<object>} store objects\n\t */\n\tadd(resources, force) {\n\t\tlet mapped = resources.resources.map((item) => {\n\t\t\tlet { href } = item;\n\t\t\tlet url = this.resolver(href);\n\t\t\tlet encodedUrl = window.encodeURIComponent(url);\n\n\t\t\treturn this.storage.getItem(encodedUrl).then((item) => {\n\t\t\t\tif (!item || force) {\n\t\t\t\t\treturn this.requester(url, \"binary\")\n\t\t\t\t\t\t.then((data) => {\n\t\t\t\t\t\t\treturn this.storage.setItem(encodedUrl, data);\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn item;\n\t\t\t\t}\n\t\t\t});\n\n\t\t});\n\t\treturn Promise.all(mapped);\n\t}\n\n\t/**\n\t * Put binary data from a url to storage\n\t * @param  {string} url  a url to request from storage\n\t * @param  {boolean} [withCredentials]\n\t * @param  {object} [headers]\n\t * @return {Promise<Blob>}\n\t */\n\tput(url, withCredentials, headers) {\n\t\tlet encodedUrl = window.encodeURIComponent(url);\n\n\t\treturn this.storage.getItem(encodedUrl).then((result) => {\n\t\t\tif (!result) {\n\t\t\t\treturn this.requester(url, \"binary\", withCredentials, headers).then((data) => {\n\t\t\t\t\treturn this.storage.setItem(encodedUrl, data);\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t/**\n\t * Request a url\n\t * @param  {string} url  a url to request from storage\n\t * @param  {string} [type] specify the type of the returned result\n\t * @param  {boolean} [withCredentials]\n\t * @param  {object} [headers]\n\t * @return {Promise<Blob | string | JSON | Document | XMLDocument>}\n\t */\n\trequest(url, type, withCredentials, headers){\n\t\tif (this.online) {\n\t\t\t// From network\n\t\t\treturn this.requester(url, type, withCredentials, headers).then((data) => {\n\t\t\t\t// save to store if not present\n\t\t\t\tthis.put(url);\n\t\t\t\treturn data;\n\t\t\t})\n\t\t} else {\n\t\t\t// From store\n\t\t\treturn this.retrieve(url, type);\n\t\t}\n\n\t}\n\n\t/**\n\t * Request a url from storage\n\t * @param  {string} url  a url to request from storage\n\t * @param  {string} [type] specify the type of the returned result\n\t * @return {Promise<Blob | string | JSON | Document | XMLDocument>}\n\t */\n\tretrieve(url, type) {\n\t\tvar deferred = new defer();\n\t\tvar response;\n\t\tvar path = new Path(url);\n\n\t\t// If type isn't set, determine it from the file extension\n\t\tif(!type) {\n\t\t\ttype = path.extension;\n\t\t}\n\n\t\tif(type == \"blob\"){\n\t\t\tresponse = this.getBlob(url);\n\t\t} else {\n\t\t\tresponse = this.getText(url);\n\t\t}\n\n\n\t\treturn response.then((r) => {\n\t\t\tvar deferred = new defer();\n\t\t\tvar result;\n\t\t\tif (r) {\n\t\t\t\tresult = this.handleResponse(r, type);\n\t\t\t\tdeferred.resolve(result);\n\t\t\t} else {\n\t\t\t\tdeferred.reject({\n\t\t\t\t\tmessage : \"File not found in storage: \" + url,\n\t\t\t\t\tstack : new Error().stack\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn deferred.promise;\n\t\t});\n\t}\n\n\t/**\n\t * Handle the response from request\n\t * @private\n\t * @param  {any} response\n\t * @param  {string} [type]\n\t * @return {any} the parsed result\n\t */\n\thandleResponse(response, type){\n\t\tvar r;\n\n\t\tif(type == \"json\") {\n\t\t\tr = JSON.parse(response);\n\t\t}\n\t\telse\n\t\tif(isXml(type)) {\n\t\t\tr = parse(response, \"text/xml\");\n\t\t}\n\t\telse\n\t\tif(type == \"xhtml\") {\n\t\t\tr = parse(response, \"application/xhtml+xml\");\n\t\t}\n\t\telse\n\t\tif(type == \"html\" || type == \"htm\") {\n\t\t\tr = parse(response, \"text/html\");\n\t\t } else {\n\t\t\t r = response;\n\t\t }\n\n\t\treturn r;\n\t}\n\n\t/**\n\t * Get a Blob from Storage by Url\n\t * @param  {string} url\n\t * @param  {string} [mimeType]\n\t * @return {Blob}\n\t */\n\tgetBlob(url, mimeType){\n\t\tlet encodedUrl = window.encodeURIComponent(url);\n\n\t\treturn this.storage.getItem(encodedUrl).then(function(uint8array) {\n\t\t\tif(!uint8array) return;\n\n\t\t\tmimeType = mimeType || mime.lookup(url);\n\n\t\t\treturn new Blob([uint8array], {type : mimeType});\n\t\t});\n\n\t}\n\n\t/**\n\t * Get Text from Storage by Url\n\t * @param  {string} url\n\t * @param  {string} [mimeType]\n\t * @return {string}\n\t */\n\tgetText(url, mimeType){\n\t\tlet encodedUrl = window.encodeURIComponent(url);\n\n\t\tmimeType = mimeType || mime.lookup(url);\n\n\t\treturn this.storage.getItem(encodedUrl).then(function(uint8array) {\n\t\t\tvar deferred = new defer();\n\t\t\tvar reader = new FileReader();\n\t\t\tvar blob;\n\n\t\t\tif(!uint8array) return;\n\n\t\t\tblob = new Blob([uint8array], {type : mimeType});\n\n\t\t\treader.addEventListener(\"loadend\", () => {\n\t\t\t\tdeferred.resolve(reader.result);\n\t\t\t});\n\n\t\t\treader.readAsText(blob, mimeType);\n\n\t\t\treturn deferred.promise;\n\t\t});\n\t}\n\n\t/**\n\t * Get a base64 encoded result from Storage by Url\n\t * @param  {string} url\n\t * @param  {string} [mimeType]\n\t * @return {string} base64 encoded\n\t */\n\tgetBase64(url, mimeType){\n\t\tlet encodedUrl = window.encodeURIComponent(url);\n\n\t\tmimeType = mimeType || mime.lookup(url);\n\n\t\treturn this.storage.getItem(encodedUrl).then((uint8array) => {\n\t\t\tvar deferred = new defer();\n\t\t\tvar reader = new FileReader();\n\t\t\tvar blob;\n\n\t\t\tif(!uint8array) return;\n\n\t\t\tblob = new Blob([uint8array], {type : mimeType});\n\n\t\t\treader.addEventListener(\"loadend\", () => {\n\t\t\t\tdeferred.resolve(reader.result);\n\t\t\t});\n\t\t\treader.readAsDataURL(blob, mimeType);\n\n\t\t\treturn deferred.promise;\n\t\t});\n\t}\n\n\t/**\n\t * Create a Url from a stored item\n\t * @param  {string} url\n\t * @param  {object} [options.base64] use base64 encoding or blob url\n\t * @return {Promise} url promise with Url string\n\t */\n\tcreateUrl(url, options){\n\t\tvar deferred = new defer();\n\t\tvar _URL = window.URL || window.webkitURL || window.mozURL;\n\t\tvar tempUrl;\n\t\tvar response;\n\t\tvar useBase64 = options && options.base64;\n\n\t\tif(url in this.urlCache) {\n\t\t\tdeferred.resolve(this.urlCache[url]);\n\t\t\treturn deferred.promise;\n\t\t}\n\n\t\tif (useBase64) {\n\t\t\tresponse = this.getBase64(url);\n\n\t\t\tif (response) {\n\t\t\t\tresponse.then(function(tempUrl) {\n\n\t\t\t\t\tthis.urlCache[url] = tempUrl;\n\t\t\t\t\tdeferred.resolve(tempUrl);\n\n\t\t\t\t}.bind(this));\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tresponse = this.getBlob(url);\n\n\t\t\tif (response) {\n\t\t\t\tresponse.then(function(blob) {\n\n\t\t\t\t\ttempUrl = _URL.createObjectURL(blob);\n\t\t\t\t\tthis.urlCache[url] = tempUrl;\n\t\t\t\t\tdeferred.resolve(tempUrl);\n\n\t\t\t\t}.bind(this));\n\n\t\t\t}\n\t\t}\n\n\n\t\tif (!response) {\n\t\t\tdeferred.reject({\n\t\t\t\tmessage : \"File not found in storage: \" + url,\n\t\t\t\tstack : new Error().stack\n\t\t\t});\n\t\t}\n\n\t\treturn deferred.promise;\n\t}\n\n\t/**\n\t * Revoke Temp Url for a archive item\n\t * @param  {string} url url of the item in the store\n\t */\n\trevokeUrl(url){\n\t\tvar _URL = window.URL || window.webkitURL || window.mozURL;\n\t\tvar fromCache = this.urlCache[url];\n\t\tif(fromCache) _URL.revokeObjectURL(fromCache);\n\t}\n\n\tdestroy() {\n\t\tvar _URL = window.URL || window.webkitURL || window.mozURL;\n\t\tfor (let fromCache in this.urlCache) {\n\t\t\t_URL.revokeObjectURL(fromCache);\n\t\t}\n\t\tthis.urlCache = {};\n\t\tthis.removeListeners();\n\t}\n}\n\nEventEmitter(Store.prototype);\n\nexport default Store;\n"],"names":["Store","name","requester","resolver","httpRequest","store","localforage","event","online","resources","force","mapped","item","href","url","encodedUrl","data","withCredentials","headers","result","type","defer","response","path","Path","r","deferred","isXml","parse","mimeType","uint8array","mime","reader","blob","options","_URL","tempUrl","useBase64","fromCache","EventEmitter"],"mappings":"oTAcA,MAAMA,CAAM,CAEX,YAAYC,EAAMC,EAAWC,EAAU,CACtC,KAAK,SAAW,GAEhB,KAAK,QAAU,OAEf,KAAK,KAAOF,EACZ,KAAK,UAAYC,GAAaE,EAC9B,KAAK,SAAWD,EAEhB,KAAK,OAAS,GAEd,KAAK,kBAAiB,EAEtB,KAAK,aAAY,CACjB,CAOD,mBAAmB,CAClB,GAAI,CACH,IAAIE,EACA,OAAOC,EAAgB,MAC1BD,EAAQC,GAET,KAAK,QAAUD,EAAM,eAAe,CAClC,KAAM,KAAK,IAChB,CAAI,CACD,MAAW,CACX,MAAM,IAAI,MAAM,4BAA4B,CAC5C,CACD,CAMD,cAAe,CACd,KAAK,QAAU,KAAK,OAAO,KAAK,IAAI,EACpC,OAAO,iBAAiB,SAAW,KAAK,OAAO,EAC9C,OAAO,iBAAiB,UAAW,KAAK,OAAO,CAChD,CAMD,iBAAkB,CACjB,OAAO,oBAAoB,SAAW,KAAK,OAAO,EACjD,OAAO,oBAAoB,UAAW,KAAK,OAAO,EACnD,KAAK,QAAU,MACf,CAMD,OAAOE,EAAO,CACb,IAAIC,EAAS,UAAU,OACvB,KAAK,OAASA,EACVA,EACH,KAAK,KAAK,SAAU,IAAI,EAExB,KAAK,KAAK,UAAW,IAAI,CAE1B,CAQD,IAAIC,EAAWC,EAAO,CACrB,IAAIC,EAASF,EAAU,UAAU,IAAKG,GAAS,CAC9C,GAAI,CAAE,KAAAC,CAAM,EAAGD,EACXE,EAAM,KAAK,SAASD,CAAI,EACxBE,EAAa,OAAO,mBAAmBD,CAAG,EAE9C,OAAO,KAAK,QAAQ,QAAQC,CAAU,EAAE,KAAMH,GACzC,CAACA,GAAQF,EACL,KAAK,UAAUI,EAAK,QAAQ,EACjC,KAAME,GACC,KAAK,QAAQ,QAAQD,EAAYC,CAAI,CAC5C,EAEKJ,CAER,CAEJ,CAAG,EACD,OAAO,QAAQ,IAAID,CAAM,CACzB,CASD,IAAIG,EAAKG,EAAiBC,EAAS,CAClC,IAAIH,EAAa,OAAO,mBAAmBD,CAAG,EAE9C,OAAO,KAAK,QAAQ,QAAQC,CAAU,EAAE,KAAMI,GACxCA,GACG,KAAK,UAAUL,EAAK,SAAUG,EAAiBC,CAAO,EAAE,KAAMF,GAC7D,KAAK,QAAQ,QAAQD,EAAYC,CAAI,CAC5C,CAGF,CACD,CAUD,QAAQF,EAAKM,EAAMH,EAAiBC,EAAQ,CAC3C,OAAI,KAAK,OAED,KAAK,UAAUJ,EAAKM,EAAMH,EAAiBC,CAAO,EAAE,KAAMF,IAEhE,KAAK,IAAIF,CAAG,EACLE,EACP,EAGM,KAAK,SAASF,EAAKM,CAAI,CAG/B,CAQD,SAASN,EAAKM,EAAM,CACJ,IAAIC,QACnB,IAAIC,EACAC,EAAO,IAAIC,EAAKV,CAAG,EAGvB,OAAIM,IACHA,EAAOG,EAAK,WAGVH,GAAQ,OACVE,EAAW,KAAK,QAAQR,CAAG,EAE3BQ,EAAW,KAAK,QAAQR,CAAG,EAIrBQ,EAAS,KAAMG,GAAM,CAC3B,IAAIC,EAAW,IAAIL,EAAAA,MACfF,EACJ,OAAIM,GACHN,EAAS,KAAK,eAAeM,EAAGL,CAAI,EACpCM,EAAS,QAAQP,CAAM,GAEvBO,EAAS,OAAO,CACf,QAAU,8BAAgCZ,EAC1C,MAAQ,IAAI,MAAK,EAAG,KACzB,CAAK,EAEKY,EAAS,OACnB,CAAG,CACD,CASD,eAAeJ,EAAUF,EAAK,CAC7B,IAAI,EAEJ,OAAGA,GAAQ,OACV,EAAI,KAAK,MAAME,CAAQ,EAGrBK,EAAAA,MAAMP,CAAI,EACZ,EAAIQ,EAAK,MAACN,EAAU,UAAU,EAG5BF,GAAQ,QACV,EAAIQ,EAAK,MAACN,EAAU,uBAAuB,EAGzCF,GAAQ,QAAUA,GAAQ,MAC5B,EAAIQ,EAAK,MAACN,EAAU,WAAW,EAE9B,EAAIA,EAGC,CACP,CAQD,QAAQR,EAAKe,EAAS,CACrB,IAAId,EAAa,OAAO,mBAAmBD,CAAG,EAE9C,OAAO,KAAK,QAAQ,QAAQC,CAAU,EAAE,KAAK,SAASe,EAAY,CACjE,GAAIA,EAEJ,OAAAD,EAAWA,GAAYE,EAAK,OAAOjB,CAAG,EAE/B,IAAI,KAAK,CAACgB,CAAU,EAAG,CAAC,KAAOD,CAAQ,CAAC,CAClD,CAAG,CAED,CAQD,QAAQf,EAAKe,EAAS,CACrB,IAAId,EAAa,OAAO,mBAAmBD,CAAG,EAE9C,OAAAe,EAAWA,GAAYE,EAAK,OAAOjB,CAAG,EAE/B,KAAK,QAAQ,QAAQC,CAAU,EAAE,KAAK,SAASe,EAAY,CACjE,IAAIJ,EAAW,IAAIL,EAAAA,MACfW,EAAS,IAAI,WACbC,EAEJ,GAAIH,EAEJ,OAAAG,EAAO,IAAI,KAAK,CAACH,CAAU,EAAG,CAAC,KAAOD,CAAQ,CAAC,EAE/CG,EAAO,iBAAiB,UAAW,IAAM,CACxCN,EAAS,QAAQM,EAAO,MAAM,CAClC,CAAI,EAEDA,EAAO,WAAWC,EAAMJ,CAAQ,EAEzBH,EAAS,OACnB,CAAG,CACD,CAQD,UAAUZ,EAAKe,EAAS,CACvB,IAAId,EAAa,OAAO,mBAAmBD,CAAG,EAE9C,OAAAe,EAAWA,GAAYE,EAAK,OAAOjB,CAAG,EAE/B,KAAK,QAAQ,QAAQC,CAAU,EAAE,KAAMe,GAAe,CAC5D,IAAIJ,EAAW,IAAIL,EAAAA,MACfW,EAAS,IAAI,WACbC,EAEJ,GAAIH,EAEJ,OAAAG,EAAO,IAAI,KAAK,CAACH,CAAU,EAAG,CAAC,KAAOD,CAAQ,CAAC,EAE/CG,EAAO,iBAAiB,UAAW,IAAM,CACxCN,EAAS,QAAQM,EAAO,MAAM,CAClC,CAAI,EACDA,EAAO,cAAcC,EAAMJ,CAAQ,EAE5BH,EAAS,OACnB,CAAG,CACD,CAQD,UAAUZ,EAAKoB,EAAQ,CACtB,IAAIR,EAAW,IAAIL,EAAAA,MACfc,EAAO,OAAO,KAAO,OAAO,WAAa,OAAO,OAChDC,EACAd,EACAe,EAAYH,GAAWA,EAAQ,OAEnC,OAAGpB,KAAO,KAAK,UACdY,EAAS,QAAQ,KAAK,SAASZ,CAAG,CAAC,EAC5BY,EAAS,UAGbW,GACHf,EAAW,KAAK,UAAUR,CAAG,EAEzBQ,GACHA,EAAS,MAAK,SAASc,EAAS,CAE/B,KAAK,SAAStB,CAAG,EAAIsB,EACrBV,EAAS,QAAQU,CAAO,CAE7B,GAAM,KAAK,IAAI,CAAC,IAMbd,EAAW,KAAK,QAAQR,CAAG,EAEvBQ,GACHA,EAAS,MAAK,SAASW,EAAM,CAE5BG,EAAUD,EAAK,gBAAgBF,CAAI,EACnC,KAAK,SAASnB,CAAG,EAAIsB,EACrBV,EAAS,QAAQU,CAAO,CAE7B,GAAM,KAAK,IAAI,CAAC,GAMTd,GACJI,EAAS,OAAO,CACf,QAAU,8BAAgCZ,EAC1C,MAAQ,IAAI,MAAK,EAAG,KACxB,CAAI,EAGKY,EAAS,QAChB,CAMD,UAAUZ,EAAI,CACb,IAAIqB,EAAO,OAAO,KAAO,OAAO,WAAa,OAAO,OAChDG,EAAY,KAAK,SAASxB,CAAG,EAC9BwB,GAAWH,EAAK,gBAAgBG,CAAS,CAC5C,CAED,SAAU,CACT,IAAIH,EAAO,OAAO,KAAO,OAAO,WAAa,OAAO,OACpD,QAASG,KAAa,KAAK,SAC1BH,EAAK,gBAAgBG,CAAS,EAE/B,KAAK,SAAW,GAChB,KAAK,gBAAe,CACpB,CACF,CAEAC,EAAavC,EAAM,SAAS","x_google_ignoreList":[0]}