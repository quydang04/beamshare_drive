{"version":3,"file":"request.js","sources":["../../../../../../../../../node_modules/.pnpm/epubjs@0.3.93/node_modules/epubjs/src/utils/request.js"],"sourcesContent":["import {defer, isXml, parse} from \"./core\";\nimport Path from \"./path\";\n\nfunction request(url, type, withCredentials, headers) {\n\tvar supportsURL = (typeof window != \"undefined\") ? window.URL : false; // TODO: fallback for url if window isn't defined\n\tvar BLOB_RESPONSE = supportsURL ? \"blob\" : \"arraybuffer\";\n\n\tvar deferred = new defer();\n\n\tvar xhr = new XMLHttpRequest();\n\n\t//-- Check from PDF.js:\n\t//   https://github.com/mozilla/pdf.js/blob/master/web/compatibility.js\n\tvar xhrPrototype = XMLHttpRequest.prototype;\n\n\tvar header;\n\n\tif (!(\"overrideMimeType\" in xhrPrototype)) {\n\t\t// IE10 might have response, but not overrideMimeType\n\t\tObject.defineProperty(xhrPrototype, \"overrideMimeType\", {\n\t\t\tvalue: function xmlHttpRequestOverrideMimeType() {}\n\t\t});\n\t}\n\n\tif(withCredentials) {\n\t\txhr.withCredentials = true;\n\t}\n\n\txhr.onreadystatechange = handler;\n\txhr.onerror = err;\n\n\txhr.open(\"GET\", url, true);\n\n\tfor(header in headers) {\n\t\txhr.setRequestHeader(header, headers[header]);\n\t}\n\n\tif(type == \"json\") {\n\t\txhr.setRequestHeader(\"Accept\", \"application/json\");\n\t}\n\n\t// If type isn\"t set, determine it from the file extension\n\tif(!type) {\n\t\ttype = new Path(url).extension;\n\t}\n\n\tif(type == \"blob\"){\n\t\txhr.responseType = BLOB_RESPONSE;\n\t}\n\n\n\tif(isXml(type)) {\n\t\t// xhr.responseType = \"document\";\n\t\txhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n\t}\n\n\tif(type == \"xhtml\") {\n\t\t// xhr.responseType = \"document\";\n\t}\n\n\tif(type == \"html\" || type == \"htm\") {\n\t\t// xhr.responseType = \"document\";\n\t}\n\n\tif(type == \"binary\") {\n\t\txhr.responseType = \"arraybuffer\";\n\t}\n\n\txhr.send();\n\n\tfunction err(e) {\n\t\tdeferred.reject(e);\n\t}\n\n\tfunction handler() {\n\t\tif (this.readyState === XMLHttpRequest.DONE) {\n\t\t\tvar responseXML = false;\n\n\t\t\tif(this.responseType === \"\" || this.responseType === \"document\") {\n\t\t\t\tresponseXML = this.responseXML;\n\t\t\t}\n\n\t\t\tif (this.status === 200 || this.status === 0 || responseXML) { //-- Firefox is reporting 0 for blob urls\n\t\t\t\tvar r;\n\n\t\t\t\tif (!this.response && !responseXML) {\n\t\t\t\t\tdeferred.reject({\n\t\t\t\t\t\tstatus: this.status,\n\t\t\t\t\t\tmessage : \"Empty Response\",\n\t\t\t\t\t\tstack : new Error().stack\n\t\t\t\t\t});\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}\n\n\t\t\t\tif (this.status === 403) {\n\t\t\t\t\tdeferred.reject({\n\t\t\t\t\t\tstatus: this.status,\n\t\t\t\t\t\tresponse: this.response,\n\t\t\t\t\t\tmessage : \"Forbidden\",\n\t\t\t\t\t\tstack : new Error().stack\n\t\t\t\t\t});\n\t\t\t\t\treturn deferred.promise;\n\t\t\t\t}\n\t\t\t\tif(responseXML){\n\t\t\t\t\tr = this.responseXML;\n\t\t\t\t} else\n\t\t\t\tif(isXml(type)){\n\t\t\t\t\t// xhr.overrideMimeType(\"text/xml\"); // for OPF parsing\n\t\t\t\t\t// If this.responseXML wasn't set, try to parse using a DOMParser from text\n\t\t\t\t\tr = parse(this.response, \"text/xml\");\n\t\t\t\t}else\n\t\t\t\tif(type == \"xhtml\"){\n\t\t\t\t\tr = parse(this.response, \"application/xhtml+xml\");\n\t\t\t\t}else\n\t\t\t\tif(type == \"html\" || type == \"htm\"){\n\t\t\t\t\tr = parse(this.response, \"text/html\");\n\t\t\t\t}else\n\t\t\t\tif(type == \"json\"){\n\t\t\t\t\tr = JSON.parse(this.response);\n\t\t\t\t}else\n\t\t\t\tif(type == \"blob\"){\n\n\t\t\t\t\tif(supportsURL) {\n\t\t\t\t\t\tr = this.response;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t//-- Safari doesn't support responseType blob, so create a blob from arraybuffer\n\t\t\t\t\t\tr = new Blob([this.response]);\n\t\t\t\t\t}\n\n\t\t\t\t}else{\n\t\t\t\t\tr = this.response;\n\t\t\t\t}\n\n\t\t\t\tdeferred.resolve(r);\n\t\t\t} else {\n\n\t\t\t\tdeferred.reject({\n\t\t\t\t\tstatus: this.status,\n\t\t\t\t\tmessage : this.response,\n\t\t\t\t\tstack : new Error().stack\n\t\t\t\t});\n\n\t\t\t}\n\t\t}\n\t}\n\n\treturn deferred.promise;\n}\n\nexport default request;\n"],"names":["request","url","type","withCredentials","headers","supportsURL","BLOB_RESPONSE","deferred","defer","xhr","xhrPrototype","header","handler","err","Path","isXml","e","responseXML","r","parse"],"mappings":"iEAGA,SAASA,EAAQC,EAAKC,EAAMC,EAAiBC,EAAS,CACrD,IAAIC,EAAe,OAAO,OAAU,IAAe,OAAO,IAAM,GAC5DC,EAAgBD,EAAc,OAAS,cAEvCE,EAAW,IAAIC,EAAAA,MAEfC,EAAM,IAAI,eAIVC,EAAe,eAAe,UAE9BC,EAEE,qBAAsBD,GAE3B,OAAO,eAAeA,EAAc,mBAAoB,CACvD,MAAO,UAA0C,CAAE,CACtD,CAAG,EAGCP,IACFM,EAAI,gBAAkB,IAGvBA,EAAI,mBAAqBG,EACzBH,EAAI,QAAUI,EAEdJ,EAAI,KAAK,MAAOR,EAAK,EAAI,EAEzB,IAAIU,KAAUP,EACbK,EAAI,iBAAiBE,EAAQP,EAAQO,CAAM,CAAC,EAG1CT,GAAQ,QACVO,EAAI,iBAAiB,SAAU,kBAAkB,EAI9CP,IACHA,EAAO,IAAIY,EAAKb,CAAG,EAAE,WAGnBC,GAAQ,SACVO,EAAI,aAAeH,GAIjBS,EAAAA,MAAMb,CAAI,GAEZO,EAAI,iBAAiB,UAAU,EAW7BP,GAAQ,WACVO,EAAI,aAAe,eAGpBA,EAAI,KAAI,EAER,SAASI,EAAIG,EAAG,CACfT,EAAS,OAAOS,CAAC,CACjB,CAED,SAASJ,GAAU,CAClB,GAAI,KAAK,aAAe,eAAe,KAAM,CAC5C,IAAIK,EAAc,GAMlB,IAJG,KAAK,eAAiB,IAAM,KAAK,eAAiB,cACpDA,EAAc,KAAK,aAGhB,KAAK,SAAW,KAAO,KAAK,SAAW,GAAKA,EAAa,CAC5D,IAAIC,EAEJ,GAAI,CAAC,KAAK,UAAY,CAACD,EACtB,OAAAV,EAAS,OAAO,CACf,OAAQ,KAAK,OACb,QAAU,iBACV,MAAQ,IAAI,MAAK,EAAG,KAC1B,CAAM,EACMA,EAAS,QAGjB,GAAI,KAAK,SAAW,IACnB,OAAAA,EAAS,OAAO,CACf,OAAQ,KAAK,OACb,SAAU,KAAK,SACf,QAAU,YACV,MAAQ,IAAI,MAAK,EAAG,KAC1B,CAAM,EACMA,EAAS,QAEdU,EACFC,EAAI,KAAK,YAEPH,EAAAA,MAAMb,CAAI,EAGZgB,EAAIC,EAAAA,MAAM,KAAK,SAAU,UAAU,EAEjCjB,GAAQ,QACVgB,EAAIC,EAAAA,MAAM,KAAK,SAAU,uBAAuB,EAE9CjB,GAAQ,QAAUA,GAAQ,MAC5BgB,EAAIC,EAAAA,MAAM,KAAK,SAAU,WAAW,EAElCjB,GAAQ,OACVgB,EAAI,KAAK,MAAM,KAAK,QAAQ,EAE1BhB,GAAQ,OAEPG,EACFa,EAAI,KAAK,SAGTA,EAAI,IAAI,KAAK,CAAC,KAAK,QAAQ,CAAC,EAI7BA,EAAI,KAAK,SAGVX,EAAS,QAAQW,CAAC,CACtB,MAEIX,EAAS,OAAO,CACf,OAAQ,KAAK,OACb,QAAU,KAAK,SACf,MAAQ,IAAI,MAAK,EAAG,KACzB,CAAK,CAGF,CACD,CAED,OAAOA,EAAS,OACjB","x_google_ignoreList":[0]}