{"version":3,"file":"packaging.js","sources":["../../../../../../../../node_modules/.pnpm/epubjs@0.3.93/node_modules/epubjs/src/packaging.js"],"sourcesContent":["import {qs, qsa, qsp, indexOfElementNode} from \"./utils/core\";\n\n/**\n * Open Packaging Format Parser\n * @class\n * @param {document} packageDocument OPF XML\n */\nclass Packaging {\n\tconstructor(packageDocument) {\n\t\tthis.manifest = {};\n\t\tthis.navPath = '';\n\t\tthis.ncxPath = '';\n\t\tthis.coverPath = '';\n\t\tthis.spineNodeIndex = 0;\n\t\tthis.spine = [];\n\t\tthis.metadata = {};\n\n\t\tif (packageDocument) {\n\t\t\tthis.parse(packageDocument);\n\t\t}\n\t}\n\n\t/**\n\t * Parse OPF XML\n\t * @param  {document} packageDocument OPF XML\n\t * @return {object} parsed package parts\n\t */\n\tparse(packageDocument){\n\t\tvar metadataNode, manifestNode, spineNode;\n\n\t\tif(!packageDocument) {\n\t\t\tthrow new Error(\"Package File Not Found\");\n\t\t}\n\n\t\tmetadataNode = qs(packageDocument, \"metadata\");\n\t\tif(!metadataNode) {\n\t\t\tthrow new Error(\"No Metadata Found\");\n\t\t}\n\n\t\tmanifestNode = qs(packageDocument, \"manifest\");\n\t\tif(!manifestNode) {\n\t\t\tthrow new Error(\"No Manifest Found\");\n\t\t}\n\n\t\tspineNode = qs(packageDocument, \"spine\");\n\t\tif(!spineNode) {\n\t\t\tthrow new Error(\"No Spine Found\");\n\t\t}\n\n\t\tthis.manifest = this.parseManifest(manifestNode);\n\t\tthis.navPath = this.findNavPath(manifestNode);\n\t\tthis.ncxPath = this.findNcxPath(manifestNode, spineNode);\n\t\tthis.coverPath = this.findCoverPath(packageDocument);\n\n\t\tthis.spineNodeIndex = indexOfElementNode(spineNode);\n\n\t\tthis.spine = this.parseSpine(spineNode, this.manifest);\n\n\t\tthis.uniqueIdentifier = this.findUniqueIdentifier(packageDocument);\n\t\tthis.metadata = this.parseMetadata(metadataNode);\n\n\t\tthis.metadata.direction = spineNode.getAttribute(\"page-progression-direction\");\n\n\t\treturn {\n\t\t\t\"metadata\" : this.metadata,\n\t\t\t\"spine\"    : this.spine,\n\t\t\t\"manifest\" : this.manifest,\n\t\t\t\"navPath\"  : this.navPath,\n\t\t\t\"ncxPath\"  : this.ncxPath,\n\t\t\t\"coverPath\": this.coverPath,\n\t\t\t\"spineNodeIndex\" : this.spineNodeIndex\n\t\t};\n\t}\n\n\t/**\n\t * Parse Metadata\n\t * @private\n\t * @param  {node} xml\n\t * @return {object} metadata\n\t */\n\tparseMetadata(xml){\n\t\tvar metadata = {};\n\n\t\tmetadata.title = this.getElementText(xml, \"title\");\n\t\tmetadata.creator = this.getElementText(xml, \"creator\");\n\t\tmetadata.description = this.getElementText(xml, \"description\");\n\n\t\tmetadata.pubdate = this.getElementText(xml, \"date\");\n\n\t\tmetadata.publisher = this.getElementText(xml, \"publisher\");\n\n\t\tmetadata.identifier = this.getElementText(xml, \"identifier\");\n\t\tmetadata.language = this.getElementText(xml, \"language\");\n\t\tmetadata.rights = this.getElementText(xml, \"rights\");\n\n\t\tmetadata.modified_date = this.getPropertyText(xml, \"dcterms:modified\");\n\n\t\tmetadata.layout = this.getPropertyText(xml, \"rendition:layout\");\n\t\tmetadata.orientation = this.getPropertyText(xml, \"rendition:orientation\");\n\t\tmetadata.flow = this.getPropertyText(xml, \"rendition:flow\");\n\t\tmetadata.viewport = this.getPropertyText(xml, \"rendition:viewport\");\n\t\tmetadata.media_active_class = this.getPropertyText(xml, \"media:active-class\");\n\t\tmetadata.spread = this.getPropertyText(xml, \"rendition:spread\");\n\t\t// metadata.page_prog_dir = packageXml.querySelector(\"spine\").getAttribute(\"page-progression-direction\");\n\n\t\treturn metadata;\n\t}\n\n\t/**\n\t * Parse Manifest\n\t * @private\n\t * @param  {node} manifestXml\n\t * @return {object} manifest\n\t */\n\tparseManifest(manifestXml){\n\t\tvar manifest = {};\n\n\t\t//-- Turn items into an array\n\t\t// var selected = manifestXml.querySelectorAll(\"item\");\n\t\tvar selected = qsa(manifestXml, \"item\");\n\t\tvar items = Array.prototype.slice.call(selected);\n\n\t\t//-- Create an object with the id as key\n\t\titems.forEach(function(item){\n\t\t\tvar id = item.getAttribute(\"id\"),\n\t\t\t\t\thref = item.getAttribute(\"href\") || \"\",\n\t\t\t\t\ttype = item.getAttribute(\"media-type\") || \"\",\n\t\t\t\t\toverlay = item.getAttribute(\"media-overlay\") || \"\",\n\t\t\t\t\tproperties = item.getAttribute(\"properties\") || \"\";\n\n\t\t\tmanifest[id] = {\n\t\t\t\t\"href\" : href,\n\t\t\t\t// \"url\" : href,\n\t\t\t\t\"type\" : type,\n\t\t\t\t\"overlay\" : overlay,\n\t\t\t\t\"properties\" : properties.length ? properties.split(\" \") : []\n\t\t\t};\n\n\t\t});\n\n\t\treturn manifest;\n\n\t}\n\n\t/**\n\t * Parse Spine\n\t * @private\n\t * @param  {node} spineXml\n\t * @param  {Packaging.manifest} manifest\n\t * @return {object} spine\n\t */\n\tparseSpine(spineXml, manifest){\n\t\tvar spine = [];\n\n\t\tvar selected = qsa(spineXml, \"itemref\");\n\t\tvar items = Array.prototype.slice.call(selected);\n\n\t\t// var epubcfi = new EpubCFI();\n\n\t\t//-- Add to array to maintain ordering and cross reference with manifest\n\t\titems.forEach(function(item, index){\n\t\t\tvar idref = item.getAttribute(\"idref\");\n\t\t\t// var cfiBase = epubcfi.generateChapterComponent(spineNodeIndex, index, Id);\n\t\t\tvar props = item.getAttribute(\"properties\") || \"\";\n\t\t\tvar propArray = props.length ? props.split(\" \") : [];\n\t\t\t// var manifestProps = manifest[Id].properties;\n\t\t\t// var manifestPropArray = manifestProps.length ? manifestProps.split(\" \") : [];\n\n\t\t\tvar itemref = {\n\t\t\t\t\"id\" : item.getAttribute(\"id\"),\n\t\t\t\t\"idref\" : idref,\n\t\t\t\t\"linear\" : item.getAttribute(\"linear\") || \"yes\",\n\t\t\t\t\"properties\" : propArray,\n\t\t\t\t// \"href\" : manifest[Id].href,\n\t\t\t\t// \"url\" :  manifest[Id].url,\n\t\t\t\t\"index\" : index\n\t\t\t\t// \"cfiBase\" : cfiBase\n\t\t\t};\n\t\t\tspine.push(itemref);\n\t\t});\n\n\t\treturn spine;\n\t}\n\n\t/**\n\t * Find Unique Identifier\n\t * @private\n\t * @param  {node} packageXml\n\t * @return {string} Unique Identifier text\n\t */\n\tfindUniqueIdentifier(packageXml){\n\t\tvar uniqueIdentifierId = packageXml.documentElement.getAttribute(\"unique-identifier\");\n\t\tif (! uniqueIdentifierId) {\n\t\t\treturn \"\";\n\t\t}\n\t\tvar identifier = packageXml.getElementById(uniqueIdentifierId);\n\t\tif (! identifier) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tif (identifier.localName === \"identifier\" && identifier.namespaceURI === \"http://purl.org/dc/elements/1.1/\") {\n\t\t\treturn identifier.childNodes.length > 0 ? identifier.childNodes[0].nodeValue.trim() : \"\";\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Find TOC NAV\n\t * @private\n\t * @param {element} manifestNode\n\t * @return {string}\n\t */\n\tfindNavPath(manifestNode){\n\t\t// Find item with property \"nav\"\n\t\t// Should catch nav regardless of order\n\t\t// var node = manifestNode.querySelector(\"item[properties$='nav'], item[properties^='nav '], item[properties*=' nav ']\");\n\t\tvar node = qsp(manifestNode, \"item\", {\"properties\":\"nav\"});\n\t\treturn node ? node.getAttribute(\"href\") : false;\n\t}\n\n\t/**\n\t * Find TOC NCX\n\t * media-type=\"application/x-dtbncx+xml\" href=\"toc.ncx\"\n\t * @private\n\t * @param {element} manifestNode\n\t * @param {element} spineNode\n\t * @return {string}\n\t */\n\tfindNcxPath(manifestNode, spineNode){\n\t\t// var node = manifestNode.querySelector(\"item[media-type='application/x-dtbncx+xml']\");\n\t\tvar node = qsp(manifestNode, \"item\", {\"media-type\":\"application/x-dtbncx+xml\"});\n\t\tvar tocId;\n\n\t\t// If we can't find the toc by media-type then try to look for id of the item in the spine attributes as\n\t\t// according to http://www.idpf.org/epub/20/spec/OPF_2.0.1_draft.htm#Section2.4.1.2,\n\t\t// \"The item that describes the NCX must be referenced by the spine toc attribute.\"\n\t\tif (!node) {\n\t\t\ttocId = spineNode.getAttribute(\"toc\");\n\t\t\tif(tocId) {\n\t\t\t\t// node = manifestNode.querySelector(\"item[id='\" + tocId + \"']\");\n\t\t\t\tnode = manifestNode.querySelector(`#${tocId}`);\n\t\t\t}\n\t\t}\n\n\t\treturn node ? node.getAttribute(\"href\") : false;\n\t}\n\n\t/**\n\t * Find the Cover Path\n\t * <item properties=\"cover-image\" id=\"ci\" href=\"cover.svg\" media-type=\"image/svg+xml\" />\n\t * Fallback for Epub 2.0\n\t * @private\n\t * @param  {node} packageXml\n\t * @return {string} href\n\t */\n\tfindCoverPath(packageXml){\n\t\tvar pkg = qs(packageXml, \"package\");\n\t\tvar epubVersion = pkg.getAttribute(\"version\");\n\t\t\n\t\t// Try parsing cover with epub 3.\n\t\t// var node = packageXml.querySelector(\"item[properties='cover-image']\");\n\t\tvar node = qsp(packageXml, \"item\", {\"properties\":\"cover-image\"});\n\t\tif (node) return node.getAttribute(\"href\");\n\t\t\n\t\t// Fallback to epub 2.\n\t\tvar metaCover = qsp(packageXml, \"meta\", {\"name\":\"cover\"});\n\n\t\tif (metaCover) {\n\t\t\tvar coverId = metaCover.getAttribute(\"content\");\n\t\t\t// var cover = packageXml.querySelector(\"item[id='\" + coverId + \"']\");\n\t\t\tvar cover = packageXml.getElementById(coverId);\n\t\t\treturn cover ? cover.getAttribute(\"href\") : \"\";\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Get text of a namespaced element\n\t * @private\n\t * @param  {node} xml\n\t * @param  {string} tag\n\t * @return {string} text\n\t */\n\tgetElementText(xml, tag){\n\t\tvar found = xml.getElementsByTagNameNS(\"http://purl.org/dc/elements/1.1/\", tag);\n\t\tvar el;\n\n\t\tif(!found || found.length === 0) return \"\";\n\n\t\tel = found[0];\n\n\t\tif(el.childNodes.length){\n\t\t\treturn el.childNodes[0].nodeValue;\n\t\t}\n\n\t\treturn \"\";\n\n\t}\n\n\t/**\n\t * Get text by property\n\t * @private\n\t * @param  {node} xml\n\t * @param  {string} property\n\t * @return {string} text\n\t */\n\tgetPropertyText(xml, property){\n\t\tvar el = qsp(xml, \"meta\", {\"property\":property});\n\n\t\tif(el && el.childNodes.length){\n\t\t\treturn el.childNodes[0].nodeValue;\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Load JSON Manifest\n\t * @param  {document} packageDocument OPF XML\n\t * @return {object} parsed package parts\n\t */\n\tload(json) {\n\t\tthis.metadata = json.metadata;\n\n\t\tlet spine = json.readingOrder || json.spine;\n\t\tthis.spine = spine.map((item, index) =>{\n\t\t\titem.index = index;\n\t\t\titem.linear = item.linear || \"yes\";\n\t\t\treturn item;\n\t\t});\n\n\t\tjson.resources.forEach((item, index) => {\n\t\t\tthis.manifest[index] = item;\n\n\t\t\tif (item.rel && item.rel[0] === \"cover\") {\n\t\t\t\tthis.coverPath = item.href;\n\t\t\t}\n\t\t});\n\n\t\tthis.spineNodeIndex = 0;\n\n\t\tthis.toc = json.toc.map((item, index) =>{\n\t\t\titem.label = item.title;\n\t\t\treturn item;\n\t\t});\n\n\t\treturn {\n\t\t\t\"metadata\" : this.metadata,\n\t\t\t\"spine\"    : this.spine,\n\t\t\t\"manifest\" : this.manifest,\n\t\t\t\"navPath\"  : this.navPath,\n\t\t\t\"ncxPath\"  : this.ncxPath,\n\t\t\t\"coverPath\": this.coverPath,\n\t\t\t\"spineNodeIndex\" : this.spineNodeIndex,\n\t\t\t\"toc\" : this.toc\n\t\t};\n\t}\n\n\tdestroy() {\n\t\tthis.manifest = undefined;\n\t\tthis.navPath = undefined;\n\t\tthis.ncxPath = undefined;\n\t\tthis.coverPath = undefined;\n\t\tthis.spineNodeIndex = undefined;\n\t\tthis.spine = undefined;\n\t\tthis.metadata = undefined;\n\t}\n}\n\nexport default Packaging;\n"],"names":["Packaging","packageDocument","metadataNode","manifestNode","spineNode","qs","indexOfElementNode","xml","metadata","manifestXml","manifest","selected","qsa","items","item","id","href","type","overlay","properties","spineXml","spine","index","idref","props","propArray","itemref","packageXml","uniqueIdentifierId","identifier","node","qsp","tocId","pkg","metaCover","coverId","cover","tag","found","el","property","json"],"mappings":"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","x_google_ignoreList":[0]}