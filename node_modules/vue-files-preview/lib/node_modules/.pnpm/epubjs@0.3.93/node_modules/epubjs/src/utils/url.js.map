{"version":3,"file":"url.js","sources":["../../../../../../../../../node_modules/.pnpm/epubjs@0.3.93/node_modules/epubjs/src/utils/url.js"],"sourcesContent":["import Path from \"./path\";\nimport path from \"path-webpack\";\n\n/**\n * creates a Url object for parsing and manipulation of a url string\n * @param\t{string} urlString\ta url string (relative or absolute)\n * @param\t{string} [baseString] optional base for the url,\n * default to window.location.href\n */\nclass Url {\n\tconstructor(urlString, baseString) {\n\t\tvar absolute = (urlString.indexOf(\"://\") > -1);\n\t\tvar pathname = urlString;\n\t\tvar basePath;\n\n\t\tthis.Url = undefined;\n\t\tthis.href = urlString;\n\t\tthis.protocol = \"\";\n\t\tthis.origin = \"\";\n\t\tthis.hash = \"\";\n\t\tthis.hash = \"\";\n\t\tthis.search = \"\";\n\t\tthis.base = baseString;\n\n\t\tif (!absolute &&\n\t\t\t\tbaseString !== false &&\n\t\t\t\ttypeof(baseString) !== \"string\" &&\n\t\t\t\twindow && window.location) {\n\t\t\tthis.base = window.location.href;\n\t\t}\n\n\t\t// URL Polyfill doesn't throw an error if base is empty\n\t\tif (absolute || this.base) {\n\t\t\ttry {\n\t\t\t\tif (this.base) { // Safari doesn't like an undefined base\n\t\t\t\t\tthis.Url = new URL(urlString, this.base);\n\t\t\t\t} else {\n\t\t\t\t\tthis.Url = new URL(urlString);\n\t\t\t\t}\n\t\t\t\tthis.href = this.Url.href;\n\n\t\t\t\tthis.protocol = this.Url.protocol;\n\t\t\t\tthis.origin = this.Url.origin;\n\t\t\t\tthis.hash = this.Url.hash;\n\t\t\t\tthis.search = this.Url.search;\n\n\t\t\t\tpathname = this.Url.pathname + (this.Url.search ? this.Url.search : '');\n\t\t\t} catch (e) {\n\t\t\t\t// Skip URL parsing\n\t\t\t\tthis.Url = undefined;\n\t\t\t\t// resolve the pathname from the base\n\t\t\t\tif (this.base) {\n\t\t\t\t\tbasePath = new Path(this.base);\n\t\t\t\t\tpathname = basePath.resolve(pathname);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.Path = new Path(pathname);\n\n\t\tthis.directory = this.Path.directory;\n\t\tthis.filename = this.Path.filename;\n\t\tthis.extension = this.Path.extension;\n\n\t}\n\n\t/**\n\t * @returns {Path}\n\t */\n\tpath () {\n\t\treturn this.Path;\n\t}\n\n\t/**\n\t * Resolves a relative path to a absolute url\n\t * @param {string} what\n\t * @returns {string} url\n\t */\n\tresolve (what) {\n\t\tvar isAbsolute = (what.indexOf(\"://\") > -1);\n\t\tvar fullpath;\n\n\t\tif (isAbsolute) {\n\t\t\treturn what;\n\t\t}\n\n\t\tfullpath = path.resolve(this.directory, what);\n\t\treturn this.origin + fullpath;\n\t}\n\n\t/**\n\t * Resolve a path relative to the url\n\t * @param {string} what\n\t * @returns {string} path\n\t */\n\trelative (what) {\n\t\treturn path.relative(what, this.directory);\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\ttoString () {\n\t\treturn this.href;\n\t}\n}\n\nexport default Url;\n"],"names":["Url","urlString","baseString","absolute","pathname","basePath","Path","what","isAbsolute","fullpath","path"],"mappings":"2HASA,MAAMA,CAAI,CACT,YAAYC,EAAWC,EAAY,CAClC,IAAIC,EAAYF,EAAU,QAAQ,KAAK,EAAI,GACvCG,EAAWH,EACXI,EAmBJ,GAjBA,KAAK,IAAM,OACX,KAAK,KAAOJ,EACZ,KAAK,SAAW,GAChB,KAAK,OAAS,GACd,KAAK,KAAO,GACZ,KAAK,KAAO,GACZ,KAAK,OAAS,GACd,KAAK,KAAOC,EAER,CAACC,GACHD,IAAe,IACf,OAAOA,GAAgB,UACvB,QAAU,OAAO,WAClB,KAAK,KAAO,OAAO,SAAS,MAIzBC,GAAY,KAAK,KACpB,GAAI,CACC,KAAK,KACR,KAAK,IAAM,IAAI,IAAIF,EAAW,KAAK,IAAI,EAEvC,KAAK,IAAM,IAAI,IAAIA,CAAS,EAE7B,KAAK,KAAO,KAAK,IAAI,KAErB,KAAK,SAAW,KAAK,IAAI,SACzB,KAAK,OAAS,KAAK,IAAI,OACvB,KAAK,KAAO,KAAK,IAAI,KACrB,KAAK,OAAS,KAAK,IAAI,OAEvBG,EAAW,KAAK,IAAI,UAAY,KAAK,IAAI,OAAS,KAAK,IAAI,OAAS,GACpE,MAAW,CAEX,KAAK,IAAM,OAEP,KAAK,OACRC,EAAW,IAAIC,EAAK,KAAK,IAAI,EAC7BF,EAAWC,EAAS,QAAQD,CAAQ,EAErC,CAGF,KAAK,KAAO,IAAIE,EAAKF,CAAQ,EAE7B,KAAK,UAAY,KAAK,KAAK,UAC3B,KAAK,SAAW,KAAK,KAAK,SAC1B,KAAK,UAAY,KAAK,KAAK,SAE3B,CAKD,MAAQ,CACP,OAAO,KAAK,IACZ,CAOD,QAASG,EAAM,CACd,IAAIC,EAAcD,EAAK,QAAQ,KAAK,EAAI,GACpCE,EAEJ,OAAID,EACID,GAGRE,EAAWC,EAAK,QAAQ,KAAK,UAAWH,CAAI,EACrC,KAAK,OAASE,EACrB,CAOD,SAAUF,EAAM,CACf,OAAOG,EAAK,SAASH,EAAM,KAAK,SAAS,CACzC,CAKD,UAAY,CACX,OAAO,KAAK,IACZ,CACF","x_google_ignoreList":[0]}