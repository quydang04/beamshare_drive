{"version":3,"file":"path.js","sources":["../../../../../../../../../node_modules/.pnpm/epubjs@0.3.93/node_modules/epubjs/src/utils/path.js"],"sourcesContent":["import path from \"path-webpack\";\n\n/**\n * Creates a Path object for parsing and manipulation of a path strings\n *\n * Uses a polyfill for Nodejs path: https://nodejs.org/api/path.html\n * @param\t{string} pathString\ta url string (relative or absolute)\n * @class\n */\nclass Path {\n\tconstructor(pathString) {\n\t\tvar protocol;\n\t\tvar parsed;\n\n\t\tprotocol = pathString.indexOf(\"://\");\n\t\tif (protocol > -1) {\n\t\t\tpathString = new URL(pathString).pathname;\n\t\t}\n\n\t\tparsed = this.parse(pathString);\n\n\t\tthis.path = pathString;\n\n\t\tif (this.isDirectory(pathString)) {\n\t\t\tthis.directory = pathString;\n\t\t} else {\n\t\t\tthis.directory = parsed.dir + \"/\";\n\t\t}\n\n\t\tthis.filename = parsed.base;\n\t\tthis.extension = parsed.ext.slice(1);\n\n\t}\n\n\t/**\n\t * Parse the path: https://nodejs.org/api/path.html#path_path_parse_path\n\t * @param\t{string} what\n\t * @returns {object}\n\t */\n\tparse (what) {\n\t\treturn path.parse(what);\n\t}\n\n\t/**\n\t * @param\t{string} what\n\t * @returns {boolean}\n\t */\n\tisAbsolute (what) {\n\t\treturn path.isAbsolute(what || this.path);\n\t}\n\n\t/**\n\t * Check if path ends with a directory\n\t * @param\t{string} what\n\t * @returns {boolean}\n\t */\n\tisDirectory (what) {\n\t\treturn (what.charAt(what.length-1) === \"/\");\n\t}\n\n\t/**\n\t * Resolve a path against the directory of the Path\n\t *\n\t * https://nodejs.org/api/path.html#path_path_resolve_paths\n\t * @param\t{string} what\n\t * @returns {string} resolved\n\t */\n\tresolve (what) {\n\t\treturn path.resolve(this.directory, what);\n\t}\n\n\t/**\n\t * Resolve a path relative to the directory of the Path\n\t *\n\t * https://nodejs.org/api/path.html#path_path_relative_from_to\n\t * @param\t{string} what\n\t * @returns {string} relative\n\t */\n\trelative (what) {\n\t\tvar isAbsolute = what && (what.indexOf(\"://\") > -1);\n\n\t\tif (isAbsolute) {\n\t\t\treturn what;\n\t\t}\n\n\t\treturn path.relative(this.directory, what);\n\t}\n\n\tsplitPath(filename) {\n\t\treturn this.splitPathRe.exec(filename).slice(1);\n\t}\n\n\t/**\n\t * Return the path string\n\t * @returns {string} path\n\t */\n\ttoString () {\n\t\treturn this.path;\n\t}\n}\n\nexport default Path;\n"],"names":["Path","pathString","protocol","parsed","what","path","isAbsolute","filename"],"mappings":"oGASA,MAAMA,CAAK,CACV,YAAYC,EAAY,CACvB,IAAIC,EACAC,EAEJD,EAAWD,EAAW,QAAQ,KAAK,EAC/BC,EAAW,KACdD,EAAa,IAAI,IAAIA,CAAU,EAAE,UAGlCE,EAAS,KAAK,MAAMF,CAAU,EAE9B,KAAK,KAAOA,EAER,KAAK,YAAYA,CAAU,EAC9B,KAAK,UAAYA,EAEjB,KAAK,UAAYE,EAAO,IAAM,IAG/B,KAAK,SAAWA,EAAO,KACvB,KAAK,UAAYA,EAAO,IAAI,MAAM,CAAC,CAEnC,CAOD,MAAOC,EAAM,CACZ,OAAOC,EAAK,MAAMD,CAAI,CACtB,CAMD,WAAYA,EAAM,CACjB,OAAOC,EAAK,WAAWD,GAAQ,KAAK,IAAI,CACxC,CAOD,YAAaA,EAAM,CAClB,OAAQA,EAAK,OAAOA,EAAK,OAAO,CAAC,IAAM,GACvC,CASD,QAASA,EAAM,CACd,OAAOC,EAAK,QAAQ,KAAK,UAAWD,CAAI,CACxC,CASD,SAAUA,EAAM,CACf,IAAIE,EAAaF,GAASA,EAAK,QAAQ,KAAK,EAAI,GAEhD,OAAIE,EACIF,EAGDC,EAAK,SAAS,KAAK,UAAWD,CAAI,CACzC,CAED,UAAUG,EAAU,CACnB,OAAO,KAAK,YAAY,KAAKA,CAAQ,EAAE,MAAM,CAAC,CAC9C,CAMD,UAAY,CACX,OAAO,KAAK,IACZ,CACF","x_google_ignoreList":[0]}