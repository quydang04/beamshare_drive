{"version":3,"file":"locations.js","sources":["../../../../../../../../node_modules/.pnpm/epubjs@0.3.93/node_modules/epubjs/src/locations.js"],"sourcesContent":["import {qs, sprint, locationOf, defer} from \"./utils/core\";\nimport Queue from \"./utils/queue\";\nimport EpubCFI from \"./epubcfi\";\nimport { EVENTS } from \"./utils/constants\";\nimport EventEmitter from \"event-emitter\";\n\n/**\n * Find Locations for a Book\n * @param {Spine} spine\n * @param {request} request\n * @param {number} [pause=100]\n */\nclass Locations {\n\tconstructor(spine, request, pause) {\n\t\tthis.spine = spine;\n\t\tthis.request = request;\n\t\tthis.pause = pause || 100;\n\n\t\tthis.q = new Queue(this);\n\t\tthis.epubcfi = new EpubCFI();\n\n\t\tthis._locations = [];\n\t\tthis._locationsWords = [];\n\t\tthis.total = 0;\n\n\t\tthis.break = 150;\n\n\t\tthis._current = 0;\n\n\t\tthis._wordCounter = 0;\n\n\t\tthis.currentLocation = '';\n\t\tthis._currentCfi ='';\n\t\tthis.processingTimeout = undefined;\n\t}\n\n\t/**\n\t * Load all of sections in the book to generate locations\n\t * @param  {int} chars how many chars to split on\n\t * @return {Promise<Array<string>>} locations\n\t */\n\tgenerate(chars) {\n\n\t\tif (chars) {\n\t\t\tthis.break = chars;\n\t\t}\n\n\t\tthis.q.pause();\n\n\t\tthis.spine.each(function(section) {\n\t\t\tif (section.linear) {\n\t\t\t\tthis.q.enqueue(this.process.bind(this), section);\n\t\t\t}\n\t\t}.bind(this));\n\n\t\treturn this.q.run().then(function() {\n\t\t\tthis.total = this._locations.length - 1;\n\n\t\t\tif (this._currentCfi) {\n\t\t\t\tthis.currentLocation = this._currentCfi;\n\t\t\t}\n\n\t\t\treturn this._locations;\n\t\t\t// console.log(this.percentage(this.book.rendition.location.start), this.percentage(this.book.rendition.location.end));\n\t\t}.bind(this));\n\n\t}\n\n\tcreateRange () {\n\t\treturn {\n\t\t\tstartContainer: undefined,\n\t\t\tstartOffset: undefined,\n\t\t\tendContainer: undefined,\n\t\t\tendOffset: undefined\n\t\t};\n\t}\n\n\tprocess(section) {\n\n\t\treturn section.load(this.request)\n\t\t\t.then(function(contents) {\n\t\t\t\tvar completed = new defer();\n\t\t\t\tvar locations = this.parse(contents, section.cfiBase);\n\t\t\t\tthis._locations = this._locations.concat(locations);\n\n\t\t\t\tsection.unload();\n\n\t\t\t\tthis.processingTimeout = setTimeout(() => completed.resolve(locations), this.pause);\n\t\t\t\treturn completed.promise;\n\t\t\t}.bind(this));\n\n\t}\n\n\tparse(contents, cfiBase, chars) {\n\t\tvar locations = [];\n\t\tvar range;\n\t\tvar doc = contents.ownerDocument;\n\t\tvar body = qs(doc, \"body\");\n\t\tvar counter = 0;\n\t\tvar prev;\n\t\tvar _break = chars || this.break;\n\t\tvar parser = function(node) {\n\t\t\tvar len = node.length;\n\t\t\tvar dist;\n\t\t\tvar pos = 0;\n\n\t\t\tif (node.textContent.trim().length === 0) {\n\t\t\t\treturn false; // continue\n\t\t\t}\n\n\t\t\t// Start range\n\t\t\tif (counter == 0) {\n\t\t\t\trange = this.createRange();\n\t\t\t\trange.startContainer = node;\n\t\t\t\trange.startOffset = 0;\n\t\t\t}\n\n\t\t\tdist = _break - counter;\n\n\t\t\t// Node is smaller than a break,\n\t\t\t// skip over it\n\t\t\tif(dist > len){\n\t\t\t\tcounter += len;\n\t\t\t\tpos = len;\n\t\t\t}\n\n\n\t\t\twhile (pos < len) {\n\t\t\t\tdist = _break - counter;\n\n\t\t\t\tif (counter === 0) {\n\t\t\t\t\t// Start new range\n\t\t\t\t\tpos += 1;\n\t\t\t\t\trange = this.createRange();\n\t\t\t\t\trange.startContainer = node;\n\t\t\t\t\trange.startOffset = pos;\n\t\t\t\t}\n\n\t\t\t\t// pos += dist;\n\n\t\t\t\t// Gone over\n\t\t\t\tif(pos + dist >= len){\n\t\t\t\t\t// Continue counter for next node\n\t\t\t\t\tcounter += len - pos;\n\t\t\t\t\t// break\n\t\t\t\t\tpos = len;\n\t\t\t\t// At End\n\t\t\t\t} else {\n\t\t\t\t\t// Advance pos\n\t\t\t\t\tpos += dist;\n\n\t\t\t\t\t// End the previous range\n\t\t\t\t\trange.endContainer = node;\n\t\t\t\t\trange.endOffset = pos;\n\t\t\t\t\t// cfi = section.cfiFromRange(range);\n\t\t\t\t\tlet cfi = new EpubCFI(range, cfiBase).toString();\n\t\t\t\t\tlocations.push(cfi);\n\t\t\t\t\tcounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprev = node;\n\t\t};\n\n\t\tsprint(body, parser.bind(this));\n\n\t\t// Close remaining\n\t\tif (range && range.startContainer && prev) {\n\t\t\trange.endContainer = prev;\n\t\t\trange.endOffset = prev.length;\n\t\t\tlet cfi = new EpubCFI(range, cfiBase).toString();\n\t\t\tlocations.push(cfi);\n\t\t\tcounter = 0;\n\t\t}\n\n\t\treturn locations;\n\t}\n\n\n\t/**\n\t * Load all of sections in the book to generate locations\n\t * @param  {string} startCfi start position\n\t * @param  {int} wordCount how many words to split on\n\t * @param  {int} count result count\n\t * @return {object} locations\n\t */\n\tgenerateFromWords(startCfi, wordCount, count) {\n\t\tvar start = startCfi ? new EpubCFI(startCfi) : undefined;\n\t\tthis.q.pause();\n\t\tthis._locationsWords = [];\n\t\tthis._wordCounter = 0;\n\n\t\tthis.spine.each(function(section) {\n\t\t\tif (section.linear) {\n\t\t\t\tif (start) {\n\t\t\t\t\tif (section.index >= start.spinePos) {\n\t\t\t\t\t\tthis.q.enqueue(this.processWords.bind(this), section, wordCount, start, count);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.q.enqueue(this.processWords.bind(this), section, wordCount, start, count);\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this));\n\n\t\treturn this.q.run().then(function() {\n\t\t\tif (this._currentCfi) {\n\t\t\t\tthis.currentLocation = this._currentCfi;\n\t\t\t}\n\n\t\t\treturn this._locationsWords;\n\t\t}.bind(this));\n\n\t}\n\n\tprocessWords(section, wordCount, startCfi, count) {\n\t\tif (count && this._locationsWords.length >= count) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn section.load(this.request)\n\t\t\t.then(function(contents) {\n\t\t\t\tvar completed = new defer();\n\t\t\t\tvar locations = this.parseWords(contents, section, wordCount, startCfi);\n\t\t\t\tvar remainingCount = count - this._locationsWords.length;\n\t\t\t\tthis._locationsWords = this._locationsWords.concat(locations.length >= count ? locations.slice(0, remainingCount) : locations);\n\n\t\t\t\tsection.unload();\n\n\t\t\t\tthis.processingTimeout = setTimeout(() => completed.resolve(locations), this.pause);\n\t\t\t\treturn completed.promise;\n\t\t\t}.bind(this));\n\t}\n\n\t//http://stackoverflow.com/questions/18679576/counting-words-in-string\n\tcountWords(s) {\n\t\ts = s.replace(/(^\\s*)|(\\s*$)/gi, \"\");//exclude  start and end white-space\n\t\ts = s.replace(/[ ]{2,}/gi, \" \");//2 or more space to 1\n\t\ts = s.replace(/\\n /, \"\\n\"); // exclude newline with a start spacing\n\t\treturn s.split(\" \").length;\n\t}\n\n\tparseWords(contents, section, wordCount, startCfi) {\n\t\tvar cfiBase = section.cfiBase;\n\t\tvar locations = [];\n\t\tvar doc = contents.ownerDocument;\n\t\tvar body = qs(doc, \"body\");\n\t\tvar prev;\n\t\tvar _break = wordCount;\n\t\tvar foundStartNode = startCfi ? startCfi.spinePos !== section.index : true;\n\t\tvar startNode;\n\t\tif (startCfi && section.index === startCfi.spinePos) {\n\t\t\tstartNode = startCfi.findNode(startCfi.range ? startCfi.path.steps.concat(startCfi.start.steps) : startCfi.path.steps, contents.ownerDocument);\n\t\t}\n\t\tvar parser = function(node) {\n\t\t\tif (!foundStartNode) {\n\t\t\t\tif (node === startNode) {\n\t\t\t\t\tfoundStartNode = true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.textContent.length < 10) {\n\t\t\t\tif (node.textContent.trim().length === 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar len  = this.countWords(node.textContent);\n\t\t\tvar dist;\n\t\t\tvar pos = 0;\n\n\t\t\tif (len === 0) {\n\t\t\t\treturn false; // continue\n\t\t\t}\n\n\t\t\tdist = _break - this._wordCounter;\n\n\t\t\t// Node is smaller than a break,\n\t\t\t// skip over it\n\t\t\tif (dist > len) {\n\t\t\t\tthis._wordCounter += len;\n\t\t\t\tpos = len;\n\t\t\t}\n\n\n\t\t\twhile (pos < len) {\n\t\t\t\tdist = _break - this._wordCounter;\n\n\t\t\t\t// Gone over\n\t\t\t\tif (pos + dist >= len) {\n\t\t\t\t\t// Continue counter for next node\n\t\t\t\t\tthis._wordCounter += len - pos;\n\t\t\t\t\t// break\n\t\t\t\t\tpos = len;\n\t\t\t\t\t// At End\n\t\t\t\t} else {\n\t\t\t\t\t// Advance pos\n\t\t\t\t\tpos += dist;\n\n\t\t\t\t\tlet cfi = new EpubCFI(node, cfiBase);\n\t\t\t\t\tlocations.push({ cfi: cfi.toString(), wordCount: this._wordCounter });\n\t\t\t\t\tthis._wordCounter = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprev = node;\n\t\t};\n\n\t\tsprint(body, parser.bind(this));\n\n\t\treturn locations;\n\t}\n\n\t/**\n\t * Get a location from an EpubCFI\n\t * @param {EpubCFI} cfi\n\t * @return {number}\n\t */\n\tlocationFromCfi(cfi){\n\t\tlet loc;\n\t\tif (EpubCFI.prototype.isCfiString(cfi)) {\n\t\t\tcfi = new EpubCFI(cfi);\n\t\t}\n\t\t// Check if the location has not been set yet\n\t\tif(this._locations.length === 0) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tloc = locationOf(cfi, this._locations, this.epubcfi.compare);\n\n\t\tif (loc > this.total) {\n\t\t\treturn this.total;\n\t\t}\n\n\t\treturn loc;\n\t}\n\n\t/**\n\t * Get a percentage position in locations from an EpubCFI\n\t * @param {EpubCFI} cfi\n\t * @return {number}\n\t */\n\tpercentageFromCfi(cfi) {\n\t\tif(this._locations.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\t// Find closest cfi\n\t\tvar loc = this.locationFromCfi(cfi);\n\t\t// Get percentage in total\n\t\treturn this.percentageFromLocation(loc);\n\t}\n\n\t/**\n\t * Get a percentage position from a location index\n\t * @param {number} location\n\t * @return {number}\n\t */\n\tpercentageFromLocation(loc) {\n\t\tif (!loc || !this.total) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn (loc / this.total);\n\t}\n\n\t/**\n\t * Get an EpubCFI from location index\n\t * @param {number} loc\n\t * @return {EpubCFI} cfi\n\t */\n\tcfiFromLocation(loc){\n\t\tvar cfi = -1;\n\t\t// check that pg is an int\n\t\tif(typeof loc != \"number\"){\n\t\t\tloc = parseInt(loc);\n\t\t}\n\n\t\tif(loc >= 0 && loc < this._locations.length) {\n\t\t\tcfi = this._locations[loc];\n\t\t}\n\n\t\treturn cfi;\n\t}\n\n\t/**\n\t * Get an EpubCFI from location percentage\n\t * @param {number} percentage\n\t * @return {EpubCFI} cfi\n\t */\n\tcfiFromPercentage(percentage){\n\t\tlet loc;\n\t\tif (percentage > 1) {\n\t\t\tconsole.warn(\"Normalize cfiFromPercentage value to between 0 - 1\");\n\t\t}\n\n\t\t// Make sure 1 goes to very end\n\t\tif (percentage >= 1) {\n\t\t\tlet cfi = new EpubCFI(this._locations[this.total]);\n\t\t\tcfi.collapse();\n\t\t\treturn cfi.toString();\n\t\t}\n\n\t\tloc = Math.ceil(this.total * percentage);\n\t\treturn this.cfiFromLocation(loc);\n\t}\n\n\t/**\n\t * Load locations from JSON\n\t * @param {json} locations\n\t */\n\tload(locations){\n\t\tif (typeof locations === \"string\") {\n\t\t\tthis._locations = JSON.parse(locations);\n\t\t} else {\n\t\t\tthis._locations = locations;\n\t\t}\n\t\tthis.total = this._locations.length - 1;\n\t\treturn this._locations;\n\t}\n\n\t/**\n\t * Save locations to JSON\n\t * @return {json}\n\t */\n\tsave(){\n\t\treturn JSON.stringify(this._locations);\n\t}\n\n\tgetCurrent(){\n\t\treturn this._current;\n\t}\n\n\tsetCurrent(curr){\n\t\tvar loc;\n\n\t\tif(typeof curr == \"string\"){\n\t\t\tthis._currentCfi = curr;\n\t\t} else if (typeof curr == \"number\") {\n\t\t\tthis._current = curr;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\n\t\tif(this._locations.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif(typeof curr == \"string\"){\n\t\t\tloc = this.locationFromCfi(curr);\n\t\t\tthis._current = loc;\n\t\t} else {\n\t\t\tloc = curr;\n\t\t}\n\n\t\tthis.emit(EVENTS.LOCATIONS.CHANGED, {\n\t\t\tpercentage: this.percentageFromLocation(loc)\n\t\t});\n\t}\n\n\t/**\n\t * Get the current location\n\t */\n\tget currentLocation() {\n\t\treturn this._current;\n\t}\n\n\t/**\n\t * Set the current location\n\t */\n\tset currentLocation(curr) {\n\t\tthis.setCurrent(curr);\n\t}\n\n\t/**\n\t * Locations length\n\t */\n\tlength () {\n\t\treturn this._locations.length;\n\t}\n\n\tdestroy () {\n\t\tthis.spine = undefined;\n\t\tthis.request = undefined;\n\t\tthis.pause = undefined;\n\n\t\tthis.q.stop();\n\t\tthis.q = undefined;\n\t\tthis.epubcfi = undefined;\n\n\t\tthis._locations = undefined\n\t\tthis.total = undefined;\n\n\t\tthis.break = undefined;\n\t\tthis._current = undefined;\n\n\t\tthis.currentLocation = undefined;\n\t\tthis._currentCfi = undefined;\n\t\tclearTimeout(this.processingTimeout);\n\t}\n}\n\nEventEmitter(Locations.prototype);\n\nexport default Locations;\n"],"names":["Locations","spine","request","pause","Queue","EpubCFI","chars","section","contents","completed","defer","locations","cfiBase","range","doc","body","qs","counter","prev","_break","parser","node","len","dist","pos","cfi","sprint","startCfi","wordCount","count","start","remainingCount","s","foundStartNode","startNode","loc","locationOf","percentage","curr","EVENTS","EventEmitter"],"mappings":"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","x_google_ignoreList":[0]}