{"version":3,"file":"path.js","sources":["../../../../../../../node_modules/.pnpm/path-webpack@0.0.3/node_modules/path-webpack/path.js"],"sourcesContent":["'use strict';\n\nif (!process) {\n  var process = {\n    \"cwd\" : function () { return '/' }\n  };\n}\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + path);\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47/*/*/)\n      break;\n    else\n      code = 47/*/*/;\n    if (code === 47/*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 ||\n            res.charCodeAt(res.length - 1) !== 46/*.*/ ||\n            res.charCodeAt(res.length - 2) !== 46/*.*/) {\n          if (res.length > 2) {\n            var start = res.length - 1;\n            var j = start;\n            for (; j >= 0; --j) {\n              if (res.charCodeAt(j) === 47/*/*/)\n                break;\n            }\n            if (j !== start) {\n              if (j === -1)\n                res = '';\n              else\n                res = res.slice(0, j);\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46/*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base ||\n    ((pathObject.name || '') + (pathObject.ext || ''));\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47/*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0)\n      return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47/*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47/*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute)\n      path = '.';\n    if (path.length > 0 && trailingSeparator)\n      path += '/';\n\n    if (isAbsolute)\n      return '/' + path;\n    return path;\n  },\n\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47/*/*/;\n  },\n\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to)\n      return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to)\n      return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47/*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = (fromEnd - fromStart);\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47/*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = (toEnd - toStart);\n\n    // Compare paths to find the longest common path from root\n    var length = (fromLen < toLen ? fromLen : toLen);\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47/*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47/*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47/*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47/*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47/*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0)\n      return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = (code === 47/*/*/);\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47/*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1)\n      return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1)\n      return '//';\n    return path.slice(0, end);\n  },\n\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string')\n      throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path)\n        return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47/*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end)\n        end = firstNonSlashEnd;\n      else if (end === -1)\n        end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47/*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            start = i + 1;\n            break;\n          }\n        } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1)\n        return '';\n      return path.slice(start, end);\n    }\n  },\n\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47/*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46/*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 &&\n         startDot === end - 1 &&\n         startDot === startPart + 1)) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError(\n        'Parameter \"pathObject\" must be an object, not ' + typeof(pathObject)\n      );\n    }\n    return _format('/', pathObject);\n  },\n\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0)\n      return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = (code === 47/*/*/);\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47/*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46/*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 ||\n        end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        (preDotState === 1 &&\n         startDot === end - 1 &&\n         startDot === startPart + 1)) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute)\n          ret.base = ret.name = path.slice(1, end);\n        else\n          ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0)\n      ret.dir = path.slice(0, startPart - 1);\n    else if (isAbsolute)\n      ret.dir = '/';\n\n    return ret;\n  },\n\n\n  sep: '/',\n  delimiter: ':',\n  posix: null\n};\n\n\nmodule.exports = posix;\n"],"names":["process","assertPath","path","normalizeStringPosix","allowAboveRoot","res","lastSlash","dots","code","i","start","j","_format","sep","pathObject","dir","base","posix","resolvedPath","resolvedAbsolute","cwd","isAbsolute","trailingSeparator","joined","arg","from","to","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","length","lastCommonSep","fromCode","toCode","out","hasRoot","end","matchedSlash","ext","extIdx","firstNonSlashEnd","startDot","startPart","preDotState","ret"],"mappings":"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","x_google_ignoreList":[0]}