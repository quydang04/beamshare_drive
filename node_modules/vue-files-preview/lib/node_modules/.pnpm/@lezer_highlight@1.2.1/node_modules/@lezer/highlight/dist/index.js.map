{"version":3,"file":"index.js","sources":["../../../../../../../../../node_modules/.pnpm/@lezer+highlight@1.2.1/node_modules/@lezer/highlight/dist/index.js"],"sourcesContent":["import { NodeProp } from '@lezer/common';\n\nlet nextTagID = 0;\n/**\nHighlighting tags are markers that denote a highlighting category.\nThey are [associated](#highlight.styleTags) with parts of a syntax\ntree by a language mode, and then mapped to an actual CSS style by\na [highlighter](#highlight.Highlighter).\n\nBecause syntax tree node types and highlight styles have to be\nable to talk the same language, CodeMirror uses a mostly _closed_\n[vocabulary](#highlight.tags) of syntax tags (as opposed to\ntraditional open string-based systems, which make it hard for\nhighlighting themes to cover all the tokens produced by the\nvarious languages).\n\nIt _is_ possible to [define](#highlight.Tag^define) your own\nhighlighting tags for system-internal use (where you control both\nthe language package and the highlighter), but such tags will not\nbe picked up by regular highlighters (though you can derive them\nfrom standard tags to allow highlighters to fall back to those).\n*/\nclass Tag {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The optional name of the base tag @internal\n    */\n    name, \n    /**\n    The set of this tag and all its parent tags, starting with\n    this one itself and sorted in order of decreasing specificity.\n    */\n    set, \n    /**\n    The base unmodified tag that this one is based on, if it's\n    modified @internal\n    */\n    base, \n    /**\n    The modifiers applied to this.base @internal\n    */\n    modified) {\n        this.name = name;\n        this.set = set;\n        this.base = base;\n        this.modified = modified;\n        /**\n        @internal\n        */\n        this.id = nextTagID++;\n    }\n    toString() {\n        let { name } = this;\n        for (let mod of this.modified)\n            if (mod.name)\n                name = `${mod.name}(${name})`;\n        return name;\n    }\n    static define(nameOrParent, parent) {\n        let name = typeof nameOrParent == \"string\" ? nameOrParent : \"?\";\n        if (nameOrParent instanceof Tag)\n            parent = nameOrParent;\n        if (parent === null || parent === void 0 ? void 0 : parent.base)\n            throw new Error(\"Can not derive from a modified tag\");\n        let tag = new Tag(name, [], null, []);\n        tag.set.push(tag);\n        if (parent)\n            for (let t of parent.set)\n                tag.set.push(t);\n        return tag;\n    }\n    /**\n    Define a tag _modifier_, which is a function that, given a tag,\n    will return a tag that is a subtag of the original. Applying the\n    same modifier to a twice tag will return the same value (`m1(t1)\n    == m1(t1)`) and applying multiple modifiers will, regardless or\n    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n    \n    When multiple modifiers are applied to a given base tag, each\n    smaller set of modifiers is registered as a parent, so that for\n    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n    `m1(m3(t1)`, and so on.\n    */\n    static defineModifier(name) {\n        let mod = new Modifier(name);\n        return (tag) => {\n            if (tag.modified.indexOf(mod) > -1)\n                return tag;\n            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));\n        };\n    }\n}\nlet nextModifierID = 0;\nclass Modifier {\n    constructor(name) {\n        this.name = name;\n        this.instances = [];\n        this.id = nextModifierID++;\n    }\n    static get(base, mods) {\n        if (!mods.length)\n            return base;\n        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));\n        if (exists)\n            return exists;\n        let set = [], tag = new Tag(base.name, set, base, mods);\n        for (let m of mods)\n            m.instances.push(tag);\n        let configs = powerSet(mods);\n        for (let parent of base.set)\n            if (!parent.modified.length)\n                for (let config of configs)\n                    set.push(Modifier.get(parent, config));\n        return tag;\n    }\n}\nfunction sameArray(a, b) {\n    return a.length == b.length && a.every((x, i) => x == b[i]);\n}\nfunction powerSet(array) {\n    let sets = [[]];\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0, e = sets.length; j < e; j++) {\n            sets.push(sets[j].concat(array[i]));\n        }\n    }\n    return sets.sort((a, b) => b.length - a.length);\n}\n/**\nThis function is used to add a set of tags to a language syntax\nvia [`NodeSet.extend`](#common.NodeSet.extend) or\n[`LRParser.configure`](#lr.LRParser.configure).\n\nThe argument object maps node selectors to [highlighting\ntags](#highlight.Tag) or arrays of tags.\n\nNode selectors may hold one or more (space-separated) node paths.\nSuch a path can be a [node name](#common.NodeType.name), or\nmultiple node names (or `*` wildcards) separated by slash\ncharacters, as in `\"Block/Declaration/VariableName\"`. Such a path\nmatches the final node but only if its direct parent nodes are the\nother nodes mentioned. A `*` in such a path matches any parent,\nbut only a single levelâ€”wildcards that match multiple parents\naren't supported, both for efficiency reasons and because Lezer\ntrees make it rather hard to reason about what they would match.)\n\nA path can be ended with `/...` to indicate that the tag assigned\nto the node should also apply to all child nodes, even if they\nmatch their own style (by default, only the innermost style is\nused).\n\nWhen a path ends in `!`, as in `Attribute!`, no further matching\nhappens for the node's child nodes, and the entire node gets the\ngiven style.\n\nIn this notation, node names that contain `/`, `!`, `*`, or `...`\nmust be quoted as JSON strings.\n\nFor example:\n\n```javascript\nparser.withProps(\n  styleTags({\n    // Style Number and BigNumber nodes\n    \"Number BigNumber\": tags.number,\n    // Style Escape nodes whose parent is String\n    \"String/Escape\": tags.escape,\n    // Style anything inside Attributes nodes\n    \"Attributes!\": tags.meta,\n    // Add a style to all content inside Italic nodes\n    \"Italic/...\": tags.emphasis,\n    // Style InvalidString nodes as both `string` and `invalid`\n    \"InvalidString\": [tags.string, tags.invalid],\n    // Style the node named \"/\" as punctuation\n    '\"/\"': tags.punctuation\n  })\n)\n```\n*/\nfunction styleTags(spec) {\n    let byName = Object.create(null);\n    for (let prop in spec) {\n        let tags = spec[prop];\n        if (!Array.isArray(tags))\n            tags = [tags];\n        for (let part of prop.split(\" \"))\n            if (part) {\n                let pieces = [], mode = 2 /* Mode.Normal */, rest = part;\n                for (let pos = 0;;) {\n                    if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\n                        mode = 1 /* Mode.Inherit */;\n                        break;\n                    }\n                    let m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\n                    if (!m)\n                        throw new RangeError(\"Invalid path: \" + part);\n                    pieces.push(m[0] == \"*\" ? \"\" : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\n                    pos += m[0].length;\n                    if (pos == part.length)\n                        break;\n                    let next = part[pos++];\n                    if (pos == part.length && next == \"!\") {\n                        mode = 0 /* Mode.Opaque */;\n                        break;\n                    }\n                    if (next != \"/\")\n                        throw new RangeError(\"Invalid path: \" + part);\n                    rest = part.slice(pos);\n                }\n                let last = pieces.length - 1, inner = pieces[last];\n                if (!inner)\n                    throw new RangeError(\"Invalid path: \" + part);\n                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);\n                byName[inner] = rule.sort(byName[inner]);\n            }\n    }\n    return ruleNodeProp.add(byName);\n}\nconst ruleNodeProp = new NodeProp();\nclass Rule {\n    constructor(tags, mode, context, next) {\n        this.tags = tags;\n        this.mode = mode;\n        this.context = context;\n        this.next = next;\n    }\n    get opaque() { return this.mode == 0 /* Mode.Opaque */; }\n    get inherit() { return this.mode == 1 /* Mode.Inherit */; }\n    sort(other) {\n        if (!other || other.depth < this.depth) {\n            this.next = other;\n            return this;\n        }\n        other.next = this.sort(other.next);\n        return other;\n    }\n    get depth() { return this.context ? this.context.length : 0; }\n}\nRule.empty = new Rule([], 2 /* Mode.Normal */, null);\n/**\nDefine a [highlighter](#highlight.Highlighter) from an array of\ntag/class pairs. Classes associated with more specific tags will\ntake precedence.\n*/\nfunction tagHighlighter(tags, options) {\n    let map = Object.create(null);\n    for (let style of tags) {\n        if (!Array.isArray(style.tag))\n            map[style.tag.id] = style.class;\n        else\n            for (let tag of style.tag)\n                map[tag.id] = style.class;\n    }\n    let { scope, all = null } = options || {};\n    return {\n        style: (tags) => {\n            let cls = all;\n            for (let tag of tags) {\n                for (let sub of tag.set) {\n                    let tagClass = map[sub.id];\n                    if (tagClass) {\n                        cls = cls ? cls + \" \" + tagClass : tagClass;\n                        break;\n                    }\n                }\n            }\n            return cls;\n        },\n        scope\n    };\n}\nfunction highlightTags(highlighters, tags) {\n    let result = null;\n    for (let highlighter of highlighters) {\n        let value = highlighter.style(tags);\n        if (value)\n            result = result ? result + \" \" + value : value;\n    }\n    return result;\n}\n/**\nHighlight the given [tree](#common.Tree) with the given\n[highlighter](#highlight.Highlighter). Often, the higher-level\n[`highlightCode`](#highlight.highlightCode) function is easier to\nuse.\n*/\nfunction highlightTree(tree, highlighter, \n/**\nAssign styling to a region of the text. Will be called, in order\nof position, for any ranges where more than zero classes apply.\n`classes` is a space separated string of CSS classes.\n*/\nputStyle, \n/**\nThe start of the range to highlight.\n*/\nfrom = 0, \n/**\nThe end of the range.\n*/\nto = tree.length) {\n    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);\n    builder.highlightRange(tree.cursor(), from, to, \"\", builder.highlighters);\n    builder.flush(to);\n}\n/**\nHighlight the given tree with the given highlighter, calling\n`putText` for every piece of text, either with a set of classes or\nwith the empty string when unstyled, and `putBreak` for every line\nbreak.\n*/\nfunction highlightCode(code, tree, highlighter, putText, putBreak, from = 0, to = code.length) {\n    let pos = from;\n    function writeTo(p, classes) {\n        if (p <= pos)\n            return;\n        for (let text = code.slice(pos, p), i = 0;;) {\n            let nextBreak = text.indexOf(\"\\n\", i);\n            let upto = nextBreak < 0 ? text.length : nextBreak;\n            if (upto > i)\n                putText(text.slice(i, upto), classes);\n            if (nextBreak < 0)\n                break;\n            putBreak();\n            i = nextBreak + 1;\n        }\n        pos = p;\n    }\n    highlightTree(tree, highlighter, (from, to, classes) => {\n        writeTo(from, \"\");\n        writeTo(to, classes);\n    }, from, to);\n    writeTo(to, \"\");\n}\nclass HighlightBuilder {\n    constructor(at, highlighters, span) {\n        this.at = at;\n        this.highlighters = highlighters;\n        this.span = span;\n        this.class = \"\";\n    }\n    startSpan(at, cls) {\n        if (cls != this.class) {\n            this.flush(at);\n            if (at > this.at)\n                this.at = at;\n            this.class = cls;\n        }\n    }\n    flush(to) {\n        if (to > this.at && this.class)\n            this.span(this.at, to, this.class);\n    }\n    highlightRange(cursor, from, to, inheritedClass, highlighters) {\n        let { type, from: start, to: end } = cursor;\n        if (start >= to || end <= from)\n            return;\n        if (type.isTop)\n            highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));\n        let cls = inheritedClass;\n        let rule = getStyleTags(cursor) || Rule.empty;\n        let tagCls = highlightTags(highlighters, rule.tags);\n        if (tagCls) {\n            if (cls)\n                cls += \" \";\n            cls += tagCls;\n            if (rule.mode == 1 /* Mode.Inherit */)\n                inheritedClass += (inheritedClass ? \" \" : \"\") + tagCls;\n        }\n        this.startSpan(Math.max(from, start), cls);\n        if (rule.opaque)\n            return;\n        let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);\n        if (mounted && mounted.overlay) {\n            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);\n            let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));\n            let hasChild = cursor.firstChild();\n            for (let i = 0, pos = start;; i++) {\n                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;\n                let nextPos = next ? next.from + start : end;\n                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);\n                if (rangeFrom < rangeTo && hasChild) {\n                    while (cursor.from < rangeTo) {\n                        this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);\n                        this.startSpan(Math.min(rangeTo, cursor.to), cls);\n                        if (cursor.to >= nextPos || !cursor.nextSibling())\n                            break;\n                    }\n                }\n                if (!next || nextPos > to)\n                    break;\n                pos = next.to + start;\n                if (pos > from) {\n                    this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), \"\", innerHighlighters);\n                    this.startSpan(Math.min(to, pos), cls);\n                }\n            }\n            if (hasChild)\n                cursor.parent();\n        }\n        else if (cursor.firstChild()) {\n            if (mounted)\n                inheritedClass = \"\";\n            do {\n                if (cursor.to <= from)\n                    continue;\n                if (cursor.from >= to)\n                    break;\n                this.highlightRange(cursor, from, to, inheritedClass, highlighters);\n                this.startSpan(Math.min(to, cursor.to), cls);\n            } while (cursor.nextSibling());\n            cursor.parent();\n        }\n    }\n}\n/**\nMatch a syntax node's [highlight rules](#highlight.styleTags). If\nthere's a match, return its set of tags, and whether it is\nopaque (uses a `!`) or applies to all child nodes (`/...`).\n*/\nfunction getStyleTags(node) {\n    let rule = node.type.prop(ruleNodeProp);\n    while (rule && rule.context && !node.matchContext(rule.context))\n        rule = rule.next;\n    return rule || null;\n}\nconst t = Tag.define;\nconst comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();\n/**\nThe default set of highlighting [tags](#highlight.Tag).\n\nThis collection is heavily biased towards programming languages,\nand necessarily incomplete. A full ontology of syntactic\nconstructs would fill a stack of books, and be impractical to\nwrite themes for. So try to make do with this set. If all else\nfails, [open an\nissue](https://github.com/codemirror/codemirror.next) to propose a\nnew tag, or [define](#highlight.Tag^define) a local custom tag for\nyour use case.\n\nNote that it is not obligatory to always attach the most specific\ntag possible to an elementâ€”if your grammar can't easily\ndistinguish a certain type of element (such as a local variable),\nit is okay to style it as its more general variant (a variable).\n\nFor tags that extend some parent tag, the documentation links to\nthe parent.\n*/\nconst tags = {\n    /**\n    A comment.\n    */\n    comment,\n    /**\n    A line [comment](#highlight.tags.comment).\n    */\n    lineComment: t(comment),\n    /**\n    A block [comment](#highlight.tags.comment).\n    */\n    blockComment: t(comment),\n    /**\n    A documentation [comment](#highlight.tags.comment).\n    */\n    docComment: t(comment),\n    /**\n    Any kind of identifier.\n    */\n    name,\n    /**\n    The [name](#highlight.tags.name) of a variable.\n    */\n    variableName: t(name),\n    /**\n    A type [name](#highlight.tags.name).\n    */\n    typeName: typeName,\n    /**\n    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n    */\n    tagName: t(typeName),\n    /**\n    A property or field [name](#highlight.tags.name).\n    */\n    propertyName: propertyName,\n    /**\n    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).\n    */\n    attributeName: t(propertyName),\n    /**\n    The [name](#highlight.tags.name) of a class.\n    */\n    className: t(name),\n    /**\n    A label [name](#highlight.tags.name).\n    */\n    labelName: t(name),\n    /**\n    A namespace [name](#highlight.tags.name).\n    */\n    namespace: t(name),\n    /**\n    The [name](#highlight.tags.name) of a macro.\n    */\n    macroName: t(name),\n    /**\n    A literal value.\n    */\n    literal,\n    /**\n    A string [literal](#highlight.tags.literal).\n    */\n    string,\n    /**\n    A documentation [string](#highlight.tags.string).\n    */\n    docString: t(string),\n    /**\n    A character literal (subtag of [string](#highlight.tags.string)).\n    */\n    character: t(string),\n    /**\n    An attribute value (subtag of [string](#highlight.tags.string)).\n    */\n    attributeValue: t(string),\n    /**\n    A number [literal](#highlight.tags.literal).\n    */\n    number,\n    /**\n    An integer [number](#highlight.tags.number) literal.\n    */\n    integer: t(number),\n    /**\n    A floating-point [number](#highlight.tags.number) literal.\n    */\n    float: t(number),\n    /**\n    A boolean [literal](#highlight.tags.literal).\n    */\n    bool: t(literal),\n    /**\n    Regular expression [literal](#highlight.tags.literal).\n    */\n    regexp: t(literal),\n    /**\n    An escape [literal](#highlight.tags.literal), for example a\n    backslash escape in a string.\n    */\n    escape: t(literal),\n    /**\n    A color [literal](#highlight.tags.literal).\n    */\n    color: t(literal),\n    /**\n    A URL [literal](#highlight.tags.literal).\n    */\n    url: t(literal),\n    /**\n    A language keyword.\n    */\n    keyword,\n    /**\n    The [keyword](#highlight.tags.keyword) for the self or this\n    object.\n    */\n    self: t(keyword),\n    /**\n    The [keyword](#highlight.tags.keyword) for null.\n    */\n    null: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) denoting some atomic value.\n    */\n    atom: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that represents a unit.\n    */\n    unit: t(keyword),\n    /**\n    A modifier [keyword](#highlight.tags.keyword).\n    */\n    modifier: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that acts as an operator.\n    */\n    operatorKeyword: t(keyword),\n    /**\n    A control-flow related [keyword](#highlight.tags.keyword).\n    */\n    controlKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that defines something.\n    */\n    definitionKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) related to defining or\n    interfacing with modules.\n    */\n    moduleKeyword: t(keyword),\n    /**\n    An operator.\n    */\n    operator,\n    /**\n    An [operator](#highlight.tags.operator) that dereferences something.\n    */\n    derefOperator: t(operator),\n    /**\n    Arithmetic-related [operator](#highlight.tags.operator).\n    */\n    arithmeticOperator: t(operator),\n    /**\n    Logical [operator](#highlight.tags.operator).\n    */\n    logicOperator: t(operator),\n    /**\n    Bit [operator](#highlight.tags.operator).\n    */\n    bitwiseOperator: t(operator),\n    /**\n    Comparison [operator](#highlight.tags.operator).\n    */\n    compareOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that updates its operand.\n    */\n    updateOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that defines something.\n    */\n    definitionOperator: t(operator),\n    /**\n    Type-related [operator](#highlight.tags.operator).\n    */\n    typeOperator: t(operator),\n    /**\n    Control-flow [operator](#highlight.tags.operator).\n    */\n    controlOperator: t(operator),\n    /**\n    Program or markup punctuation.\n    */\n    punctuation,\n    /**\n    [Punctuation](#highlight.tags.punctuation) that separates\n    things.\n    */\n    separator: t(punctuation),\n    /**\n    Bracket-style [punctuation](#highlight.tags.punctuation).\n    */\n    bracket,\n    /**\n    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n    tokens).\n    */\n    angleBracket: t(bracket),\n    /**\n    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n    tokens).\n    */\n    squareBracket: t(bracket),\n    /**\n    Parentheses (usually `(` and `)` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    paren: t(bracket),\n    /**\n    Braces (usually `{` and `}` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    brace: t(bracket),\n    /**\n    Content, for example plain text in XML or markup documents.\n    */\n    content,\n    /**\n    [Content](#highlight.tags.content) that represents a heading.\n    */\n    heading,\n    /**\n    A level 1 [heading](#highlight.tags.heading).\n    */\n    heading1: t(heading),\n    /**\n    A level 2 [heading](#highlight.tags.heading).\n    */\n    heading2: t(heading),\n    /**\n    A level 3 [heading](#highlight.tags.heading).\n    */\n    heading3: t(heading),\n    /**\n    A level 4 [heading](#highlight.tags.heading).\n    */\n    heading4: t(heading),\n    /**\n    A level 5 [heading](#highlight.tags.heading).\n    */\n    heading5: t(heading),\n    /**\n    A level 6 [heading](#highlight.tags.heading).\n    */\n    heading6: t(heading),\n    /**\n    A prose [content](#highlight.tags.content) separator (such as a horizontal rule).\n    */\n    contentSeparator: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a list.\n    */\n    list: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a quote.\n    */\n    quote: t(content),\n    /**\n    [Content](#highlight.tags.content) that is emphasized.\n    */\n    emphasis: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled strong.\n    */\n    strong: t(content),\n    /**\n    [Content](#highlight.tags.content) that is part of a link.\n    */\n    link: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled as code or\n    monospace.\n    */\n    monospace: t(content),\n    /**\n    [Content](#highlight.tags.content) that has a strike-through\n    style.\n    */\n    strikethrough: t(content),\n    /**\n    Inserted text in a change-tracking format.\n    */\n    inserted: t(),\n    /**\n    Deleted text.\n    */\n    deleted: t(),\n    /**\n    Changed text.\n    */\n    changed: t(),\n    /**\n    An invalid or unsyntactic element.\n    */\n    invalid: t(),\n    /**\n    Metadata or meta-instruction.\n    */\n    meta,\n    /**\n    [Metadata](#highlight.tags.meta) that applies to the entire\n    document.\n    */\n    documentMeta: t(meta),\n    /**\n    [Metadata](#highlight.tags.meta) that annotates or adds\n    attributes to a given syntactic element.\n    */\n    annotation: t(meta),\n    /**\n    Processing instruction or preprocessor directive. Subtag of\n    [meta](#highlight.tags.meta).\n    */\n    processingInstruction: t(meta),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that a\n    given element is being defined. Expected to be used with the\n    various [name](#highlight.tags.name) tags.\n    */\n    definition: Tag.defineModifier(\"definition\"),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that\n    something is constant. Mostly expected to be used with\n    [variable names](#highlight.tags.variableName).\n    */\n    constant: Tag.defineModifier(\"constant\"),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) used to indicate that\n    a [variable](#highlight.tags.variableName) or [property\n    name](#highlight.tags.propertyName) is being called or defined\n    as a function.\n    */\n    function: Tag.defineModifier(\"function\"),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that can be applied to\n    [names](#highlight.tags.name) to indicate that they belong to\n    the language's standard environment.\n    */\n    standard: Tag.defineModifier(\"standard\"),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates a given\n    [names](#highlight.tags.name) is local to some scope.\n    */\n    local: Tag.defineModifier(\"local\"),\n    /**\n    A generic variant [modifier](#highlight.Tag^defineModifier) that\n    can be used to tag language-specific alternative variants of\n    some common tag. It is recommended for themes to define special\n    forms of at least the [string](#highlight.tags.string) and\n    [variable name](#highlight.tags.variableName) tags, since those\n    come up a lot.\n    */\n    special: Tag.defineModifier(\"special\")\n};\nfor (let name in tags) {\n    let val = tags[name];\n    if (val instanceof Tag)\n        val.name = name;\n}\n/**\nThis is a highlighter that adds stable, predictable classes to\ntokens, for styling with external CSS.\n\nThe following tags are mapped to their name prefixed with `\"tok-\"`\n(for example `\"tok-comment\"`):\n\n* [`link`](#highlight.tags.link)\n* [`heading`](#highlight.tags.heading)\n* [`emphasis`](#highlight.tags.emphasis)\n* [`strong`](#highlight.tags.strong)\n* [`keyword`](#highlight.tags.keyword)\n* [`atom`](#highlight.tags.atom)\n* [`bool`](#highlight.tags.bool)\n* [`url`](#highlight.tags.url)\n* [`labelName`](#highlight.tags.labelName)\n* [`inserted`](#highlight.tags.inserted)\n* [`deleted`](#highlight.tags.deleted)\n* [`literal`](#highlight.tags.literal)\n* [`string`](#highlight.tags.string)\n* [`number`](#highlight.tags.number)\n* [`variableName`](#highlight.tags.variableName)\n* [`typeName`](#highlight.tags.typeName)\n* [`namespace`](#highlight.tags.namespace)\n* [`className`](#highlight.tags.className)\n* [`macroName`](#highlight.tags.macroName)\n* [`propertyName`](#highlight.tags.propertyName)\n* [`operator`](#highlight.tags.operator)\n* [`comment`](#highlight.tags.comment)\n* [`meta`](#highlight.tags.meta)\n* [`punctuation`](#highlight.tags.punctuation)\n* [`invalid`](#highlight.tags.invalid)\n\nIn addition, these mappings are provided:\n\n* [`regexp`](#highlight.tags.regexp),\n  [`escape`](#highlight.tags.escape), and\n  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)\n  are mapped to `\"tok-string2\"`\n* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName2\"`\n* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-local\"`\n* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-definition\"`\n* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)\n  to `\"tok-propertyName tok-definition\"`\n*/\nconst classHighlighter = tagHighlighter([\n    { tag: tags.link, class: \"tok-link\" },\n    { tag: tags.heading, class: \"tok-heading\" },\n    { tag: tags.emphasis, class: \"tok-emphasis\" },\n    { tag: tags.strong, class: \"tok-strong\" },\n    { tag: tags.keyword, class: \"tok-keyword\" },\n    { tag: tags.atom, class: \"tok-atom\" },\n    { tag: tags.bool, class: \"tok-bool\" },\n    { tag: tags.url, class: \"tok-url\" },\n    { tag: tags.labelName, class: \"tok-labelName\" },\n    { tag: tags.inserted, class: \"tok-inserted\" },\n    { tag: tags.deleted, class: \"tok-deleted\" },\n    { tag: tags.literal, class: \"tok-literal\" },\n    { tag: tags.string, class: \"tok-string\" },\n    { tag: tags.number, class: \"tok-number\" },\n    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: \"tok-string2\" },\n    { tag: tags.variableName, class: \"tok-variableName\" },\n    { tag: tags.local(tags.variableName), class: \"tok-variableName tok-local\" },\n    { tag: tags.definition(tags.variableName), class: \"tok-variableName tok-definition\" },\n    { tag: tags.special(tags.variableName), class: \"tok-variableName2\" },\n    { tag: tags.definition(tags.propertyName), class: \"tok-propertyName tok-definition\" },\n    { tag: tags.typeName, class: \"tok-typeName\" },\n    { tag: tags.namespace, class: \"tok-namespace\" },\n    { tag: tags.className, class: \"tok-className\" },\n    { tag: tags.macroName, class: \"tok-macroName\" },\n    { tag: tags.propertyName, class: \"tok-propertyName\" },\n    { tag: tags.operator, class: \"tok-operator\" },\n    { tag: tags.comment, class: \"tok-comment\" },\n    { tag: tags.meta, class: \"tok-meta\" },\n    { tag: tags.invalid, class: \"tok-invalid\" },\n    { tag: tags.punctuation, class: \"tok-punctuation\" }\n]);\n\nexport { Tag, classHighlighter, getStyleTags, highlightCode, highlightTree, styleTags, tagHighlighter, tags };\n"],"names":["nextTagID","Tag","name","set","base","modified","mod","nameOrParent","parent","tag","t","Modifier","a","b","nextModifierID","mods","exists","sameArray","m","configs","powerSet","config","x","array","sets","i","j","e","styleTags","spec","byName","prop","tags","part","pieces","mode","rest","pos","next","last","inner","rule","Rule","ruleNodeProp","NodeProp","context","other","tagHighlighter","options","map","style","scope","all","cls","sub","tagClass","highlightTags","highlighters","result","highlighter","value","highlightTree","tree","putStyle","from","to","builder","HighlightBuilder","at","span","cursor","inheritedClass","type","start","end","h","getStyleTags","tagCls","mounted","innerHighlighters","hasChild","nextPos","rangeFrom","rangeTo","node","comment","typeName","propertyName","literal","string","number","content","heading","keyword","operator","punctuation","bracket","meta","val"],"mappings":"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","x_google_ignoreList":[0]}